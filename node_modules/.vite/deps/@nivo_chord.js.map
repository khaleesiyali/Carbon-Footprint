{
  "version": 3,
  "sources": ["../../d3-chord/node_modules/d3-array/src/ascending.js", "../../d3-chord/node_modules/d3-array/src/bisector.js", "../../d3-chord/node_modules/d3-array/src/bisect.js", "../../d3-chord/node_modules/d3-array/src/array.js", "../../d3-chord/node_modules/d3-array/src/range.js", "../../d3-chord/node_modules/d3-array/src/ticks.js", "../../d3-chord/src/math.js", "../../d3-chord/src/chord.js", "../../d3-chord/src/array.js", "../../d3-chord/src/constant.js", "../../d3-chord/node_modules/d3-path/src/path.js", "../../d3-chord/src/ribbon.js", "../../@nivo/arcs/src/arc_labels/ArcLabel.tsx", "../../@nivo/arcs/src/utils.ts", "../../@nivo/arcs/src/arcTransitionMode.ts", "../../@nivo/arcs/src/centers.ts", "../../@nivo/arcs/src/arc_labels/ArcLabelsLayer.tsx", "../../@nivo/arcs/src/arc_labels/canvas.ts", "../../@nivo/arcs/src/arc_labels/useArcLabels.ts", "../../@nivo/arcs/src/arc_labels/index.ts", "../../@nivo/arcs/src/arc_link_labels/ArcLinkLabel.tsx", "../../@nivo/arcs/src/arc_link_labels/compute.ts", "../../@nivo/arcs/src/arc_link_labels/useArcLinkLabelsTransition.ts", "../../@nivo/arcs/src/arc_link_labels/ArcLinkLabelsLayer.tsx", "../../@nivo/arcs/src/arc_link_labels/canvas.ts", "../../@nivo/arcs/src/arc_link_labels/useArcLinks.ts", "../../@nivo/arcs/src/arc_link_labels/useArcLinkLabels.ts", "../../@nivo/arcs/src/arc_link_labels/index.ts", "../../@nivo/arcs/src/ArcLine.tsx", "../../@nivo/arcs/src/ArcShape.tsx", "../../@nivo/arcs/src/interpolateArc.ts", "../../@nivo/arcs/src/useArcsTransition.ts", "../../@nivo/arcs/src/ArcsLayer.tsx", "../../@nivo/arcs/src/boundingBox.ts", "../../@nivo/arcs/src/interactivity.ts", "../../@nivo/arcs/src/useAnimatedArc.ts", "../../@nivo/arcs/src/useArcGenerator.ts", "../../@nivo/chord/src/ChordArcTooltip.tsx", "../../@nivo/chord/src/ChordRibbonTooltip.tsx", "../../@nivo/chord/src/defaults.ts", "../../@nivo/chord/src/compute.ts", "../../@nivo/chord/src/hooks.ts", "../../@nivo/chord/src/ChordRibbon.tsx", "../../@nivo/chord/src/ChordRibbons.tsx", "../../@nivo/chord/src/ChordArc.tsx", "../../@nivo/chord/src/ChordArcs.tsx", "../../@nivo/chord/src/ChordLabels.tsx", "../../@nivo/chord/src/Chord.tsx", "../../@nivo/chord/src/ChordCanvas.tsx", "../../@nivo/chord/src/ResponsiveChord.tsx", "../../@nivo/chord/src/ResponsiveChordCanvas.tsx"],
  "sourcesContent": ["export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n", "import ascending from \"./ascending\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n", "import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n", "var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n", "export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n", "var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n", "export var cos = Math.cos;\nexport var sin = Math.sin;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var tau = pi * 2;\nexport var max = Math.max;\n", "import {range} from \"d3-array\";\nimport {max, tau} from \"./math\";\n\nfunction compareValue(compare) {\n  return function(a, b) {\n    return compare(\n      a.source.value + a.target.value,\n      b.source.value + b.target.value\n    );\n  };\n}\n\nexport default function() {\n  var padAngle = 0,\n      sortGroups = null,\n      sortSubgroups = null,\n      sortChords = null;\n\n  function chord(matrix) {\n    var n = matrix.length,\n        groupSums = [],\n        groupIndex = range(n),\n        subgroupIndex = [],\n        chords = [],\n        groups = chords.groups = new Array(n),\n        subgroups = new Array(n * n),\n        k,\n        x,\n        x0,\n        dx,\n        i,\n        j;\n\n    // Compute the sum.\n    k = 0, i = -1; while (++i < n) {\n      x = 0, j = -1; while (++j < n) {\n        x += matrix[i][j];\n      }\n      groupSums.push(x);\n      subgroupIndex.push(range(n));\n      k += x;\n    }\n\n    // Sort groups…\n    if (sortGroups) groupIndex.sort(function(a, b) {\n      return sortGroups(groupSums[a], groupSums[b]);\n    });\n\n    // Sort subgroups…\n    if (sortSubgroups) subgroupIndex.forEach(function(d, i) {\n      d.sort(function(a, b) {\n        return sortSubgroups(matrix[i][a], matrix[i][b]);\n      });\n    });\n\n    // Convert the sum to scaling factor for [0, 2pi].\n    // TODO Allow start and end angle to be specified?\n    // TODO Allow padding to be specified as percentage?\n    k = max(0, tau - padAngle * n) / k;\n    dx = k ? padAngle : tau / n;\n\n    // Compute the start and end angle for each group and subgroup.\n    // Note: Opera has a bug reordering object literal properties!\n    x = 0, i = -1; while (++i < n) {\n      x0 = x, j = -1; while (++j < n) {\n        var di = groupIndex[i],\n            dj = subgroupIndex[di][j],\n            v = matrix[di][dj],\n            a0 = x,\n            a1 = x += v * k;\n        subgroups[dj * n + di] = {\n          index: di,\n          subindex: dj,\n          startAngle: a0,\n          endAngle: a1,\n          value: v\n        };\n      }\n      groups[di] = {\n        index: di,\n        startAngle: x0,\n        endAngle: x,\n        value: groupSums[di]\n      };\n      x += dx;\n    }\n\n    // Generate chords for each (non-empty) subgroup-subgroup link.\n    i = -1; while (++i < n) {\n      j = i - 1; while (++j < n) {\n        var source = subgroups[j * n + i],\n            target = subgroups[i * n + j];\n        if (source.value || target.value) {\n          chords.push(source.value < target.value\n              ? {source: target, target: source}\n              : {source: source, target: target});\n        }\n      }\n    }\n\n    return sortChords ? chords.sort(sortChords) : chords;\n  }\n\n  chord.padAngle = function(_) {\n    return arguments.length ? (padAngle = max(0, _), chord) : padAngle;\n  };\n\n  chord.sortGroups = function(_) {\n    return arguments.length ? (sortGroups = _, chord) : sortGroups;\n  };\n\n  chord.sortSubgroups = function(_) {\n    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\n  };\n\n  chord.sortChords = function(_) {\n    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\n  };\n\n  return chord;\n}\n", "export var slice = Array.prototype.slice;\n", "export default function(x) {\n  return function() {\n    return x;\n  };\n}\n", "var pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path;\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function(x1, y1, x, y) {\n    this._ += \"Q\" + (+x1) + \",\" + (+y1) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + (+x1) + \",\" + (+y1) + \",\" + (+x2) + \",\" + (+y2) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon));\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + (+(y01 * x20 > x01 * y20)) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) return;\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) da = da % tau + tau;\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + (+(da >= pi)) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + (+w) + \"v\" + (+h) + \"h\" + (-w) + \"Z\";\n  },\n  toString: function() {\n    return this._;\n  }\n};\n\nexport default path;\n", "import {slice} from \"./array\";\nimport constant from \"./constant\";\nimport {cos, halfPi, sin} from \"./math\";\nimport {path} from \"d3-path\";\n\nfunction defaultSource(d) {\n  return d.source;\n}\n\nfunction defaultTarget(d) {\n  return d.target;\n}\n\nfunction defaultRadius(d) {\n  return d.radius;\n}\n\nfunction defaultStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction defaultEndAngle(d) {\n  return d.endAngle;\n}\n\nexport default function() {\n  var source = defaultSource,\n      target = defaultTarget,\n      radius = defaultRadius,\n      startAngle = defaultStartAngle,\n      endAngle = defaultEndAngle,\n      context = null;\n\n  function ribbon() {\n    var buffer,\n        argv = slice.call(arguments),\n        s = source.apply(this, argv),\n        t = target.apply(this, argv),\n        sr = +radius.apply(this, (argv[0] = s, argv)),\n        sa0 = startAngle.apply(this, argv) - halfPi,\n        sa1 = endAngle.apply(this, argv) - halfPi,\n        sx0 = sr * cos(sa0),\n        sy0 = sr * sin(sa0),\n        tr = +radius.apply(this, (argv[0] = t, argv)),\n        ta0 = startAngle.apply(this, argv) - halfPi,\n        ta1 = endAngle.apply(this, argv) - halfPi;\n\n    if (!context) context = buffer = path();\n\n    context.moveTo(sx0, sy0);\n    context.arc(0, 0, sr, sa0, sa1);\n    if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?\n      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));\n      context.arc(0, 0, tr, ta0, ta1);\n    }\n    context.quadraticCurveTo(0, 0, sx0, sy0);\n    context.closePath();\n\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  ribbon.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), ribbon) : radius;\n  };\n\n  ribbon.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : startAngle;\n  };\n\n  ribbon.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), ribbon) : endAngle;\n  };\n\n  ribbon.source = function(_) {\n    return arguments.length ? (source = _, ribbon) : source;\n  };\n\n  ribbon.target = function(_) {\n    return arguments.length ? (target = _, ribbon) : target;\n  };\n\n  ribbon.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;\n  };\n\n  return ribbon;\n}\n", "import { CSSProperties } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\n\nconst staticStyle: CSSProperties = {\n    pointerEvents: 'none',\n}\n\nexport interface ArcLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        progress: SpringValue<number>\n        transform: Interpolation<string>\n        textColor: string\n    }\n}\n\nexport const ArcLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={style.transform} opacity={style.progress} style={staticStyle}>\n            <animated.text\n                textAnchor=\"middle\"\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n", "import { useMemo } from 'react'\nimport { radiansToDegrees, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { DatumWithArc } from './types'\n\n/**\n * Make sure an angle (expressed in radians)\n * always falls in the range 0~2*PI.\n */\nexport const getNormalizedAngle = (angle: number) => {\n    let normalizedAngle = angle % (Math.PI * 2)\n    if (normalizedAngle < 0) {\n        normalizedAngle += Math.PI * 2\n    }\n\n    return normalizedAngle\n}\n\n/**\n * Filter out arcs with a length below `skipAngle`.\n */\nexport const filterDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) =>\n    data.filter(\n        datum => Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >= skipAngle\n    )\n\n/**\n * Memoized version of `filterDataBySkipAngle`.\n */\nexport const useFilteredDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) => useMemo(() => filterDataBySkipAngle(data, skipAngle), [data, skipAngle])\n\nexport const svgEllipticalArcCommand = (\n    radius: number,\n    largeArcFlag: 0 | 1,\n    sweepFlag: 0 | 1,\n    x: number,\n    y: number\n) =>\n    [\n        'A',\n        radius,\n        radius,\n        0, // x-axis-rotation\n        largeArcFlag,\n        sweepFlag,\n        x,\n        y,\n    ].join(' ')\n\nexport const generateSvgArc = (\n    radius: number,\n    originalStartAngle: number,\n    originalEndAngle: number\n): string => {\n    const startAngle = Math.min(originalStartAngle, originalEndAngle)\n    const endAngle = Math.max(originalStartAngle, originalEndAngle)\n\n    const start = positionFromAngle(degreesToRadians(endAngle), radius)\n    const end = positionFromAngle(degreesToRadians(startAngle), radius)\n\n    // we have a full circle, we cannot use a single elliptical arc\n    // to draw it, so we use 2 in that case.\n    if (endAngle - startAngle >= 360) {\n        const mid = positionFromAngle(degreesToRadians(startAngle + 180), radius)\n\n        return [\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 1, mid.x, mid.y),\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 0, mid.x, mid.y),\n        ].join(' ')\n    }\n\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1\n\n    return [\n        `M ${start.x} ${start.y}`,\n        svgEllipticalArcCommand(radius, largeArcFlag, 0, end.x, end.y),\n    ].join(' ')\n}\n", "import { Arc, DatumWithArc } from './types'\nimport { useMemo } from 'react'\n\nexport interface ArcTransitionModeConfig {\n    enter: (arc: Arc) => Arc\n    update: (arc: Arc) => Arc\n    leave: (arc: Arc) => Arc\n}\n\nexport const arcTransitionModes = [\n    'startAngle',\n    'middleAngle',\n    'endAngle',\n    'innerRadius',\n    'centerRadius',\n    'outerRadius',\n    'pushIn',\n    'pushOut',\n] as const\nexport type ArcTransitionMode = (typeof arcTransitionModes)[number]\n\nexport const arcTransitionModeById: Record<ArcTransitionMode, ArcTransitionModeConfig> = {\n    startAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n    },\n    middleAngle: {\n        enter: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n    },\n    endAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n    },\n    innerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n    },\n    centerRadius: {\n        enter: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n    },\n    outerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n    pushIn: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n    },\n    pushOut: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n}\n\nexport interface TransitionExtra<Datum extends DatumWithArc, ExtraProps> {\n    enter: (datum: Datum) => ExtraProps\n    update: (datum: Datum) => ExtraProps\n    leave: (datum: Datum) => ExtraProps\n}\n\nexport const useArcTransitionMode = <Datum extends DatumWithArc, ExtraProps>(\n    mode: ArcTransitionMode,\n    extraTransition?: TransitionExtra<Datum, ExtraProps>\n) =>\n    useMemo(() => {\n        const transitionMode = arcTransitionModeById[mode]\n\n        return {\n            enter: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.enter(datum.arc),\n                ...(extraTransition ? extraTransition.enter(datum) : {}),\n            }),\n            update: (datum: Datum) => ({\n                progress: 1,\n                ...transitionMode.update(datum.arc),\n                ...(extraTransition ? extraTransition.update(datum) : {}),\n            }),\n            leave: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.leave(datum.arc),\n                ...(extraTransition ? extraTransition.leave(datum) : {}),\n            }),\n        }\n    }, [mode, extraTransition])\n", "import { useMemo } from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport {\n    // @ts-ignore\n    midAngle,\n    positionFromAngle,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Arc, DatumWithArc, Point } from './types'\nimport { filterDataBySkipAngle } from './utils'\nimport { ArcTransitionMode, TransitionExtra, useArcTransitionMode } from './arcTransitionMode'\n\nexport const computeArcCenter = (arc: Arc, offset: number): Point => {\n    const angle = midAngle(arc) - Math.PI / 2\n    const radius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) * offset\n\n    return positionFromAngle(angle, radius)\n}\n\nexport const interpolateArcCenter =\n    (offset: number) =>\n    (\n        startAngleValue: SpringValue<number>,\n        endAngleValue: SpringValue<number>,\n        innerRadiusValue: SpringValue<number>,\n        outerRadiusValue: SpringValue<number>\n    ) =>\n        to(\n            [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n            (startAngle, endAngle, innerRadius, outerRadius) => {\n                const centroid = computeArcCenter(\n                    { startAngle, endAngle, innerRadius, outerRadius },\n                    offset\n                )\n\n                return `translate(${centroid.x},${centroid.y})`\n            }\n        )\n\nexport const useArcCentersTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset = 0.5,\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArcCenter(offset),\n    }\n}\n\nexport interface ArcCenter<Datum extends DatumWithArc> extends Point {\n    data: Datum\n}\n\n/**\n * Compute an array of arc centers from an array of data containing arcs.\n *\n * If you plan to animate those, you could use `useArcCentersTransition`\n * instead, you could use the returned array with react-spring `useTransition`,\n * but this would lead to cartesian transitions (x/y), while `useArcCentersTransition`\n * will generate proper transitions using radius/angle.\n */\nexport const useArcCenters = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    offset = 0.5,\n    skipAngle = 0,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset?: number\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // this can be used to append extra properties to the centers,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: Datum) => ExtraProps\n}): (ArcCenter<Datum> & ExtraProps)[] =>\n    useMemo(\n        () =>\n            filterDataBySkipAngle<Datum>(data, skipAngle)\n                // compute position and extra props for each eligible datum\n                .map(datum => {\n                    const position = computeArcCenter(datum.arc, offset)\n\n                    return {\n                        ...computeExtraProps(datum),\n                        x: position.x,\n                        y: position.y,\n                        data: datum,\n                    }\n                }),\n        [data, offset, skipAngle, computeExtraProps]\n    )\n", "import { createElement, useMemo } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, radiansToDegrees, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useArcCentersTransition } from '../centers'\nimport { ArcTransitionMode } from '../arcTransitionMode'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabelsProps } from './props'\nimport { ArcLabel, ArcLabelProps } from './ArcLabel'\n\nexport type ArcLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: PropertyAccessor<Datum, string>\n    radiusOffset: ArcLabelsProps<Datum>['arcLabelsRadiusOffset']\n    skipAngle: ArcLabelsProps<Datum>['arcLabelsSkipAngle']\n    textColor: ArcLabelsProps<Datum>['arcLabelsTextColor']\n    transitionMode: ArcTransitionMode\n    component?: ArcLabelsProps<Datum>['arcLabelsComponent']\n}\n\nexport const ArcLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    transitionMode,\n    label: labelAccessor,\n    radiusOffset,\n    skipAngle,\n    textColor,\n    component = ArcLabel,\n}: ArcLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useMemo(\n        () =>\n            data.filter(datum => {\n                return (\n                    Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                    skipAngle\n                )\n            }),\n        [data, skipAngle]\n    )\n\n    const { transition, interpolate } = useArcCentersTransition<Datum>(\n        filteredData,\n        radiusOffset,\n        transitionMode\n    )\n\n    const Label: ArcLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        transform: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textColor: getTextColor(datum),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n", "import { CompleteTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabel } from './useArcLabels'\n\nexport const drawCanvasArcLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLabel<Datum>[],\n    theme: CompleteTheme\n) => {\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.fillText(`${label.label}`, label.x, label.y)\n    })\n}\n", "import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcCenters, ArcCenter } from '../centers'\n\nexport interface ArcLabel<Datum extends DatumWithArcAndColor> extends ArcCenter<Datum> {\n    label: string\n    textColor: string\n}\n\n/**\n * Compute arc labels, please note that the datum should\n * contain a color in order to be able to compute the label text color.\n *\n * Please see `useArcCenters` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset,\n    skipAngle,\n    label,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    skipAngle?: number\n    label: PropertyAccessor<Datum, string>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (datum: Datum) => {\n            return {\n                label: getLabel(datum),\n                textColor: getTextColor(datum),\n            }\n        },\n        [getLabel, getTextColor]\n    )\n\n    return useArcCenters<Datum, Omit<ArcLabel<Datum>, keyof ArcCenter<Datum>>>({\n        data,\n        offset,\n        skipAngle,\n        computeExtraProps,\n    })\n}\n", "import { ArcLabel } from './ArcLabel'\n\nexport const ArcLabelComponent = ArcLabel\nexport * from './ArcLabelsLayer'\nexport * from './canvas'\nexport * from './props'\nexport * from './useArcLabels'\n", "import { useTheme } from '@nivo/core'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from '../types'\n\nexport interface ArcLinkLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        path: Interpolation<string>\n        thickness: number\n        textPosition: Interpolation<string>\n        textAnchor: Interpolation<'start' | 'end'>\n        linkColor: SpringValue<string>\n        opacity: SpringValue<number>\n        textColor: SpringValue<string>\n    }\n}\n\nexport const ArcLinkLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLinkLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={style.opacity}>\n            <animated.path\n                fill=\"none\"\n                stroke={style.linkColor}\n                strokeWidth={style.thickness}\n                d={style.path}\n            />\n            <animated.text\n                transform={style.textPosition}\n                textAnchor={style.textAnchor}\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n", "import { positionFromAngle } from '@nivo/core'\nimport { Arc, Point } from '../types'\nimport { getNormalizedAngle } from '../utils'\nimport { ArcLink } from './types'\n\n/**\n * Compute text anchor for a given arc.\n *\n * `computeArcLink` already computes a `side`, but when using\n * `react-spring`, you cannot have a single interpolation\n * returning several output values, so we need to compute\n * them in separate interpolations.\n */\nexport const computeArcLinkTextAnchor = (arc: Arc): 'start' | 'end' => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        return 'start'\n    }\n\n    return 'end'\n}\n\n/**\n * Compute the link of a single arc, returning its points,\n * please note that points coordinates are relative to\n * the center of the arc.\n */\nexport const computeArcLink = (\n    arc: Arc,\n    offset: number,\n    diagonalLength: number,\n    straightLength: number\n): ArcLink => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n    const point0: Point = positionFromAngle(centerAngle, arc.outerRadius + offset)\n    const point1: Point = positionFromAngle(centerAngle, arc.outerRadius + offset + diagonalLength)\n\n    let side: ArcLink['side']\n    let point2: Point\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        side = 'after'\n        point2 = {\n            x: point1.x + straightLength,\n            y: point1.y,\n        }\n    } else {\n        side = 'before'\n        point2 = {\n            x: point1.x - straightLength,\n            y: point1.y,\n        }\n    }\n\n    return {\n        side,\n        points: [point0, point1, point2],\n    }\n}\n", "import { useMemo } from 'react'\nimport { SpringValue, useTransition, to } from '@react-spring/web'\nimport { line } from 'd3-shape'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, Point } from '../types'\nimport { useFilteredDataBySkipAngle } from '../utils'\nimport { computeArcLink, computeArcLinkTextAnchor } from './compute'\n\nconst lineGenerator = line<Point>()\n    .x(d => d.x)\n    .y(d => d.y)\n\ntype AnimatedProps = {\n    startAngle: number\n    endAngle: number\n    innerRadius: number\n    outerRadius: number\n    offset: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    linkColor: string\n    textColor: string\n    opacity: number\n}\n\nconst useTransitionPhases = <Datum extends DatumWithArcAndColor>({\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset,\n    getLinkColor,\n    getTextColor,\n}: Pick<AnimatedProps, 'offset' | 'diagonalLength' | 'straightLength' | 'textOffset'> & {\n    getLinkColor: (datum: Datum) => string\n    getTextColor: (datum: Datum) => string\n}): Record<'enter' | 'update' | 'leave', (datum: Datum) => AnimatedProps> =>\n    useMemo(\n        () => ({\n            enter: (datum: Datum) => ({\n                startAngle: datum.arc.startAngle,\n                endAngle: datum.arc.endAngle,\n                innerRadius: datum.arc.innerRadius,\n                outerRadius: datum.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(datum),\n                textColor: getTextColor(datum),\n                opacity: 0,\n            }),\n            update: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength,\n                straightLength,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 1,\n            }),\n            leave: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 0,\n            }),\n        }),\n        [diagonalLength, straightLength, textOffset, getLinkColor, getTextColor, offset]\n    )\n\nconst interpolateLink = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated\n        ) => {\n            const { points } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            return lineGenerator(points)\n        }\n    )\n\nconst interpolateTextAnchor = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return computeArcLinkTextAnchor({\n                startAngle,\n                endAngle,\n                innerRadius,\n                outerRadius,\n            })\n        }\n    )\n\n/**\n * Interpolating the text position involves almost the same computation\n * as `interpolateLink`, unfortunately `react-spring` does not support\n * multiple output values from a single interpolation.\n *\n * We should revise this if `react-spring` adds this feature at some point.\n */\nconst interpolateTextPosition = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>,\n    textOffsetValue: SpringValue<AnimatedProps['textOffset']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n            textOffsetValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated,\n            textOffset\n        ) => {\n            const { points, side } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            const position = points[2]\n            if (side === 'before') {\n                position.x -= textOffset\n            } else {\n                position.x += textOffset\n            }\n\n            return `translate(${position.x},${position.y})`\n        }\n    )\n\n/**\n * This hook can be used to animate a group of arc link labels,\n * if you just want to compute the labels, please use `useArcLinkLabels`.\n */\nexport const useArcLinkLabelsTransition = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset = 0,\n    diagonalLength,\n    straightLength,\n    skipAngle = 0,\n    textOffset,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    skipAngle?: number\n    textOffset: number\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useFilteredDataBySkipAngle<Datum>(data, skipAngle)\n    const transitionPhases = useTransitionPhases<Datum>({\n        offset,\n        diagonalLength,\n        straightLength,\n        textOffset,\n        getLinkColor,\n        getTextColor,\n    })\n\n    const transition = useTransition<Datum, AnimatedProps>(filteredData, {\n        keys: datum => datum.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolateLink,\n        interpolateTextAnchor,\n        interpolateTextPosition,\n    }\n}\n", "import { createElement } from 'react'\nimport { usePropertyAccessor } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcLinkLabelsTransition } from './useArcLinkLabelsTransition'\nimport { ArcLinkLabelsProps } from './props'\nimport { ArcLinkLabel, ArcLinkLabelProps } from './ArcLinkLabel'\n\nexport type ArcLinkLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLinkLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLinkLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: ArcLinkLabelsProps<Datum>['arcLinkLabel']\n    skipAngle: ArcLinkLabelsProps<Datum>['arcLinkLabelsSkipAngle']\n    offset: ArcLinkLabelsProps<Datum>['arcLinkLabelsOffset']\n    diagonalLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsDiagonalLength']\n    straightLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsStraightLength']\n    strokeWidth: ArcLinkLabelsProps<Datum>['arcLinkLabelsThickness']\n    textOffset: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextOffset']\n    textColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextColor']\n    linkColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsColor']\n    component?: ArcLinkLabelComponent<Datum>\n}\n\nexport const ArcLinkLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    label: labelAccessor,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    strokeWidth,\n    textOffset,\n    textColor,\n    linkColor,\n    component = ArcLinkLabel,\n}: ArcLinkLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n\n    const { transition, interpolateLink, interpolateTextAnchor, interpolateTextPosition } =\n        useArcLinkLabelsTransition<Datum>({\n            data,\n            skipAngle,\n            offset,\n            diagonalLength,\n            straightLength,\n            textOffset,\n            linkColor,\n            textColor,\n        })\n\n    const Label: ArcLinkLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        thickness: strokeWidth,\n                        path: interpolateLink(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength\n                        ),\n                        textAnchor: interpolateTextAnchor(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textPosition: interpolateTextPosition(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength,\n                            transitionProps.textOffset\n                        ),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n", "import {\n    // @ts-ignore\n    textPropsByEngine,\n    CompleteTheme,\n} from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkLabel } from './types'\n\nexport const drawCanvasArcLinkLabels = <Datum extends DatumWithArcAndColor>(\n    ctx: CanvasRenderingContext2D,\n    labels: ArcLinkLabel<Datum>[],\n    theme: CompleteTheme,\n    strokeWidth: number\n) => {\n    ctx.textBaseline = 'middle'\n    ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n    labels.forEach(label => {\n        ctx.fillStyle = label.textColor\n        ctx.textAlign = textPropsByEngine.canvas.align[label.textAnchor]\n        ctx.fillText(`${label.label}`, label.x, label.y)\n\n        ctx.beginPath()\n        ctx.strokeStyle = label.linkColor\n        ctx.lineWidth = strokeWidth\n        label.points.forEach((point, index) => {\n            if (index === 0) ctx.moveTo(point.x, point.y)\n            else ctx.lineTo(point.x, point.y)\n        })\n        ctx.stroke()\n    })\n}\n", "import { useMemo } from 'react'\nimport { radiansToDegrees } from '@nivo/core'\nimport { DatumWithArc } from '../types'\nimport { ArcLinkWithDatum } from './types'\nimport { computeArcLink } from './compute'\n\n/**\n * Compute links for an array of data containing arcs.\n *\n * This is typically used to create labels for arcs,\n * and it's used for the `useArcLinkLabels` hook.\n */\nexport const useArcLinks = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    skipAngle = 0,\n    offset = 0.5,\n    diagonalLength,\n    straightLength,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // offset from arc outer radius in pixels\n    offset?: number\n    // length of the diagonal segment of the link\n    diagonalLength: number\n    // length of the straight segment of the link\n    straightLength: number\n    // this can be used to append extra properties to the links,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: ArcLinkWithDatum<Datum>) => ExtraProps\n}): (ArcLinkWithDatum<Datum> & ExtraProps)[] => {\n    const links = useMemo(\n        () =>\n            data\n                // filter out arcs with a length below `skipAngle`\n                .filter(\n                    datum =>\n                        Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                        skipAngle\n                )\n                // compute the link for each eligible arc\n                .map(datum => ({\n                    ...computeArcLink(datum.arc, offset, diagonalLength, straightLength),\n                    data: datum,\n                })),\n        [data, skipAngle, offset, diagonalLength, straightLength]\n    )\n\n    // splitting memoization of links and extra props can be more efficient,\n    // this way if only `computeExtraProps` changes, we skip links computation.\n    return useMemo(\n        () =>\n            links.map(link => ({\n                ...computeExtraProps(link),\n                ...link,\n            })),\n        [links, computeExtraProps]\n    )\n}\n", "import { useCallback } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLinkWithDatum, ArcLinkLabel } from './types'\nimport { useArcLinks } from './useArcLinks'\n\n/**\n * Compute arc link labels, please note that the datum should\n * contain a color in order to be able to compute the link/label text color.\n *\n * Please see `useArcLinks` for a more detailed explanation\n * about the parameters.\n */\nexport const useArcLinkLabels = <Datum extends DatumWithArcAndColor>({\n    data,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset = 0,\n    label,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    skipAngle?: number\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    label: PropertyAccessor<Datum, string>\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const getLabel = usePropertyAccessor<Datum, string>(label)\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const computeExtraProps = useCallback(\n        (link: ArcLinkWithDatum<Datum>) => {\n            const position = {\n                x: link.points[2].x,\n                y: link.points[2].y,\n            }\n            let textAnchor: ArcLinkLabel<Datum>['textAnchor']\n            if (link.side === 'before') {\n                position.x -= textOffset\n                textAnchor = 'end'\n            } else {\n                position.x += textOffset\n                textAnchor = 'start'\n            }\n\n            return {\n                ...position,\n                label: getLabel(link.data),\n                linkColor: getLinkColor(link.data),\n                textAnchor,\n                textColor: getTextColor(link.data),\n            }\n        },\n        [getLabel, getLinkColor, getTextColor, textOffset]\n    )\n\n    return useArcLinks<Datum, Omit<ArcLinkLabel<Datum>, keyof ArcLinkWithDatum<Datum>>>({\n        data,\n        skipAngle,\n        offset,\n        diagonalLength,\n        straightLength,\n        computeExtraProps,\n    })\n}\n", "import { ArcLinkLabel } from './ArcLinkLabel'\n\nexport const ArcLinkLabelComponent = ArcLinkLabel\nexport * from './ArcLinkLabelsLayer'\nexport * from './canvas'\nexport * from './compute'\nexport * from './props'\nexport * from './types'\nexport * from './useArcLinkLabels'\nexport * from './useArcLinkLabelsTransition'\nexport * from './useArcLinks'\n", "import { animated, to, AnimatedProps } from '@react-spring/web'\nimport { ExtractProps } from '@nivo/core'\nimport { generateSvgArc } from './utils'\n\ntype ArcLineProps = {\n    animated: AnimatedProps<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>\n} & ExtractProps<typeof animated.path>\n\nexport const ArcLine = ({ animated: animatedProps, ...rest }: ArcLineProps) => (\n    <animated.path\n        d={to(\n            [animatedProps.radius, animatedProps.startAngle, animatedProps.endAngle],\n            (radius, start, end) => generateSvgArc(radius, start, end)\n        )}\n        {...rest}\n    />\n)\n", "import { useCallback, MouseEvent } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from './types'\n\nexport type ArcMouseHandler<Datum extends DatumWithArcAndColor> = (\n    datum: Datum,\n    event: MouseEvent<SVGPathElement>\n) => void\n\nexport interface ArcShapeProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    style: {\n        opacity: SpringValue<number>\n        color: SpringValue<string>\n        borderWidth: number\n        borderColor: SpringValue<string>\n        path: Interpolation<string>\n    }\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n}\n\n/**\n * A simple arc component to be used typically with an `ArcsLayer`.\n *\n * Please note that the component accepts `SpringValue`s instead of\n * regular values to support animations.\n */\nexport const ArcShape = <Datum extends DatumWithArcAndColor>({\n    datum,\n    style,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: ArcShapeProps<Datum>) => {\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onClick?.(datum, event),\n        [onClick, datum]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onMouseEnter?.(datum, event),\n        [onMouseEnter, datum]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onMouseMove?.(datum, event),\n        [onMouseMove, datum]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => onMouseLeave?.(datum, event),\n        [onMouseLeave, datum]\n    )\n\n    return (\n        <animated.path\n            d={style.path}\n            opacity={style.opacity}\n            fill={datum.fill || style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            onClick={onClick ? handleClick : undefined}\n            onMouseEnter={onMouseEnter ? handleMouseEnter : undefined}\n            onMouseMove={onMouseMove ? handleMouseMove : undefined}\n            onMouseLeave={onMouseLeave ? handleMouseLeave : undefined}\n        />\n    )\n}\n", "import { to, SpringValue } from '@react-spring/web'\nimport { ArcGenerator } from './types'\n\n/**\n * Directly animating paths for arcs leads to sub-optimal results\n * as the interpolation is going to be linear while we deal with polar coordinates,\n * this interpolator is going to generate proper arc transitions.\n * It should be used with the `useAnimatedArc` or `useArcsTransition` hooks.\n */\nexport const interpolateArc = (\n    startAngleValue: SpringValue<number>,\n    endAngleValue: SpringValue<number>,\n    innerRadiusValue: SpringValue<number>,\n    outerRadiusValue: SpringValue<number>,\n    arcGenerator: ArcGenerator\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return arcGenerator({\n                startAngle,\n                endAngle,\n                innerRadius: Math.max(0, innerRadius),\n                outerRadius: Math.max(0, outerRadius),\n            })\n        }\n    )\n", "import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { DatumWithArc } from './types'\nimport { ArcTransitionMode, useArcTransitionMode, TransitionExtra } from './arcTransitionMode'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a group of arcs,\n * if you want to animate a single arc,\n * please have a look at the `useAnimatedArc` hook.\n */\nexport const useArcsTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArc,\n    }\n}\n", "import { createElement } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, ArcGenerator } from './types'\nimport { useArcsTransition } from './useArcsTransition'\nimport { ArcTransitionMode } from './arcTransitionMode'\nimport { ArcMouseHandler, ArcShape, ArcShapeProps } from './ArcShape'\n\nexport type ArcComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcShapeProps<Datum>\n) => JSX.Element\n\ninterface ArcsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    borderColor: InheritedColorConfig<Datum>\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n    transitionMode: ArcTransitionMode\n    component?: ArcComponent<Datum>\n}\n\nexport const ArcsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n    component = ArcShape,\n}: ArcsLayerProps<Datum>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<Datum>(borderColor, theme)\n\n    const { transition, interpolate } = useArcsTransition<\n        Datum,\n        {\n            opacity: number\n            color: string\n            borderColor: string\n        }\n    >(data, transitionMode, {\n        enter: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        update: datum => ({\n            opacity: 1,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        leave: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n    })\n\n    const Arc: ArcComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Arc, {\n                    key: datum.id,\n                    datum,\n                    style: {\n                        ...transitionProps,\n                        borderWidth,\n                        path: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            arcGenerator\n                        ),\n                    },\n                    onClick,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                })\n            })}\n        </g>\n    )\n}\n", "import { positionFromAngle, degreesToRadians } from '@nivo/core'\n\n/**\n * Computes the bounding box for a circle arc.\n *\n * Assumptions:\n *   - Anywhere the arc intersects an axis will be a max or a min.\n *   - If the arc doesn't intersect an axis, then the center\n *     will be one corner of the bounding rectangle,\n *     and this is the only case when it will be.\n *   - The only other possible extreme points of the sector to consider\n *     are the endpoints of the radii.\n *\n * This script was built within the help of this answer on stackoverflow:\n *   https://stackoverflow.com/questions/1336663/2d-bounding-box-of-a-sector\n */\nexport const computeArcBoundingBox = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    // in degrees\n    startAngle: number,\n    // in degrees\n    endAngle: number,\n    includeCenter = true\n) => {\n    let points: [number, number][] = []\n\n    const p0 = positionFromAngle(degreesToRadians(startAngle), radius)\n    points.push([p0.x, p0.y])\n\n    const p1 = positionFromAngle(degreesToRadians(endAngle), radius)\n    points.push([p1.x, p1.y])\n\n    for (\n        let angle = Math.round(Math.min(startAngle, endAngle));\n        angle <= Math.round(Math.max(startAngle, endAngle));\n        angle++\n    ) {\n        if (angle % 90 === 0) {\n            const p = positionFromAngle(degreesToRadians(angle), radius)\n            points.push([p.x, p.y])\n        }\n    }\n\n    points = points.map(([x, y]) => [centerX + x, centerY + y])\n    if (includeCenter) {\n        points.push([centerX, centerY])\n    }\n\n    const xs = points.map(([x]) => x)\n    const ys = points.map(([, y]) => y)\n\n    const x0 = Math.min(...xs)\n    const x1 = Math.max(...xs)\n\n    const y0 = Math.min(...ys)\n    const y1 = Math.max(...ys)\n\n    return {\n        points,\n        x: x0,\n        y: y0,\n        width: x1 - x0,\n        height: y1 - y0,\n    }\n}\n", "import { getDistance, getAngle } from '@nivo/core'\nimport { Arc } from './types'\n\n/**\n * Check if cursor is in given ring.\n */\nexport const isCursorInRing = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    cursorX: number,\n    cursorY: number\n) => {\n    const distance = getDistance(cursorX, cursorY, centerX, centerY)\n\n    return distance < radius && distance > innerRadius\n}\n\n/**\n * Search for an arc being under cursor.\n */\nexport const findArcUnderCursor = <A extends Arc = Arc>(\n    centerX: number,\n    centerY: number,\n    radius: number,\n    innerRadius: number,\n    arcs: A[],\n    cursorX: number,\n    cursorY: number\n): A | undefined => {\n    if (!isCursorInRing(centerX, centerY, radius, innerRadius, cursorX, cursorY)) {\n        return undefined\n    }\n\n    const cursorAngle = getAngle(cursorX, cursorY, centerX, centerY)\n\n    return arcs.find(\n        ({ startAngle, endAngle }) => cursorAngle >= startAngle && cursorAngle < endAngle\n    )\n}\n", "import { useSpring } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { Arc, ArcGenerator } from './types'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a single arc,\n * if you want to animate a group of arcs,\n * please have a look at the `useArcsTransition` hook.\n */\nexport const useAnimatedArc = (datumWithArc: { arc: Arc }, arcGenerator: ArcGenerator) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedValues = useSpring({\n        startAngle: datumWithArc.arc.startAngle,\n        endAngle: datumWithArc.arc.endAngle,\n        innerRadius: datumWithArc.arc.innerRadius,\n        outerRadius: datumWithArc.arc.outerRadius,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        ...animatedValues,\n        path: interpolateArc(\n            animatedValues.startAngle,\n            animatedValues.endAngle,\n            animatedValues.innerRadius,\n            animatedValues.outerRadius,\n            arcGenerator\n        ),\n    }\n}\n", "import { useMemo } from 'react'\nimport { arc as d3Arc } from 'd3-shape'\nimport { ArcGenerator, Arc } from './types'\n\n/**\n * Memoize a d3 arc generator.\n *\n * Please note that both inner/outer radius aren't static\n * and should come from the arc itself, while it requires\n * more props on the arcs, it provides more flexibility\n * because it's not limited to pie then but can also work\n * with charts such as sunbursts.\n */\nexport const useArcGenerator = ({\n    cornerRadius = 0,\n    padAngle = 0,\n}: {\n    cornerRadius?: number\n    padAngle?: number\n} = {}): ArcGenerator =>\n    useMemo(\n        () =>\n            d3Arc<Arc>()\n                .innerRadius(arc => arc.innerRadius)\n                .outerRadius(arc => arc.outerRadius)\n                .cornerRadius(cornerRadius)\n                .padAngle(padAngle),\n        [cornerRadius, padAngle]\n    )\n", "import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { ArcTooltipComponentProps } from './types'\n\nexport const ChordArcTooltip = memo(({ arc }: ArcTooltipComponentProps) => (\n    <BasicTooltip id={arc.label} value={arc.formattedValue} color={arc.color} enableChip={true} />\n))\n", "import { memo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { RibbonTooltipComponentProps } from './types'\n\nexport const ChordRibbonTooltip = memo(({ ribbon }: RibbonTooltipComponentProps) => (\n    <TableTooltip\n        rows={[\n            [\n                <Chip key=\"chip\" color={ribbon.source.color} />,\n                <strong key=\"id\">{ribbon.source.label}</strong>,\n                ribbon.source.formattedValue,\n            ],\n            [\n                <Chip key=\"chip\" color={ribbon.target.color} />,\n                <strong key=\"id\">{ribbon.target.label}</strong>,\n                ribbon.target.formattedValue,\n            ],\n        ]}\n    />\n))\n", "import { LayerId, ChordSvgProps, ChordCommonProps } from './types'\nimport { ChordArcTooltip } from './ChordArcTooltip'\nimport { ChordRibbonTooltip } from './ChordRibbonTooltip'\n\nexport const commonDefaultProps: Omit<\n    ChordCommonProps,\n    | 'valueFormat'\n    | 'margin'\n    | 'theme'\n    | 'onArcMouseEnter'\n    | 'onArcMouseMove'\n    | 'onArcMouseLeave'\n    | 'onArcClick'\n    | 'onRibbonMouseEnter'\n    | 'onRibbonMouseMove'\n    | 'onRibbonMouseLeave'\n    | 'onRibbonClick'\n    | 'renderWrapper'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['ribbons', 'arcs', 'labels', 'legends'],\n\n    padAngle: 0,\n    innerRadiusRatio: 0.9,\n    innerRadiusOffset: 0,\n\n    colors: { scheme: 'nivo' },\n\n    arcOpacity: 1,\n    activeArcOpacity: 1,\n    inactiveArcOpacity: 0.15,\n    arcBorderWidth: 1,\n    arcBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n    arcTooltip: ChordArcTooltip,\n\n    ribbonOpacity: 0.5,\n    activeRibbonOpacity: 0.85,\n    inactiveRibbonOpacity: 0.15,\n    ribbonBorderWidth: 1,\n    ribbonBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n    ribbonBlendMode: 'normal',\n\n    enableLabel: true,\n    label: 'id',\n    labelOffset: 12,\n    labelRotation: 0,\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    isInteractive: true,\n\n    legends: [],\n\n    animate: true,\n    motionConfig: 'gentle',\n\n    role: 'img',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    ribbonBlendMode: 'normal' as NonNullable<ChordSvgProps['ribbonBlendMode']>,\n    ribbonTooltip: ChordRibbonTooltip,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n", "import { to, SpringValues } from '@react-spring/web'\nimport { arc as d3Arc } from 'd3-shape'\nimport { chord as d3Chord, ChordLayout, ribbon as d3Ribbon } from 'd3-chord'\nimport {\n    ArcDatum,\n    ChordCommonProps,\n    ChordDataProps,\n    RibbonAnimatedProps,\n    RibbonDatum,\n    RibbonGenerator,\n    ArcGenerator,\n    ArcAnimatedProps,\n} from './types'\nimport { OrdinalColorScale } from '@nivo/colors'\n\nexport const computeChordLayout = ({ padAngle }: { padAngle: ChordCommonProps['padAngle'] }) =>\n    d3Chord().padAngle(padAngle)\n\nexport const computeChordGenerators = ({\n    width,\n    height,\n    innerRadiusRatio,\n    innerRadiusOffset,\n}: {\n    width: number\n    height: number\n    innerRadiusRatio: ChordCommonProps['innerRadiusRatio']\n    innerRadiusOffset: ChordCommonProps['innerRadiusOffset']\n}) => {\n    const center: [number, number] = [width / 2, height / 2]\n    const radius = Math.min(width, height) / 2\n    const innerRadius = radius * innerRadiusRatio\n    const ribbonRadius = radius * (innerRadiusRatio - innerRadiusOffset)\n\n    return {\n        center,\n        radius,\n        innerRadius,\n        arcGenerator: d3Arc()\n            .outerRadius(radius)\n            .innerRadius(innerRadius) as unknown as ArcGenerator,\n        ribbonGenerator: d3Ribbon().radius(ribbonRadius) as unknown as RibbonGenerator,\n    }\n}\n\nexport const computeChordArcsAndRibbons = ({\n    chord,\n    data,\n    keys,\n    getLabel,\n    formatValue,\n    getColor,\n}: {\n    chord: ChordLayout\n    data: ChordDataProps['data']\n    keys: ChordDataProps['keys']\n    getLabel: (arc: Omit<ArcDatum, 'label' | 'color'>) => string\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<Omit<ArcDatum, 'label' | 'color'>>\n}): {\n    arcs: ArcDatum[]\n    ribbons: RibbonDatum[]\n} => {\n    const _ribbons = chord(data)\n\n    const arcs: ArcDatum[] = _ribbons.groups.map(chordGroup => {\n        const arc: Omit<ArcDatum, 'label' | 'color'> = {\n            ...chordGroup,\n            id: keys[chordGroup.index],\n            formattedValue: formatValue(chordGroup.value),\n        }\n\n        return {\n            ...arc,\n            label: getLabel(arc),\n            color: getColor(arc),\n        }\n    })\n\n    const ribbons: RibbonDatum[] = _ribbons.map(_ribbon => {\n        const source = {\n            ..._ribbon.source,\n            id: keys[_ribbon.source.index],\n            formattedValue: formatValue(_ribbon.source.value),\n        }\n\n        const target = {\n            ..._ribbon.target,\n            id: keys[_ribbon.target.index],\n            formattedValue: formatValue(_ribbon.target.value),\n        }\n\n        return {\n            ..._ribbon,\n            // ensure id remains the same even if source/target are reversed\n            id: [source.id, target.id].sort().join('.'),\n            source: {\n                ...source,\n                label: getLabel(source),\n                color: getColor(source),\n            },\n            target: {\n                ...target,\n                label: getLabel(target),\n                color: getColor(target),\n            },\n        }\n    })\n\n    return { arcs, ribbons }\n}\n\nexport const computeArcPath = ({\n    startAngle,\n    endAngle,\n    arcGenerator,\n}: SpringValues<Pick<ArcAnimatedProps, 'startAngle' | 'endAngle'>> & {\n    arcGenerator: ArcGenerator\n}) => to([startAngle, endAngle], (startAngle, endAngle) => arcGenerator({ startAngle, endAngle }))\n\nexport const computeRibbonPath = ({\n    sourceStartAngle,\n    sourceEndAngle,\n    targetStartAngle,\n    targetEndAngle,\n    ribbonGenerator,\n}: SpringValues<\n    Pick<\n        RibbonAnimatedProps,\n        'sourceStartAngle' | 'sourceEndAngle' | 'targetStartAngle' | 'targetEndAngle'\n    >\n> & {\n    ribbonGenerator: RibbonGenerator\n}) =>\n    to(\n        [sourceStartAngle, sourceEndAngle, targetStartAngle, targetEndAngle],\n        (sourceStartAngle, sourceEndAngle, targetStartAngle, targetEndAngle) =>\n            ribbonGenerator({\n                source: {\n                    startAngle: Math.min(sourceStartAngle, sourceEndAngle),\n                    endAngle: Math.max(sourceEndAngle, sourceStartAngle),\n                },\n                target: {\n                    startAngle: Math.min(targetStartAngle, targetEndAngle),\n                    endAngle: Math.max(targetEndAngle, targetStartAngle),\n                },\n            })\n    )\n", "import { useMemo, useState } from 'react'\nimport {\n    useValueFormatter,\n    // @ts-ignore\n    getLabelGenerator,\n} from '@nivo/core'\nimport { OrdinalColorScale, useOrdinalColorScale } from '@nivo/colors'\nimport { computeChordLayout, computeChordGenerators, computeChordArcsAndRibbons } from './compute'\nimport { ArcDatum, ChordCommonProps, ChordDataProps, CustomLayerProps, RibbonDatum } from './types'\nimport { commonDefaultProps } from './defaults'\nimport { ChordLayout } from 'd3-chord'\n\nexport const useChordLayout = ({ padAngle }: { padAngle: ChordCommonProps['padAngle'] }) =>\n    useMemo(() => computeChordLayout({ padAngle }), [padAngle])\n\nexport const useChordGenerators = ({\n    width,\n    height,\n    innerRadiusRatio,\n    innerRadiusOffset,\n}: {\n    width: number\n    height: number\n    innerRadiusRatio: ChordCommonProps['innerRadiusRatio']\n    innerRadiusOffset: ChordCommonProps['innerRadiusOffset']\n}) =>\n    useMemo(\n        () =>\n            computeChordGenerators({\n                width,\n                height,\n                innerRadiusRatio,\n                innerRadiusOffset,\n            }),\n        [width, height, innerRadiusRatio, innerRadiusOffset]\n    )\n\nexport const useChordArcsAndRibbons = ({\n    chord,\n    getColor,\n    keys,\n    data,\n    getLabel,\n    formatValue,\n}: {\n    chord: ChordLayout\n    data: ChordDataProps['data']\n    keys: ChordDataProps['keys']\n    getLabel: (arc: Omit<ArcDatum, 'label' | 'color'>) => string\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<Omit<ArcDatum, 'label' | 'color'>>\n}) =>\n    useMemo(\n        () =>\n            computeChordArcsAndRibbons({\n                chord,\n                data,\n                keys,\n                getLabel,\n                formatValue,\n                getColor,\n            }),\n        [chord, getColor, keys, data, getLabel, formatValue]\n    )\n\nexport const useChord = ({\n    data,\n    keys,\n    label = commonDefaultProps.label,\n    valueFormat,\n    width,\n    height,\n    innerRadiusRatio = commonDefaultProps.innerRadiusRatio,\n    innerRadiusOffset = commonDefaultProps.innerRadiusOffset,\n    padAngle = commonDefaultProps.padAngle,\n    colors = commonDefaultProps.colors,\n}: {\n    data: ChordDataProps['data']\n    keys: ChordDataProps['keys']\n    label?: ChordCommonProps['label']\n    valueFormat?: ChordCommonProps['valueFormat']\n    width: number\n    height: number\n    innerRadiusRatio?: ChordCommonProps['innerRadiusRatio']\n    innerRadiusOffset?: ChordCommonProps['innerRadiusOffset']\n    padAngle?: ChordCommonProps['padAngle']\n    colors?: ChordCommonProps['colors']\n}) => {\n    const chord = useChordLayout({ padAngle })\n    const { center, radius, innerRadius, arcGenerator, ribbonGenerator } = useChordGenerators({\n        width,\n        height,\n        innerRadiusRatio,\n        innerRadiusOffset,\n    })\n    const getLabel = useMemo(() => getLabelGenerator(label), [label])\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const { arcs, ribbons } = useChordArcsAndRibbons({\n        chord,\n        getColor,\n        keys,\n        data,\n        getLabel,\n        formatValue,\n    })\n\n    return {\n        center,\n        chord,\n        radius,\n        innerRadius,\n        arcGenerator,\n        ribbonGenerator,\n        getColor,\n        arcs,\n        ribbons,\n    }\n}\n\nexport const useChordSelection = ({\n    arcOpacity = commonDefaultProps.arcOpacity,\n    activeArcOpacity = commonDefaultProps.activeArcOpacity,\n    inactiveArcOpacity = commonDefaultProps.inactiveArcOpacity,\n    ribbons,\n    ribbonOpacity = commonDefaultProps.ribbonOpacity,\n    activeRibbonOpacity = commonDefaultProps.activeRibbonOpacity,\n    inactiveRibbonOpacity = commonDefaultProps.inactiveRibbonOpacity,\n}: {\n    arcOpacity?: ChordCommonProps['arcOpacity']\n    activeArcOpacity?: ChordCommonProps['activeArcOpacity']\n    inactiveArcOpacity?: ChordCommonProps['inactiveArcOpacity']\n    ribbons: RibbonDatum[]\n    ribbonOpacity?: ChordCommonProps['ribbonOpacity']\n    activeRibbonOpacity?: ChordCommonProps['activeRibbonOpacity']\n    inactiveRibbonOpacity?: ChordCommonProps['inactiveRibbonOpacity']\n}) => {\n    const [currentArc, setCurrentArc] = useState<ArcDatum | null>(null)\n    const [currentRibbon, setCurrentRibbon] = useState<RibbonDatum | null>(null)\n\n    const selection = useMemo(() => {\n        const selectedArcIds = []\n        const selectedRibbonIds = []\n\n        if (currentArc) {\n            selectedArcIds.push(currentArc.id)\n            ribbons\n                .filter(\n                    ribbon =>\n                        ribbon.source.id === currentArc.id || ribbon.target.id === currentArc.id\n                )\n                .forEach(ribbon => {\n                    selectedRibbonIds.push(ribbon.id)\n                })\n        }\n\n        if (currentRibbon) {\n            selectedArcIds.push(currentRibbon.source.id)\n            selectedArcIds.push(currentRibbon.target.id)\n            selectedRibbonIds.push(currentRibbon.id)\n        }\n\n        return { selectedArcIds, selectedRibbonIds }\n    }, [currentArc, currentRibbon, ribbons])\n\n    const hasSelection =\n        selection.selectedArcIds.length > 1 || selection.selectedRibbonIds.length > 0\n\n    const getArcOpacity = useMemo(\n        () => (arc: ArcDatum) => {\n            if (!hasSelection) return arcOpacity\n\n            return selection.selectedArcIds.includes(arc.id) ? activeArcOpacity : inactiveArcOpacity\n        },\n        [hasSelection, selection.selectedArcIds, arcOpacity, activeArcOpacity, inactiveArcOpacity]\n    )\n    const getRibbonOpacity = useMemo(\n        () => (ribbon: RibbonDatum) => {\n            if (!hasSelection) return ribbonOpacity\n\n            return selection.selectedRibbonIds.includes(ribbon.id)\n                ? activeRibbonOpacity\n                : inactiveRibbonOpacity\n        },\n        [\n            hasSelection,\n            selection.selectedRibbonIds,\n            ribbonOpacity,\n            activeRibbonOpacity,\n            inactiveRibbonOpacity,\n        ]\n    )\n\n    return {\n        currentArc,\n        setCurrentArc,\n        currentRibbon,\n        setCurrentRibbon,\n        hasSelection,\n        ...selection,\n        getArcOpacity,\n        getRibbonOpacity,\n    }\n}\n\nexport const useCustomLayerProps = ({\n    center,\n    radius,\n    arcs,\n    arcGenerator,\n    ribbons,\n    ribbonGenerator,\n}: {\n    center: [number, number]\n    radius: number\n    arcs: ArcDatum[]\n    arcGenerator: any\n    ribbons: RibbonDatum[]\n    ribbonGenerator: any\n}): CustomLayerProps =>\n    useMemo(\n        () => ({\n            center,\n            radius,\n            arcs,\n            arcGenerator,\n            ribbons,\n            ribbonGenerator,\n        }),\n        [center, radius, arcs, arcGenerator, ribbons, ribbonGenerator]\n    )\n", "import { createElement, memo, useMemo, MouseEvent } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ChordCommonProps,\n    ChordSvgProps,\n    RibbonAnimatedProps,\n    RibbonDatum,\n    RibbonGenerator,\n} from './types'\nimport { computeRibbonPath } from './compute'\n\ninterface ChordRibbonProps {\n    ribbon: RibbonDatum\n    ribbonGenerator: RibbonGenerator\n    animatedProps: SpringValues<RibbonAnimatedProps>\n    borderWidth: ChordCommonProps['ribbonBorderWidth']\n    blendMode: NonNullable<ChordSvgProps['ribbonBlendMode']>\n    setCurrent: (ribbon: RibbonDatum | null) => void\n    isInteractive: ChordCommonProps['isInteractive']\n    tooltip: NonNullable<ChordSvgProps['ribbonTooltip']>\n    onMouseEnter: ChordSvgProps['onRibbonMouseEnter']\n    onMouseMove: ChordSvgProps['onRibbonMouseMove']\n    onMouseLeave: ChordSvgProps['onRibbonMouseLeave']\n    onClick: ChordSvgProps['onRibbonClick']\n}\n\nexport const ChordRibbon = memo(\n    ({\n        ribbon,\n        ribbonGenerator,\n        animatedProps,\n        borderWidth,\n        blendMode,\n        isInteractive,\n        setCurrent,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordRibbonProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(ribbon)\n                showTooltipFromEvent(createElement(tooltip, { ribbon }), event)\n                onMouseEnter?.(ribbon, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, ribbon, onMouseEnter, setCurrent])\n\n        const handleMouseMove = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                showTooltipFromEvent(createElement(tooltip, { ribbon }), event)\n                onMouseMove?.(ribbon, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, ribbon, onMouseMove])\n\n        const handleMouseLeave = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(null)\n                hideTooltip()\n                onMouseLeave?.(ribbon, event)\n            }\n        }, [isInteractive, hideTooltip, ribbon, onMouseLeave, setCurrent])\n\n        const handleClick = useMemo(() => {\n            if (!isInteractive || !onClick) return undefined\n\n            return (event: MouseEvent) => onClick?.(ribbon, event)\n        }, [isInteractive, ribbon, onClick])\n\n        return (\n            <animated.path\n                data-testid={`ribbon.${ribbon.source.id}.${ribbon.target.id}`}\n                d={computeRibbonPath({\n                    sourceStartAngle: animatedProps.sourceStartAngle,\n                    sourceEndAngle: animatedProps.sourceEndAngle,\n                    targetStartAngle: animatedProps.targetStartAngle,\n                    targetEndAngle: animatedProps.targetEndAngle,\n                    ribbonGenerator,\n                })}\n                fill={animatedProps.color}\n                opacity={animatedProps.opacity}\n                strokeWidth={borderWidth}\n                stroke={animatedProps.borderColor}\n                style={{ mixBlendMode: blendMode }}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n", "import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport {\n    useTheme,\n    // @ts-ignore\n    midAngle,\n    useMotionConfig,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { ChordRibbon } from './ChordRibbon'\nimport {\n    ChordCommonProps,\n    ChordSvgProps,\n    RibbonDatum,\n    RibbonAnimatedProps,\n    RibbonGenerator,\n    ArcDatum,\n} from './types'\n\n/**\n * Used to get ribbon angles, instead of using source and target arcs,\n * we sort arcs by value to have smooth transitions, otherwise,\n * if source|target arc value becomes greater than the other,\n * the ribbon will be reversed.\n */\nconst getRibbonAngles = ({ source, target }: RibbonDatum, useMiddleAngle: boolean) => {\n    let firstArc: ArcDatum\n    let secondArc: ArcDatum\n    if (source.startAngle < target.startAngle) {\n        firstArc = source\n        secondArc = target\n    } else {\n        firstArc = target\n        secondArc = source\n    }\n\n    if (useMiddleAngle) {\n        const firstMiddleAngle = midAngle(firstArc)\n        const secondMiddleAngle = midAngle(secondArc)\n\n        return {\n            sourceStartAngle: firstMiddleAngle,\n            sourceEndAngle: firstMiddleAngle,\n            targetStartAngle: secondMiddleAngle,\n            targetEndAngle: secondMiddleAngle,\n        }\n    }\n\n    return {\n        sourceStartAngle: firstArc.startAngle,\n        sourceEndAngle: firstArc.endAngle,\n        targetStartAngle: secondArc.startAngle,\n        targetEndAngle: secondArc.endAngle,\n    }\n}\n\ninterface ChordRibbonsProps {\n    ribbons: RibbonDatum[]\n    ribbonGenerator: RibbonGenerator\n    borderWidth: ChordCommonProps['ribbonBorderWidth']\n    borderColor: ChordCommonProps['ribbonBorderColor']\n    getOpacity: (ribbon: RibbonDatum) => number\n    blendMode: NonNullable<ChordSvgProps['ribbonBlendMode']>\n    isInteractive: ChordCommonProps['isInteractive']\n    setCurrent: (ribbon: RibbonDatum | null) => void\n    tooltip: NonNullable<ChordSvgProps['ribbonTooltip']>\n    onMouseEnter: ChordSvgProps['onRibbonMouseEnter']\n    onMouseMove: ChordSvgProps['onRibbonMouseMove']\n    onMouseLeave: ChordSvgProps['onRibbonMouseLeave']\n    onClick: ChordSvgProps['onRibbonClick']\n}\n\nexport const ChordRibbons = memo(\n    ({\n        ribbons,\n        ribbonGenerator,\n        borderWidth,\n        borderColor,\n        getOpacity,\n        blendMode,\n        isInteractive,\n        setCurrent,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordRibbonsProps) => {\n        const { animate, config: springConfig } = useMotionConfig()\n\n        const theme = useTheme()\n        const getBorderColor = useInheritedColor(borderColor, theme)\n\n        const transition = useTransition<RibbonDatum, RibbonAnimatedProps>(ribbons, {\n            keys: ribbon => ribbon.id,\n            initial: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: getOpacity(ribbon),\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            from: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: 0,\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            update: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: getOpacity(ribbon),\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            leave: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: 0,\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            expires: true,\n            config: springConfig,\n            immediate: !animate,\n        })\n\n        return (\n            <>\n                {transition((animatedProps, ribbon) => (\n                    <ChordRibbon\n                        key={ribbon.id}\n                        ribbon={ribbon}\n                        ribbonGenerator={ribbonGenerator}\n                        animatedProps={animatedProps}\n                        borderWidth={borderWidth}\n                        blendMode={blendMode}\n                        setCurrent={setCurrent}\n                        isInteractive={isInteractive}\n                        tooltip={tooltip}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                    />\n                ))}\n            </>\n        )\n    }\n)\n", "import { createElement, memo, useMemo, MouseEvent } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ArcAnimatedProps, ArcDatum, ArcGenerator, ChordCommonProps } from './types'\nimport { computeArcPath } from './compute'\n\ninterface ChordArcProps {\n    arc: ArcDatum\n    animatedProps: SpringValues<ArcAnimatedProps>\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    setCurrent: (arc: ArcDatum | null) => void\n    isInteractive: ChordCommonProps['isInteractive']\n    onMouseEnter?: ChordCommonProps['onArcMouseEnter']\n    onMouseMove?: ChordCommonProps['onArcMouseMove']\n    onMouseLeave?: ChordCommonProps['onArcMouseLeave']\n    onClick?: ChordCommonProps['onArcClick']\n    tooltip: ChordCommonProps['arcTooltip']\n}\n\nexport const ChordArc = memo(\n    ({\n        arc,\n        animatedProps,\n        borderWidth,\n        arcGenerator,\n        setCurrent,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordArcProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(arc)\n                showTooltipFromEvent(createElement(tooltip, { arc }), event)\n                onMouseEnter?.(arc, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, arc, onMouseEnter, setCurrent])\n\n        const handleMouseMove = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                showTooltipFromEvent(createElement(tooltip, { arc }), event)\n                onMouseMove?.(arc, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, arc, onMouseMove])\n\n        const handleMouseLeave = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(null)\n                hideTooltip()\n                onMouseLeave?.(arc, event)\n            }\n        }, [isInteractive, hideTooltip, arc, onMouseLeave, setCurrent])\n\n        const handleClick = useMemo(() => {\n            if (!isInteractive || !onClick) return undefined\n\n            return (event: MouseEvent) => onClick?.(arc, event)\n        }, [isInteractive, arc, onClick])\n\n        return (\n            <animated.path\n                data-testid={`arc.${arc.id}`}\n                d={computeArcPath({\n                    startAngle: animatedProps.startAngle,\n                    endAngle: animatedProps.endAngle,\n                    arcGenerator,\n                })}\n                fill={animatedProps.color}\n                opacity={animatedProps.opacity}\n                strokeWidth={borderWidth}\n                stroke={animatedProps.borderColor}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n", "import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { ChordArc } from './ChordArc'\nimport { ArcDatum, ArcGenerator, ChordCommonProps, ArcAnimatedProps } from './types'\n\ninterface ChordArcsProps {\n    arcs: ArcDatum[]\n    arcGenerator: ArcGenerator\n    borderWidth: ChordCommonProps['arcBorderWidth']\n    borderColor: ChordCommonProps['arcBorderColor']\n    getOpacity: (arc: ArcDatum) => number\n    setCurrent: (arc: ArcDatum | null) => void\n    isInteractive: ChordCommonProps['isInteractive']\n    onMouseEnter?: ChordCommonProps['onArcMouseEnter']\n    onMouseMove?: ChordCommonProps['onArcMouseMove']\n    onMouseLeave?: ChordCommonProps['onArcMouseLeave']\n    onClick?: ChordCommonProps['onArcClick']\n    tooltip: ChordCommonProps['arcTooltip']\n}\n\nexport const ChordArcs = memo(\n    ({\n        arcs,\n        borderWidth,\n        borderColor,\n        getOpacity,\n        arcGenerator,\n        setCurrent,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordArcsProps) => {\n        const { animate, config: springConfig } = useMotionConfig()\n\n        const theme = useTheme()\n        const getBorderColor = useInheritedColor(borderColor, theme)\n\n        const transition = useTransition<ArcDatum, ArcAnimatedProps>(arcs, {\n            keys: arc => arc.id,\n            initial: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: getOpacity(arc),\n                borderColor: getBorderColor(arc),\n            }),\n            from: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: 0,\n                borderColor: getBorderColor(arc),\n            }),\n            update: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: getOpacity(arc),\n                borderColor: getBorderColor(arc),\n            }),\n            leave: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: 0,\n                borderColor: getBorderColor(arc),\n            }),\n            expires: true,\n            config: springConfig,\n            immediate: !animate,\n        })\n\n        return (\n            <>\n                {transition((animatedProps, arc) => (\n                    <ChordArc\n                        key={arc.id}\n                        arc={arc}\n                        arcGenerator={arcGenerator}\n                        animatedProps={animatedProps}\n                        borderWidth={borderWidth}\n                        setCurrent={setCurrent}\n                        isInteractive={isInteractive}\n                        tooltip={tooltip}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                    />\n                ))}\n            </>\n        )\n    }\n)\n", "import { memo, useMemo } from 'react'\nimport { useTransition, animated, to } from '@react-spring/web'\nimport {\n    // @ts-ignore\n    midAngle,\n    // @ts-ignore\n    getPolarLabelProps,\n    useTheme,\n} from '@nivo/core'\nimport { useMotionConfig } from '@nivo/core'\nimport { ArcDatum, ChordCommonProps } from './types'\nimport { useInheritedColor } from '@nivo/colors'\n\ninterface ChordLabelsProps {\n    arcs: ArcDatum[]\n    radius: number\n    rotation: number\n    color: ChordCommonProps['labelTextColor']\n}\n\nexport const ChordLabels = memo(({ arcs, radius, rotation, color }: ChordLabelsProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    const labels = useMemo(\n        () =>\n            arcs.map(arc => {\n                const angle = midAngle(arc)\n                const textProps = getPolarLabelProps(radius, angle, rotation)\n\n                return {\n                    id: arc.id,\n                    label: arc.label,\n                    x: textProps.x,\n                    y: textProps.y,\n                    rotation: textProps.rotate,\n                    color: getColor(arc),\n                    textAnchor: textProps.align,\n                    dominantBaseline: textProps.baseline,\n                }\n            }),\n        [arcs, radius, rotation, getColor]\n    )\n\n    const transition = useTransition<\n        (typeof labels)[number],\n        {\n            x: number\n            y: number\n            rotation: number\n            color: string\n        }\n    >(labels, {\n        keys: label => label.id,\n        initial: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        from: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        enter: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        update: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        expires: true,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, label) => (\n                <animated.text\n                    key={label.id}\n                    data-testid={`label.${label.id}`}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: transitionProps.color,\n                    }}\n                    transform={to(\n                        [transitionProps.x, transitionProps.y, transitionProps.rotation],\n                        (x, y, rotation) => `translate(${x}, ${y}) rotate(${rotation})`\n                    )}\n                    textAnchor={label.textAnchor}\n                    dominantBaseline={label.dominantBaseline}\n                >\n                    {label.label}\n                </animated.text>\n            ))}\n        </>\n    )\n})\n", "import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { svgDefaultProps } from './defaults'\nimport { useChord, useChordSelection, useCustomLayerProps } from './hooks'\nimport { ChordRibbons } from './ChordRibbons'\nimport { ChordArcs } from './ChordArcs'\nimport { ChordLabels } from './ChordLabels'\nimport { ChordSvgProps, LayerId } from './types'\n\ntype InnerChordProps = Omit<ChordSvgProps, 'animate' | 'motionConfig' | 'renderWrapper' | 'theme'>\n\nconst InnerChord = ({\n    data,\n    keys,\n    label,\n    valueFormat,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    innerRadiusRatio = svgDefaultProps.innerRadiusRatio,\n    innerRadiusOffset = svgDefaultProps.innerRadiusOffset,\n    padAngle = svgDefaultProps.padAngle,\n\n    layers = svgDefaultProps.layers,\n\n    colors = svgDefaultProps.colors,\n\n    arcBorderWidth = svgDefaultProps.arcBorderWidth,\n    arcBorderColor = svgDefaultProps.arcBorderColor,\n    arcOpacity = svgDefaultProps.arcOpacity,\n    activeArcOpacity = svgDefaultProps.activeArcOpacity,\n    inactiveArcOpacity = svgDefaultProps.inactiveArcOpacity,\n    arcTooltip = svgDefaultProps.arcTooltip,\n\n    ribbonBorderWidth = svgDefaultProps.ribbonBorderWidth,\n    ribbonBorderColor = svgDefaultProps.ribbonBorderColor,\n    ribbonBlendMode = svgDefaultProps.ribbonBlendMode,\n    ribbonOpacity = svgDefaultProps.ribbonOpacity,\n    activeRibbonOpacity = svgDefaultProps.activeRibbonOpacity,\n    inactiveRibbonOpacity = svgDefaultProps.inactiveRibbonOpacity,\n    ribbonTooltip = svgDefaultProps.ribbonTooltip,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    labelOffset = svgDefaultProps.labelOffset,\n    labelRotation = svgDefaultProps.labelRotation,\n    labelTextColor = svgDefaultProps.labelTextColor,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    onArcMouseEnter,\n    onArcMouseMove,\n    onArcMouseLeave,\n    onArcClick,\n    onRibbonMouseEnter,\n    onRibbonMouseMove,\n    onRibbonMouseLeave,\n    onRibbonClick,\n\n    legends = svgDefaultProps.legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerChordProps) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { center, radius, arcGenerator, ribbonGenerator, arcs, ribbons } = useChord({\n        data,\n        keys,\n        label,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        innerRadiusRatio,\n        innerRadiusOffset,\n        padAngle,\n        colors,\n    })\n\n    const { setCurrentArc, setCurrentRibbon, getArcOpacity, getRibbonOpacity } = useChordSelection({\n        arcOpacity,\n        activeArcOpacity,\n        inactiveArcOpacity,\n        ribbons,\n        ribbonOpacity,\n        activeRibbonOpacity,\n        inactiveRibbonOpacity,\n    })\n\n    const customLayerProps = useCustomLayerProps({\n        center,\n        radius,\n        arcs,\n        arcGenerator,\n        ribbons,\n        ribbonGenerator,\n    })\n\n    if (radius <= 0) return null\n\n    const legendData = arcs.map(arc => ({\n        id: arc.id,\n        label: arc.label,\n        color: arc.color,\n    }))\n\n    const layerById: Record<LayerId, ReactNode> = {\n        ribbons: null,\n        arcs: null,\n        labels: null,\n        legends: null,\n    }\n\n    if (layers.includes('ribbons')) {\n        layerById.ribbons = (\n            <g key=\"ribbons\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordRibbons\n                    ribbons={ribbons}\n                    ribbonGenerator={ribbonGenerator}\n                    borderWidth={ribbonBorderWidth}\n                    borderColor={ribbonBorderColor}\n                    getOpacity={getRibbonOpacity}\n                    blendMode={ribbonBlendMode}\n                    setCurrent={setCurrentRibbon}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onRibbonMouseEnter}\n                    onMouseMove={onRibbonMouseMove}\n                    onMouseLeave={onRibbonMouseLeave}\n                    onClick={onRibbonClick}\n                    tooltip={ribbonTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <g key=\"arcs\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordArcs\n                    arcs={arcs}\n                    arcGenerator={arcGenerator}\n                    borderWidth={arcBorderWidth}\n                    borderColor={arcBorderColor}\n                    getOpacity={getArcOpacity}\n                    setCurrent={setCurrentArc}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onArcMouseEnter}\n                    onMouseMove={onArcMouseMove}\n                    onMouseLeave={onArcMouseLeave}\n                    onClick={onArcClick}\n                    tooltip={arcTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('labels') && enableLabel) {\n        layerById.labels = (\n            <g key=\"labels\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordLabels\n                    arcs={arcs}\n                    radius={radius + labelOffset}\n                    rotation={labelRotation}\n                    color={labelTextColor}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('legends') && legends.length > 0) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Chord = ({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ChordSvgProps) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerChord isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { createElement, useRef, useEffect, useCallback, MouseEvent } from 'react'\nimport {\n    useDimensions,\n    useTheme,\n    // @ts-ignore\n    midAngle,\n    // @ts-ignore\n    getPolarLabelProps,\n    degreesToRadians,\n    getRelativeCursor,\n    Margin,\n    Container,\n} from '@nivo/core'\nimport { findArcUnderCursor } from '@nivo/arcs'\nimport { useInheritedColor } from '@nivo/colors'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useChord, useChordSelection, useCustomLayerProps } from './hooks'\nimport { ArcDatum, ChordCanvasProps } from './types'\nimport { canvasDefaultProps } from './defaults'\n\nconst getArcFromMouseEvent = ({\n    event,\n    canvasEl,\n    center,\n    margin,\n    radius,\n    innerRadius,\n    arcs,\n}: {\n    event: MouseEvent\n    canvasEl: HTMLCanvasElement\n    center: [number, number]\n    margin: Margin\n    radius: number\n    innerRadius: number\n    arcs: ArcDatum[]\n}) => {\n    const [x, y] = getRelativeCursor(canvasEl, event)\n    const centerX = margin.left + center[0]\n    const centerY = margin.top + center[1]\n\n    return findArcUnderCursor(centerX, centerY, radius, innerRadius, arcs as any[], x, y)\n}\n\ntype InnerChordCanvasProps = Omit<ChordCanvasProps, 'renderWrapper' | 'theme'>\n\nconst InnerChordCanvas = ({\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    margin: partialMargin,\n    data,\n    keys,\n    width,\n    height,\n    label = canvasDefaultProps.label,\n    valueFormat,\n    innerRadiusRatio = canvasDefaultProps.innerRadiusRatio,\n    innerRadiusOffset = canvasDefaultProps.innerRadiusOffset,\n    padAngle = canvasDefaultProps.padAngle,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    arcBorderWidth = canvasDefaultProps.arcBorderWidth,\n    arcBorderColor = canvasDefaultProps.arcBorderColor,\n    arcOpacity = canvasDefaultProps.arcOpacity,\n    activeArcOpacity = canvasDefaultProps.activeArcOpacity,\n    inactiveArcOpacity = canvasDefaultProps.inactiveArcOpacity,\n    arcTooltip = canvasDefaultProps.arcTooltip,\n    ribbonBorderWidth = canvasDefaultProps.ribbonBorderWidth,\n    ribbonBorderColor = canvasDefaultProps.ribbonBorderColor,\n    ribbonOpacity = canvasDefaultProps.ribbonOpacity,\n    activeRibbonOpacity = canvasDefaultProps.activeRibbonOpacity,\n    inactiveRibbonOpacity = canvasDefaultProps.inactiveRibbonOpacity,\n    enableLabel = canvasDefaultProps.enableLabel,\n    labelOffset = canvasDefaultProps.labelOffset,\n    labelRotation = canvasDefaultProps.labelRotation,\n    labelTextColor = canvasDefaultProps.labelTextColor,\n    isInteractive = canvasDefaultProps.isInteractive,\n    onArcMouseEnter,\n    onArcMouseMove,\n    onArcMouseLeave,\n    onArcClick,\n    legends = canvasDefaultProps.legends,\n}: InnerChordCanvasProps) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const { innerWidth, innerHeight, outerWidth, outerHeight, margin } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { center, radius, innerRadius, arcGenerator, ribbonGenerator, arcs, ribbons } = useChord({\n        data,\n        keys,\n        label,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        innerRadiusRatio,\n        innerRadiusOffset,\n        padAngle,\n        colors,\n    })\n\n    const { currentArc, setCurrentArc, getArcOpacity, getRibbonOpacity } = useChordSelection({\n        arcOpacity,\n        activeArcOpacity,\n        inactiveArcOpacity,\n        ribbons,\n        ribbonOpacity,\n        activeRibbonOpacity,\n        inactiveRibbonOpacity,\n    })\n\n    const theme = useTheme()\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const getArcBorderColor = useInheritedColor(arcBorderColor, theme)\n    const getRibbonBorderColor = useInheritedColor(ribbonBorderColor, theme)\n\n    const layerContext = useCustomLayerProps({\n        center,\n        radius,\n        arcs,\n        arcGenerator,\n        ribbons,\n        ribbonGenerator,\n    })\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        if (radius <= 0) return\n\n        layers.forEach(layer => {\n            if (layer === 'ribbons') {\n                ctx.save()\n                ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                ribbonGenerator.context(ctx)\n                ribbons.forEach(ribbon => {\n                    ctx.save()\n\n                    ctx.globalAlpha = getRibbonOpacity(ribbon)\n                    ctx.fillStyle = ribbon.source.color\n                    ctx.beginPath()\n                    ribbonGenerator(ribbon)\n                    ctx.fill()\n\n                    if (ribbonBorderWidth > 0) {\n                        ctx.strokeStyle = getRibbonBorderColor(ribbon.source)\n                        ctx.lineWidth = ribbonBorderWidth\n                        ctx.stroke()\n                    }\n\n                    ctx.restore()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'arcs') {\n                ctx.save()\n                ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                arcGenerator.context(ctx)\n                arcs.forEach(arc => {\n                    ctx.save()\n\n                    ctx.globalAlpha = getArcOpacity(arc)\n                    ctx.fillStyle = arc.color\n                    ctx.beginPath()\n                    arcGenerator(arc)\n                    ctx.fill()\n\n                    if (arcBorderWidth > 0) {\n                        ctx.strokeStyle = getArcBorderColor(arc)\n                        ctx.lineWidth = arcBorderWidth\n                        ctx.stroke()\n                    }\n\n                    ctx.restore()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'labels' && enableLabel === true) {\n                ctx.save()\n                ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                ctx.font = `${theme.labels.text.fontSize}px ${\n                    theme.labels.text.fontFamily || 'sans-serif'\n                }`\n\n                arcs.forEach(arc => {\n                    const angle = midAngle(arc)\n                    const props = getPolarLabelProps(radius + labelOffset, angle, labelRotation)\n\n                    ctx.save()\n                    ctx.translate(props.x, props.y)\n                    ctx.rotate(degreesToRadians(props.rotate))\n\n                    ctx.textAlign = props.align\n                    ctx.textBaseline = props.baseline\n                    ctx.fillStyle = getLabelTextColor(arc)\n                    ctx.fillText(arc.label, 0, 0)\n\n                    ctx.restore()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'legends') {\n                ctx.save()\n                ctx.translate(margin.left, margin.top)\n\n                const legendData = arcs.map(arc => ({\n                    id: arc.id,\n                    label: arc.label,\n                    color: arc.color,\n                }))\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n\n                ctx.restore()\n            }\n\n            if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin,\n        pixelRatio,\n        center,\n        radius,\n        theme,\n        layers,\n        arcs,\n        arcGenerator,\n        getArcOpacity,\n        arcBorderWidth,\n        getArcBorderColor,\n        ribbons,\n        ribbonGenerator,\n        getRibbonOpacity,\n        ribbonBorderWidth,\n        getRibbonBorderColor,\n        enableLabel,\n        labelOffset,\n        labelRotation,\n        getLabelTextColor,\n        legends,\n        layerContext,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (canvasEl.current === null) return\n\n            const arc = getArcFromMouseEvent({\n                event,\n                canvasEl: canvasEl.current,\n                center,\n                margin,\n                radius,\n                innerRadius,\n                arcs,\n            })\n\n            if (arc) {\n                setCurrentArc(arc)\n                showTooltipFromEvent(createElement(arcTooltip, { arc }), event)\n                !currentArc && onArcMouseEnter && onArcMouseEnter(arc, event)\n                onArcMouseMove && onArcMouseMove(arc, event)\n                currentArc &&\n                    currentArc.id !== arc.id &&\n                    onArcMouseLeave &&\n                    onArcMouseLeave(arc, event)\n            } else {\n                setCurrentArc(null)\n                hideTooltip()\n                currentArc && onArcMouseLeave && onArcMouseLeave(currentArc, event)\n            }\n        },\n        [\n            canvasEl,\n            center,\n            margin,\n            radius,\n            innerRadius,\n            arcs,\n            setCurrentArc,\n            currentArc,\n            showTooltipFromEvent,\n            hideTooltip,\n            arcTooltip,\n            onArcMouseEnter,\n            onArcMouseMove,\n            onArcMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setCurrentArc(null)\n        hideTooltip()\n    }, [setCurrentArc, hideTooltip])\n\n    const handleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (canvasEl.current === null || !onArcClick) return\n\n            const arc = getArcFromMouseEvent({\n                event,\n                canvasEl: canvasEl.current,\n                center,\n                margin,\n                radius,\n                innerRadius,\n                arcs,\n            })\n\n            arc && onArcClick(arc, event)\n        },\n        [canvasEl, center, margin, radius, innerRadius, arcs, onArcClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ChordCanvas = ({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: ChordCanvasProps) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerChordCanvas isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { Chord } from './Chord'\nimport { ChordSvgProps } from './types'\n\nexport const ResponsiveChord = (props: Omit<ChordSvgProps, 'width' | 'height'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Chord {...props} width={width} height={height} />}\n    </ResponsiveWrapper>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { ChordCanvas } from './ChordCanvas'\nimport { ChordCanvasProps } from './types'\n\nexport const ResponsiveChordCanvas = (props: Omit<ChordCanvasProps, 'width' | 'height'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ChordCanvas {...props} width={width} height={height} />}\n    </ResponsiveWrapper>\n)\n"],
  "mappings": "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",
  "names": ["a", "a", "x", "n", "i", "a", "n", "k", "x", "i", "j", "v", "_", "slice", "constant_default", "x", "pi", "tau", "x", "r", "w", "h", "slice", "t", "_", "constant_default", "lineGenerator", "line", "x", "d", "y", "isCursorInRing", "centerX", "centerY", "radius", "innerRadius", "cursorX", "cursorY", "distance", "getDistance", "findArcUnderCursor", "arcs", "cursorAngle", "getAngle", "find", "_ref", "startAngle", "endAngle", "ChordArcTooltip", "memo", "_ref", "arc", "_jsx", "BasicTooltip", "id", "label", "value", "formattedValue", "color", "enableChip", "ChordRibbonTooltip", "ribbon", "TableTooltip", "rows", "Chip", "source", "children", "target", "commonDefaultProps", "layers", "padAngle", "innerRadiusRatio", "innerRadiusOffset", "colors", "scheme", "arcOpacity", "activeArcOpacity", "inactiveArcOpacity", "arcBorderWidth", "arcBorderColor", "from", "modifiers", "arcTooltip", "ribbonOpacity", "activeRibbonOpacity", "inactiveRibbonOpacity", "ribbonBorderWidth", "ribbonBorderColor", "ribbonBlendMode", "enableLabel", "labelOffset", "labelRotation", "labelTextColor", "isInteractive", "legends", "animate", "motionConfig", "role", "svgDefaultProps", "_extends", "ribbonTooltip", "canvasDefaultProps", "pixelRatio", "window", "devicePixelRatio", "computeChordLayout", "d3Chord", "computeChordGenerators", "_ref2", "width", "height", "center", "radius", "Math", "min", "innerRadius", "ribbonRadius", "arcGenerator", "d3Arc", "outerRadius", "ribbonGenerator", "d3Ribbon", "computeChordArcsAndRibbons", "_ref3", "chord", "data", "keys", "getLabel", "formatValue", "getColor", "_ribbons", "arcs", "groups", "map", "chordGroup", "index", "ribbons", "_ribbon", "sort", "join", "computeArcPath", "_ref4", "startAngle", "endAngle", "to", "computeRibbonPath", "_ref5", "sourceStartAngle", "sourceEndAngle", "targetStartAngle", "targetEndAngle", "max", "useChordLayout", "useMemo", "useChordGenerators", "useChordArcsAndRibbons", "useChord", "_ref4$label", "valueFormat", "_ref4$innerRadiusRati", "_ref4$innerRadiusOffs", "_ref4$padAngle", "_ref4$colors", "_useChordGenerators", "getLabelGenerator", "useValueFormatter", "useOrdinalColorScale", "_useChordArcsAndRibbo", "useChordSelection", "_ref5$arcOpacity", "_ref5$activeArcOpacit", "_ref5$inactiveArcOpac", "_ref5$ribbonOpacity", "_ref5$activeRibbonOpa", "_ref5$inactiveRibbonO", "_useState", "useState", "currentArc", "setCurrentArc", "_useState2", "currentRibbon", "setCurrentRibbon", "selection", "selectedArcIds", "selectedRibbonIds", "push", "filter", "forEach", "hasSelection", "length", "getArcOpacity", "includes", "getRibbonOpacity", "useCustomLayerProps", "_ref6", "ChordRibbon", "animatedProps", "borderWidth", "blendMode", "setCurrent", "onMouseEnter", "onMouseMove", "onMouseLeave", "onClick", "tooltip", "_useTooltip", "useTooltip", "showTooltipFromEvent", "hideTooltip", "handleMouseEnter", "event", "createElement", "handleMouseMove", "handleMouseLeave", "handleClick", "animated", "path", "d", "fill", "opacity", "strokeWidth", "stroke", "borderColor", "style", "mixBlendMode", "getRibbonAngles", "useMiddleAngle", "firstArc", "secondArc", "firstMiddleAngle", "midAngle", "secondMiddleAngle", "ChordRibbons", "getOpacity", "_useMotionConfig", "useMotionConfig", "springConfig", "config", "theme", "useTheme", "getBorderColor", "useInheritedColor", "transition", "useTransition", "initial", "update", "leave", "expires", "immediate", "_Fragment", "ChordArc", "ChordArcs", "ChordLabels", "rotation", "labels", "angle", "textProps", "getPolarLabelProps", "x", "y", "rotate", "textAnchor", "align", "dominantBaseline", "baseline", "enter", "transitionProps", "text", "pointerEvents", "transform", "InnerChord", "partialMargin", "margin", "_ref$innerRadiusRatio", "_ref$innerRadiusOffse", "_ref$padAngle", "_ref$layers", "_ref$colors", "_ref$arcBorderWidth", "_ref$arcBorderColor", "_ref$arcOpacity", "_ref$activeArcOpacity", "_ref$inactiveArcOpaci", "_ref$arcTooltip", "_ref$ribbonBorderWidt", "_ref$ribbonBorderColo", "_ref$ribbonBlendMode", "_ref$ribbonOpacity", "_ref$activeRibbonOpac", "_ref$inactiveRibbonOp", "_ref$ribbonTooltip", "_ref$enableLabel", "_ref$labelOffset", "_ref$labelRotation", "_ref$labelTextColor", "_ref$isInteractive", "onArcMouseEnter", "onArcMouseMove", "onArcMouseLeave", "onArcClick", "onRibbonMouseEnter", "onRibbonMouseMove", "onRibbonMouseLeave", "onRibbonClick", "_ref$legends", "_ref$role", "ariaLabel", "ariaLabelledBy", "ariaDescribedBy", "_useDimensions", "useDimensions", "innerWidth", "innerHeight", "outerWidth", "outerHeight", "_useChord", "_useChordSelection", "customLayerProps", "legendData", "layerById", "Fragment", "legend", "i", "BoxLegendSvg", "containerWidth", "containerHeight", "SvgWrapper", "layer", "_layerById$layer", "Chord", "_ref2$isInteractive", "_ref2$animate", "_ref2$motionConfig", "renderWrapper", "otherProps", "_objectWithoutPropertiesLoose", "_excluded", "Container", "getArcFromMouseEvent", "canvasEl", "_getRelativeCursor", "getRelativeCursor", "centerX", "left", "centerY", "top", "findArcUnderCursor", "InnerChordCanvas", "_ref2$pixelRatio", "_ref2$label", "_ref2$innerRadiusRati", "_ref2$innerRadiusOffs", "_ref2$padAngle", "_ref2$layers", "_ref2$colors", "_ref2$arcBorderWidth", "_ref2$arcBorderColor", "_ref2$arcOpacity", "_ref2$activeArcOpacit", "_ref2$inactiveArcOpac", "_ref2$arcTooltip", "_ref2$ribbonBorderWid", "_ref2$ribbonBorderCol", "_ref2$ribbonOpacity", "_ref2$activeRibbonOpa", "_ref2$inactiveRibbonO", "_ref2$enableLabel", "_ref2$labelOffset", "_ref2$labelRotation", "_ref2$labelTextColor", "_ref2$legends", "useRef", "getLabelTextColor", "getArcBorderColor", "getRibbonBorderColor", "layerContext", "useEffect", "current", "ctx", "getContext", "scale", "fillStyle", "background", "fillRect", "save", "translate", "context", "globalAlpha", "beginPath", "strokeStyle", "lineWidth", "restore", "font", "fontSize", "fontFamily", "props", "degreesToRadians", "textAlign", "textBaseline", "fillText", "renderLegendToCanvas", "handleMouseHover", "useCallback", "ref", "cursor", "undefined", "ChordCanvas", "_ref3$isInteractive", "_ref3$animate", "_ref3$motionConfig", "ResponsiveChord", "ResponsiveWrapper", "ResponsiveChordCanvas"]
}
