{
  "version": 3,
  "sources": ["../../lodash/cloneDeep.js", "../../lodash/_arrayReduce.js", "../../lodash/_basePropertyOf.js", "../../lodash/_deburrLetter.js", "../../lodash/deburr.js", "../../lodash/_asciiWords.js", "../../lodash/_hasUnicodeWord.js", "../../lodash/_unicodeWords.js", "../../lodash/words.js", "../../lodash/_createCompounder.js", "../../lodash/startCase.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/hierarchy/count.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/hierarchy/each.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/hierarchy/eachBefore.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/hierarchy/eachAfter.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/hierarchy/sum.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/hierarchy/sort.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/hierarchy/path.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/hierarchy/ancestors.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/hierarchy/descendants.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/hierarchy/leaves.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/hierarchy/links.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/hierarchy/index.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/array.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/accessors.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/constant.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/treemap/round.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/treemap/dice.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/tree.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/treemap/slice.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/treemap/squarify.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/treemap/index.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/treemap/binary.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/treemap/sliceDice.js", "../../@nivo/treemap/node_modules/d3-hierarchy/src/treemap/resquarify.js", "../../@nivo/treemap/src/transitions.ts", "../../@nivo/treemap/src/TreeMapNode.tsx", "../../@nivo/treemap/src/TreeMapNodeTooltip.tsx", "../../@nivo/treemap/src/TreeMapHtmlNode.tsx", "../../@nivo/treemap/src/defaults.ts", "../../@nivo/treemap/src/tiling.ts", "../../@nivo/treemap/src/hooks.ts", "../../@nivo/treemap/src/TreeMapNodes.tsx", "../../@nivo/treemap/src/TreeMap.tsx", "../../@nivo/treemap/src/ResponsiveTreeMap.tsx", "../../@nivo/treemap/src/TreeMapHtml.tsx", "../../@nivo/treemap/src/ResponsiveTreeMapHtml.tsx", "../../@nivo/treemap/src/TreeMapCanvas.tsx", "../../@nivo/treemap/src/ResponsiveTreeMapCanvas.tsx"],
  "sourcesContent": ["var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = cloneDeep;\n", "/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;\n", "/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = basePropertyOf;\n", "var basePropertyOf = require('./_basePropertyOf');\n\n/** Used to map Latin Unicode letters to basic Latin letters. */\nvar deburredLetters = {\n  // Latin-1 Supplement block.\n  '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n  '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n  '\\xc7': 'C',  '\\xe7': 'c',\n  '\\xd0': 'D',  '\\xf0': 'd',\n  '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n  '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n  '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n  '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n  '\\xd1': 'N',  '\\xf1': 'n',\n  '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n  '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n  '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n  '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n  '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n  '\\xc6': 'Ae', '\\xe6': 'ae',\n  '\\xde': 'Th', '\\xfe': 'th',\n  '\\xdf': 'ss',\n  // Latin Extended-A block.\n  '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n  '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n  '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n  '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n  '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n  '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n  '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n  '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n  '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n  '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n  '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n  '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n  '\\u0134': 'J',  '\\u0135': 'j',\n  '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n  '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n  '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n  '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n  '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n  '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n  '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n  '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n  '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n  '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n  '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n  '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n  '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n  '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n  '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n  '\\u0174': 'W',  '\\u0175': 'w',\n  '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n  '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n  '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n  '\\u0132': 'IJ', '\\u0133': 'ij',\n  '\\u0152': 'Oe', '\\u0153': 'oe',\n  '\\u0149': \"'n\", '\\u017f': 's'\n};\n\n/**\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n */\nvar deburrLetter = basePropertyOf(deburredLetters);\n\nmodule.exports = deburrLetter;\n", "var deburrLetter = require('./_deburrLetter'),\n    toString = require('./toString');\n\n/** Used to match Latin Unicode letters (excluding mathematical operators). */\nvar reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n/** Used to compose unicode character classes. */\nvar rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\n\n/** Used to compose unicode capture groups. */\nvar rsCombo = '[' + rsComboRange + ']';\n\n/**\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n */\nvar reComboMark = RegExp(rsCombo, 'g');\n\n/**\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * _.deburr('déjà vu');\n * // => 'deja vu'\n */\nfunction deburr(string) {\n  string = toString(string);\n  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n}\n\nmodule.exports = deburr;\n", "/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\nmodule.exports = asciiWords;\n", "/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\nmodule.exports = hasUnicodeWord;\n", "/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n    rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n  rsUpper + '+' + rsOptContrUpper,\n  rsOrdUpper,\n  rsOrdLower,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\nmodule.exports = unicodeWords;\n", "var asciiWords = require('./_asciiWords'),\n    hasUnicodeWord = require('./_hasUnicodeWord'),\n    toString = require('./toString'),\n    unicodeWords = require('./_unicodeWords');\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nmodule.exports = words;\n", "var arrayReduce = require('./_arrayReduce'),\n    deburr = require('./deburr'),\n    words = require('./words');\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\";\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\nmodule.exports = createCompounder;\n", "var createCompounder = require('./_createCompounder'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts `string` to\n * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n *\n * @static\n * @memberOf _\n * @since 3.1.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the start cased string.\n * @example\n *\n * _.startCase('--foo-bar--');\n * // => 'Foo Bar'\n *\n * _.startCase('fooBar');\n * // => 'Foo Bar'\n *\n * _.startCase('__FOO_BAR__');\n * // => 'FOO BAR'\n */\nvar startCase = createCompounder(function(result, word, index) {\n  return result + (index ? ' ' : '') + upperFirst(word);\n});\n\nmodule.exports = startCase;\n", "function count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;\n  else while (--i >= 0) sum += children[i].value;\n  node.value = sum;\n}\n\nexport default function() {\n  return this.eachAfter(count);\n}\n", "export default function(callback) {\n  var node = this, current, next = [node], children, i, n;\n  do {\n    current = next.reverse(), next = [];\n    while (node = current.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        next.push(children[i]);\n      }\n    }\n  } while (next.length);\n  return this;\n}\n", "export default function(callback) {\n  var node = this, nodes = [node], children, i;\n  while (node = nodes.pop()) {\n    callback(node), children = node.children;\n    if (children) for (i = children.length - 1; i >= 0; --i) {\n      nodes.push(children[i]);\n    }\n  }\n  return this;\n}\n", "export default function(callback) {\n  var node = this, nodes = [node], next = [], children, i, n;\n  while (node = nodes.pop()) {\n    next.push(node), children = node.children;\n    if (children) for (i = 0, n = children.length; i < n; ++i) {\n      nodes.push(children[i]);\n    }\n  }\n  while (node = next.pop()) {\n    callback(node);\n  }\n  return this;\n}\n", "export default function(value) {\n  return this.eachAfter(function(node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n    while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  });\n}\n", "export default function(compare) {\n  return this.eachBefore(function(node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}\n", "export default function(end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n  var k = nodes.length;\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n  return c;\n}\n", "export default function() {\n  var node = this, nodes = [node];\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n  return nodes;\n}\n", "export default function() {\n  var nodes = [];\n  this.each(function(node) {\n    nodes.push(node);\n  });\n  return nodes;\n}\n", "export default function() {\n  var leaves = [];\n  this.eachBefore(function(node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}\n", "export default function() {\n  var root = this, links = [];\n  root.each(function(node) {\n    if (node !== root) { // Don’t include the root’s parent, if any.\n      links.push({source: node.parent, target: node});\n    }\n  });\n  return links;\n}\n", "import node_count from \"./count.js\";\nimport node_each from \"./each.js\";\nimport node_eachBefore from \"./eachBefore.js\";\nimport node_eachAfter from \"./eachAfter.js\";\nimport node_sum from \"./sum.js\";\nimport node_sort from \"./sort.js\";\nimport node_path from \"./path.js\";\nimport node_ancestors from \"./ancestors.js\";\nimport node_descendants from \"./descendants.js\";\nimport node_leaves from \"./leaves.js\";\nimport node_links from \"./links.js\";\n\nexport default function hierarchy(data, children) {\n  var root = new Node(data),\n      valued = +data.value && (root.value = data.value),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  if (children == null) children = defaultChildren;\n\n  while (node = nodes.pop()) {\n    if (valued) node.value = +node.data.value;\n    if ((childs = children(node.data)) && (n = childs.length)) {\n      node.children = new Array(n);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction defaultChildren(d) {\n  return d.children;\n}\n\nfunction copyData(node) {\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nexport function Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy\n};\n", "export var slice = Array.prototype.slice;\n\nexport function shuffle(array) {\n  var m = array.length,\n      t,\n      i;\n\n  while (m) {\n    i = Math.random() * m-- | 0;\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n}\n", "export function optional(f) {\n  return f == null ? null : required(f);\n}\n\nexport function required(f) {\n  if (typeof f !== \"function\") throw new Error;\n  return f;\n}\n", "export function constantZero() {\n  return 0;\n}\n\nexport default function(x) {\n  return function() {\n    return x;\n  };\n}\n", "export default function(node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n}\n", "export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\n    node.x0 = x0, node.x1 = x0 += node.value * k;\n  }\n}\n", "import {Node} from \"./hierarchy/index.js\";\n\nfunction defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\n// function radialSeparation(a, b) {\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\n// }\n\n// This function is used to traverse the left contour of a subtree (or\n// subforest). It returns the successor of v on this contour. This successor is\n// either given by the leftmost child of v or by the thread of v. The function\n// returns null if and only if v is on the highest level of its subtree.\nfunction nextLeft(v) {\n  var children = v.children;\n  return children ? children[0] : v.t;\n}\n\n// This function works analogously to nextLeft.\nfunction nextRight(v) {\n  var children = v.children;\n  return children ? children[children.length - 1] : v.t;\n}\n\n// Shifts the current subtree rooted at w+. This is done by increasing\n// prelim(w+) and mod(w+) by shift.\nfunction moveSubtree(wm, wp, shift) {\n  var change = shift / (wp.i - wm.i);\n  wp.c -= change;\n  wp.s += shift;\n  wm.c += change;\n  wp.z += shift;\n  wp.m += shift;\n}\n\n// All other shifts, applied to the smaller subtrees between w- and w+, are\n// performed by this function. To prepare the shifts, we have to adjust\n// change(w+), shift(w+), and change(w-).\nfunction executeShifts(v) {\n  var shift = 0,\n      change = 0,\n      children = v.children,\n      i = children.length,\n      w;\n  while (--i >= 0) {\n    w = children[i];\n    w.z += shift;\n    w.m += shift;\n    shift += w.s + (change += w.c);\n  }\n}\n\n// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n// returns the specified (default) ancestor.\nfunction nextAncestor(vim, v, ancestor) {\n  return vim.a.parent === v.parent ? vim.a : ancestor;\n}\n\nfunction TreeNode(node, i) {\n  this._ = node;\n  this.parent = null;\n  this.children = null;\n  this.A = null; // default ancestor\n  this.a = this; // ancestor\n  this.z = 0; // prelim\n  this.m = 0; // mod\n  this.c = 0; // change\n  this.s = 0; // shift\n  this.t = null; // thread\n  this.i = i; // number\n}\n\nTreeNode.prototype = Object.create(Node.prototype);\n\nfunction treeRoot(root) {\n  var tree = new TreeNode(root, 0),\n      node,\n      nodes = [tree],\n      child,\n      children,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if (children = node._.children) {\n      node.children = new Array(n = children.length);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n        child.parent = node;\n      }\n    }\n  }\n\n  (tree.parent = new TreeNode(null, 0)).children = [tree];\n  return tree;\n}\n\n// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\nexport default function() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = null;\n\n  function tree(root) {\n    var t = treeRoot(root);\n\n    // Compute the layout using Buchheim et al.’s algorithm.\n    t.eachAfter(firstWalk), t.parent.m = -t.z;\n    t.eachBefore(secondWalk);\n\n    // If a fixed node size is specified, scale x and y.\n    if (nodeSize) root.eachBefore(sizeNode);\n\n    // If a fixed tree size is specified, scale x and y based on the extent.\n    // Compute the left-most, right-most, and depth-most nodes for extents.\n    else {\n      var left = root,\n          right = root,\n          bottom = root;\n      root.eachBefore(function(node) {\n        if (node.x < left.x) left = node;\n        if (node.x > right.x) right = node;\n        if (node.depth > bottom.depth) bottom = node;\n      });\n      var s = left === right ? 1 : separation(left, right) / 2,\n          tx = s - left.x,\n          kx = dx / (right.x + s + tx),\n          ky = dy / (bottom.depth || 1);\n      root.eachBefore(function(node) {\n        node.x = (node.x + tx) * kx;\n        node.y = node.depth * ky;\n      });\n    }\n\n    return root;\n  }\n\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n  // applied recursively to the children of v, as well as the function\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n  // node v is placed to the midpoint of its outermost children.\n  function firstWalk(v) {\n    var children = v.children,\n        siblings = v.parent.children,\n        w = v.i ? siblings[v.i - 1] : null;\n    if (children) {\n      executeShifts(v);\n      var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n      if (w) {\n        v.z = w.z + separation(v._, w._);\n        v.m = v.z - midpoint;\n      } else {\n        v.z = midpoint;\n      }\n    } else if (w) {\n      v.z = w.z + separation(v._, w._);\n    }\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n  }\n\n  // Computes all real x-coordinates by summing up the modifiers recursively.\n  function secondWalk(v) {\n    v._.x = v.z + v.parent.m;\n    v.m += v.parent.m;\n  }\n\n  // The core of the algorithm. Here, a new subtree is combined with the\n  // previous subtrees. Threads are used to traverse the inside and outside\n  // contours of the left and right subtree up to the highest common level. The\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n  // superscript o means outside and i means inside, the subscript - means left\n  // subtree and + means right subtree. For summing up the modifiers along the\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n  // nodes of the inside contours conflict, we compute the left one of the\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n  // Finally, we add a new thread (if necessary).\n  function apportion(v, w, ancestor) {\n    if (w) {\n      var vip = v,\n          vop = v,\n          vim = w,\n          vom = vip.parent.children[0],\n          sip = vip.m,\n          sop = vop.m,\n          sim = vim.m,\n          som = vom.m,\n          shift;\n      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n        vom = nextLeft(vom);\n        vop = nextRight(vop);\n        vop.a = v;\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n        if (shift > 0) {\n          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n          sip += shift;\n          sop += shift;\n        }\n        sim += vim.m;\n        sip += vip.m;\n        som += vom.m;\n        sop += vop.m;\n      }\n      if (vim && !nextRight(vop)) {\n        vop.t = vim;\n        vop.m += sim - sop;\n      }\n      if (vip && !nextLeft(vom)) {\n        vom.t = vip;\n        vom.m += sip - som;\n        ancestor = v;\n      }\n    }\n    return ancestor;\n  }\n\n  function sizeNode(node) {\n    node.x *= dx;\n    node.y = node.depth * dy;\n  }\n\n  tree.separation = function(x) {\n    return arguments.length ? (separation = x, tree) : separation;\n  };\n\n  tree.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n  };\n\n  tree.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return tree;\n}\n", "export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (y1 - y0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\n    node.y0 = y0, node.y1 = y0 += node.value * k;\n  }\n}\n", "import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\n\nexport var phi = (1 + Math.sqrt(5)) / 2;\n\nexport function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [],\n      nodes = parent.children,\n      row,\n      nodeValue,\n      i0 = 0,\n      i1 = 0,\n      n = nodes.length,\n      dx, dy,\n      value = parent.value,\n      sumValue,\n      minValue,\n      maxValue,\n      newRatio,\n      minRatio,\n      alpha,\n      beta;\n\n  while (i0 < n) {\n    dx = x1 - x0, dy = y1 - y0;\n\n    // Find the next non-empty node.\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n\n    // Keep adding nodes while the aspect ratio maintains or improves.\n    for (; i1 < n; ++i1) {\n      sumValue += nodeValue = nodes[i1].value;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n      minRatio = newRatio;\n    }\n\n    // Position and record the row orientation.\n    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    value -= sumValue, i0 = i1;\n  }\n\n  return rows;\n}\n\nexport default (function custom(ratio) {\n\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n\n  squarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return squarify;\n})(phi);\n", "import roundNode from \"./round.js\";\nimport squarify from \"./squarify.js\";\nimport {required} from \"../accessors.js\";\nimport constant, {constantZero} from \"../constant.js\";\n\nexport default function() {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 =\n    root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function(x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function(x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function(x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function(x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function(x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function(x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function(x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function(x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function(x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}\n", "export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      i, n = nodes.length,\n      sum, sums = new Array(n + 1);\n\n  for (sums[0] = sum = i = 0; i < n; ++i) {\n    sums[i + 1] = sum += nodes[i].value;\n  }\n\n  partition(0, n, parent.value, x0, y0, x1, y1);\n\n  function partition(i, j, value, x0, y0, x1, y1) {\n    if (i >= j - 1) {\n      var node = nodes[i];\n      node.x0 = x0, node.y0 = y0;\n      node.x1 = x1, node.y1 = y1;\n      return;\n    }\n\n    var valueOffset = sums[i],\n        valueTarget = (value / 2) + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n\n    while (k < hi) {\n      var mid = k + hi >>> 1;\n      if (sums[mid] < valueTarget) k = mid + 1;\n      else hi = mid;\n    }\n\n    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\n\n    var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n\n    if ((x1 - x0) > (y1 - y0)) {\n      var xk = (x0 * valueRight + x1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, xk, y1);\n      partition(k, j, valueRight, xk, y0, x1, y1);\n    } else {\n      var yk = (y0 * valueRight + y1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, x1, yk);\n      partition(k, j, valueRight, x0, yk, x1, y1);\n    }\n  }\n}\n", "import dice from \"./dice.js\";\nimport slice from \"./slice.js\";\n\nexport default function(parent, x0, y0, x1, y1) {\n  (parent.depth & 1 ? slice : dice)(parent, x0, y0, x1, y1);\n}\n", "import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\nimport {phi, squarifyRatio} from \"./squarify.js\";\n\nexport default (function custom(ratio) {\n\n  function resquarify(parent, x0, y0, x1, y1) {\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n      var rows,\n          row,\n          nodes,\n          i,\n          j = -1,\n          n,\n          m = rows.length,\n          value = parent.value;\n\n      while (++j < m) {\n        row = rows[j], nodes = row.children;\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\n        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n        value -= row.value;\n      }\n    } else {\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n      rows.ratio = ratio;\n    }\n  }\n\n  resquarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return resquarify;\n})(phi);\n", "import { to, SpringValue } from '@react-spring/web'\n\nexport const svgNodeTransform = (x: SpringValue<number>, y: SpringValue<number>) =>\n    to([x, y], (x, y) => `translate(${x},${y})`)\n\nexport const htmlNodeTransform = (x: SpringValue<number>, y: SpringValue<number>) =>\n    to([x, y], (x, y) => `translate(${x}px, ${y}px)`)\n\nexport const svgLabelTransform = (\n    x: SpringValue<number>,\n    y: SpringValue<number>,\n    rotation: SpringValue<number>\n) => to([x, y, rotation], (x, y, rotation) => `translate(${x},${y}) rotate(${rotation})`)\n\nexport const htmlLabelTransform = (\n    x: SpringValue<number>,\n    y: SpringValue<number>,\n    rotation: SpringValue<number>\n) => to([x, y, rotation], (x, y, rotation) => `translate(${x}px,${y}px) rotate(${rotation}deg)`)\n\nexport const htmlParentLabelTransform = (\n    x: SpringValue<number>,\n    y: SpringValue<number>,\n    rotation: SpringValue<number>\n) =>\n    to(\n        [x, y, rotation],\n        (x, y, rotation) =>\n            `translate(${x - (rotation === 0 ? 0 : 5)}px,${\n                y - (rotation === 0 ? 5 : 0)\n            }px) rotate(${rotation}deg)`\n    )\n", "import { memo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { NodeProps } from './types'\nimport { svgNodeTransform, svgLabelTransform } from './transitions'\n\nconst NonMemoizedTreeMapNode = <Datum extends object>({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}: NodeProps<Datum>) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.g transform={svgNodeTransform(animatedProps.x, animatedProps.y)}>\n            <animated.rect\n                data-testid={`node.${node.id}`}\n                width={to(animatedProps.width, v => Math.max(v, 0))}\n                height={to(animatedProps.height, v => Math.max(v, 0))}\n                fill={node.fill ? node.fill : animatedProps.color}\n                strokeWidth={borderWidth}\n                stroke={node.borderColor}\n                fillOpacity={node.opacity}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <animated.text\n                    data-testid={`label.${node.id}`}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.labelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.labelOpacity}\n                    transform={svgLabelTransform(\n                        animatedProps.labelX,\n                        animatedProps.labelY,\n                        animatedProps.labelRotation\n                    )}\n                >\n                    {node.label}\n                </animated.text>\n            )}\n            {showParentLabel && (\n                <animated.text\n                    data-testid={`parentLabel.${node.id}`}\n                    dominantBaseline=\"central\"\n                    style={{\n                        ...theme.labels.text,\n                        fill: node.parentLabelTextColor,\n                        pointerEvents: 'none',\n                    }}\n                    fillOpacity={animatedProps.parentLabelOpacity}\n                    transform={svgLabelTransform(\n                        animatedProps.parentLabelX,\n                        animatedProps.parentLabelY,\n                        animatedProps.parentLabelRotation\n                    )}\n                >\n                    {node.parentLabel}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nexport const TreeMapNode = memo(NonMemoizedTreeMapNode) as typeof NonMemoizedTreeMapNode\n", "import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { TooltipProps } from './types'\n\nconst NonMemoizedTreeMapNodeTooltip = <Datum extends object>({ node }: TooltipProps<Datum>) => (\n    <BasicTooltip id={node.id} value={node.formattedValue} enableChip={true} color={node.color} />\n)\n\nexport const TreeMapNodeTooltip = memo(\n    NonMemoizedTreeMapNodeTooltip\n) as typeof NonMemoizedTreeMapNodeTooltip\n", "import { memo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { NodeProps } from './types'\nimport { htmlNodeTransform, htmlLabelTransform, htmlParentLabelTransform } from './transitions'\n\nconst NonMemoizedTreeMapHtmlNode = <Datum extends object>({\n    node,\n    animatedProps,\n    borderWidth,\n    enableLabel,\n    enableParentLabel,\n    labelSkipSize,\n}: NodeProps<Datum>) => {\n    const theme = useTheme()\n\n    const showLabel =\n        enableLabel &&\n        node.isLeaf &&\n        (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n    const showParentLabel = enableParentLabel && node.isParent\n\n    return (\n        <animated.div\n            data-testid={`node.${node.id}`}\n            id={node.path.replace(/[^\\w]/gi, '-')}\n            style={{\n                boxSizing: 'border-box',\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                transform: htmlNodeTransform(animatedProps.x, animatedProps.y),\n                width: animatedProps.width,\n                height: animatedProps.height,\n                borderWidth,\n                borderStyle: 'solid',\n                borderColor: node.borderColor,\n                overflow: 'hidden',\n            }}\n        >\n            <animated.div\n                style={{\n                    boxSizing: 'border-box',\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    opacity: node.opacity,\n                    width: animatedProps.width,\n                    height: animatedProps.height,\n                    background: animatedProps.color,\n                }}\n                onMouseEnter={node.onMouseEnter}\n                onMouseMove={node.onMouseMove}\n                onMouseLeave={node.onMouseLeave}\n                onClick={node.onClick}\n            />\n            {showLabel && (\n                <animated.span\n                    data-testid={`label.${node.id}`}\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        top: -5,\n                        left: -5,\n                        width: 10,\n                        height: 10,\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        color: node.labelTextColor,\n                        transformOrigin: 'center center',\n                        transform: htmlLabelTransform(\n                            animatedProps.labelX,\n                            animatedProps.labelY,\n                            animatedProps.labelRotation\n                        ),\n                        opacity: animatedProps.labelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.label}\n                </animated.span>\n            )}\n            {showParentLabel && (\n                <animated.span\n                    data-testid={`parentLabel.${node.id}`}\n                    style={{\n                        ...theme.labels.text,\n                        position: 'absolute',\n                        display: 'flex',\n                        justifyContent: 'flex-start',\n                        alignItems: 'center',\n                        whiteSpace: 'nowrap',\n                        width: 10,\n                        height: 10,\n                        color: node.parentLabelTextColor,\n                        transformOrigin: 'top left',\n                        transform: htmlParentLabelTransform(\n                            animatedProps.parentLabelX,\n                            animatedProps.parentLabelY,\n                            animatedProps.parentLabelRotation\n                        ),\n                        opacity: animatedProps.parentLabelOpacity,\n                        pointerEvents: 'none',\n                    }}\n                >\n                    {node.parentLabel}\n                </animated.span>\n            )}\n        </animated.div>\n    )\n}\n\nexport const TreeMapHtmlNode = memo(NonMemoizedTreeMapHtmlNode) as typeof NonMemoizedTreeMapHtmlNode\n", "import { TreeMapCommonProps, DefaultTreeMapDatum, LayerId } from './types'\nimport { TreeMapNode } from './TreeMapNode'\nimport { TreeMapNodeTooltip } from './TreeMapNodeTooltip'\nimport { TreeMapHtmlNode } from './TreeMapHtmlNode'\n\nexport const commonDefaultProps: Omit<\n    TreeMapCommonProps<DefaultTreeMapDatum>,\n    | 'valueFormat'\n    | 'margin'\n    | 'theme'\n    | 'labelFormat'\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'renderWrapper'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['nodes'],\n\n    identity: 'id',\n    value: 'value',\n\n    tile: 'squarify',\n    leavesOnly: false,\n    innerPadding: 0,\n    outerPadding: 0,\n\n    colors: { scheme: 'nivo' as const },\n    colorBy: 'pathComponents.1',\n    nodeOpacity: 0.33,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipSize: 0,\n    labelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    orientLabel: true,\n\n    enableParentLabel: true,\n    parentLabel: 'id',\n    parentLabelSize: 20,\n    parentLabelPosition: 'top',\n    parentLabelPadding: 6,\n    parentLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    borderWidth: 1,\n    borderColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    isInteractive: true,\n    tooltip: TreeMapNodeTooltip,\n\n    role: 'img',\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapNode,\n    defs: [],\n    fill: [],\n}\n\nexport const htmlDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: TreeMapHtmlNode,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n", "import {\n    treemapBinary,\n    treemapDice,\n    treemapSlice,\n    treemapSliceDice,\n    treemapSquarify,\n} from 'd3-hierarchy'\n\nexport const tileByType = {\n    binary: treemapBinary,\n    dice: treemapDice,\n    slice: treemapSlice,\n    sliceDice: treemapSliceDice,\n    squarify: treemapSquarify,\n} as const\n\nexport type TileType = keyof typeof tileByType\n", "import { createElement, useCallback, useMemo, MouseEvent } from 'react'\nimport omit from 'lodash/omit'\nimport cloneDeep from 'lodash/cloneDeep'\nimport startCase from 'lodash/startCase'\nimport {\n    treemap as d3Treemap,\n    hierarchy,\n    HierarchyNode,\n    HierarchyRectangularNode,\n} from 'd3-hierarchy'\nimport { useTheme, useValueFormatter, PropertyAccessor, usePropertyAccessor } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { commonDefaultProps } from './defaults'\nimport {\n    DefaultTreeMapDatum,\n    TreeMapCommonProps,\n    TreeMapDataProps,\n    ComputedNode,\n    ComputedNodeWithoutStyles,\n    ComputedNodeWithHandlers,\n    CustomLayerProps,\n} from './types'\nimport { tileByType } from './tiling'\n\nexport const useTreeMapLayout = <Datum extends object>({\n    width,\n    height,\n    tile,\n    innerPadding,\n    outerPadding,\n    enableParentLabel,\n    parentLabelSize,\n    parentLabelPosition,\n    leavesOnly,\n}: {\n    width: number\n    height: number\n    tile: TreeMapCommonProps<Datum>['tile']\n    innerPadding: TreeMapCommonProps<Datum>['innerPadding']\n    outerPadding: TreeMapCommonProps<Datum>['outerPadding']\n    enableParentLabel: TreeMapCommonProps<Datum>['enableParentLabel']\n    parentLabelSize: TreeMapCommonProps<Datum>['parentLabelSize']\n    parentLabelPosition: TreeMapCommonProps<Datum>['parentLabelPosition']\n    leavesOnly: TreeMapCommonProps<Datum>['leavesOnly']\n}) =>\n    useMemo(() => {\n        const treemap = d3Treemap<Datum>()\n            .size([width, height])\n            .tile(tileByType[tile])\n            .round(true)\n            .paddingInner(innerPadding)\n            .paddingOuter(outerPadding)\n\n        if (enableParentLabel && !leavesOnly) {\n            const parentLabelPadding = parentLabelSize + outerPadding * 2\n            // @ts-ignore\n            treemap[`padding${startCase(parentLabelPosition)}`](parentLabelPadding)\n        }\n\n        return treemap\n    }, [\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    ])\n\nexport const useHierarchy = <Datum extends object>({\n    root,\n    getValue,\n}: {\n    root: Datum\n    getValue: (datum: Datum) => number\n}) => useMemo(() => hierarchy<Datum>(root).sum(getValue), [root, getValue])\n\nconst computeNodeIdAndPath = <Datum extends object>(\n    node: HierarchyNode<Datum>,\n    getIdentity: (node: Datum) => string\n) => {\n    const path = node\n        .ancestors()\n        .map(ancestor => getIdentity(ancestor.data))\n        .reverse()\n\n    return { path: path.join('.'), pathComponents: path }\n}\n\nexport const useTreeMap = <Datum extends object = DefaultTreeMapDatum>({\n    data,\n    width,\n    height,\n    identity = commonDefaultProps.identity as PropertyAccessor<Datum, string>,\n    value = commonDefaultProps.value as PropertyAccessor<Datum, number>,\n    valueFormat,\n    leavesOnly = commonDefaultProps.leavesOnly,\n    tile = commonDefaultProps.tile,\n    innerPadding = commonDefaultProps.innerPadding,\n    outerPadding = commonDefaultProps.outerPadding,\n    label = commonDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    orientLabel = commonDefaultProps.orientLabel,\n    enableParentLabel = commonDefaultProps.enableParentLabel,\n    parentLabel = commonDefaultProps.parentLabel as TreeMapCommonProps<Datum>['parentLabel'],\n    parentLabelSize = commonDefaultProps.parentLabelSize,\n    parentLabelPosition = commonDefaultProps.parentLabelPosition,\n    parentLabelPadding = commonDefaultProps.parentLabelPadding,\n    colors = commonDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = commonDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = commonDefaultProps.nodeOpacity,\n    borderColor = commonDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    labelTextColor = commonDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    parentLabelTextColor = commonDefaultProps.parentLabelTextColor as TreeMapCommonProps<Datum>['parentLabelTextColor'],\n}: {\n    data: TreeMapDataProps<Datum>['data']\n    width: number\n    height: number\n    identity?: TreeMapCommonProps<Datum>['identity']\n    value?: TreeMapCommonProps<Datum>['value']\n    valueFormat?: TreeMapCommonProps<Datum>['valueFormat']\n    tile?: TreeMapCommonProps<Datum>['tile']\n    leavesOnly?: TreeMapCommonProps<Datum>['leavesOnly']\n    innerPadding?: TreeMapCommonProps<Datum>['innerPadding']\n    outerPadding?: TreeMapCommonProps<Datum>['outerPadding']\n    label?: TreeMapCommonProps<Datum>['label']\n    orientLabel?: TreeMapCommonProps<Datum>['orientLabel']\n    enableParentLabel?: TreeMapCommonProps<Datum>['enableParentLabel']\n    parentLabel?: TreeMapCommonProps<Datum>['parentLabel']\n    parentLabelSize?: TreeMapCommonProps<Datum>['parentLabelSize']\n    parentLabelPosition?: TreeMapCommonProps<Datum>['parentLabelPosition']\n    parentLabelPadding?: TreeMapCommonProps<Datum>['parentLabelPadding']\n    colors?: TreeMapCommonProps<Datum>['colors']\n    colorBy?: TreeMapCommonProps<Datum>['colorBy']\n    nodeOpacity?: TreeMapCommonProps<Datum>['nodeOpacity']\n    borderColor?: TreeMapCommonProps<Datum>['borderColor']\n    labelTextColor?: TreeMapCommonProps<Datum>['labelTextColor']\n    parentLabelTextColor?: TreeMapCommonProps<Datum>['parentLabelTextColor']\n}) => {\n    const getIdentity = usePropertyAccessor(identity)\n    const getValue = usePropertyAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n    const getLabel = usePropertyAccessor(label)\n    const getParentLabel = usePropertyAccessor(parentLabel)\n\n    const layout = useTreeMapLayout<Datum>({\n        width,\n        height,\n        tile,\n        innerPadding,\n        outerPadding,\n        enableParentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        leavesOnly,\n    })\n\n    const hierarchy = useHierarchy<Datum>({ root: data, getValue })\n\n    const rawNodes = useMemo(() => {\n        // d3 treemap mutates the data, so we need to copy it\n        // to have proper behavior for subsequents useMemo()\n        const root = cloneDeep(hierarchy)\n        layout(root)\n\n        return (\n            leavesOnly ? root.leaves() : root.descendants()\n        ) as HierarchyRectangularNode<Datum>[]\n    }, [hierarchy, layout, leavesOnly])\n\n    const nodes = useMemo(\n        () =>\n            rawNodes.map(rawNode => {\n                const { path, pathComponents } = computeNodeIdAndPath(rawNode, getIdentity)\n\n                const node = {\n                    id: getIdentity(rawNode.data),\n                    path,\n                    pathComponents,\n                    data: omit(rawNode.data, 'children'),\n                    x: rawNode.x0,\n                    y: rawNode.y0,\n                    width: rawNode.x1 - rawNode.x0,\n                    height: rawNode.y1 - rawNode.y0,\n                    value: rawNode.value!,\n                    formattedValue: formatValue(rawNode.value!),\n                    treeDepth: rawNode.depth,\n                    treeHeight: rawNode.height,\n                    isParent: rawNode.height > 0,\n                    isLeaf: rawNode.height === 0,\n                    parentLabelX: 0,\n                    parentLabelY: 0,\n                    parentLabelRotation: 0,\n                } as ComputedNodeWithoutStyles<Datum>\n\n                node.labelRotation = orientLabel && node.height > node.width ? -90 : 0\n\n                if (parentLabelPosition === 'top') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = outerPadding + parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'right') {\n                    node.parentLabelX = node.width - outerPadding - parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n                if (parentLabelPosition === 'bottom') {\n                    node.parentLabelX = outerPadding + parentLabelPadding\n                    node.parentLabelY = node.height - outerPadding - parentLabelSize / 2\n                }\n                if (parentLabelPosition === 'left') {\n                    node.parentLabelX = outerPadding + parentLabelSize / 2\n                    node.parentLabelY = node.height - outerPadding - parentLabelPadding\n                    node.parentLabelRotation = -90\n                }\n\n                node.label = getLabel(node)\n                node.parentLabel = getParentLabel(node)\n\n                return node\n            }),\n        [\n            rawNodes,\n            getIdentity,\n            formatValue,\n            getLabel,\n            orientLabel,\n            getParentLabel,\n            parentLabelSize,\n            parentLabelPosition,\n            parentLabelPadding,\n            outerPadding,\n        ]\n    )\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const getParentLabelTextColor = useInheritedColor(parentLabelTextColor, theme)\n\n    const nodesWithStyles = useMemo(\n        () =>\n            nodes.map(node => {\n                const nodeWithStyles = {\n                    ...node,\n                    color: getColor(node),\n                    opacity: nodeOpacity,\n                } as ComputedNode<Datum>\n\n                nodeWithStyles.borderColor = getBorderColor(nodeWithStyles)\n                nodeWithStyles.labelTextColor = getLabelTextColor(nodeWithStyles)\n                nodeWithStyles.parentLabelTextColor = getParentLabelTextColor(nodeWithStyles)\n\n                return nodeWithStyles\n            }),\n        [nodes, getColor, nodeOpacity, getBorderColor, getLabelTextColor, getParentLabelTextColor]\n    )\n\n    return {\n        hierarchy,\n        nodes: nodesWithStyles,\n        layout,\n    }\n}\n\nexport const useInteractiveTreeMapNodes = <Datum extends object>(\n    nodes: ComputedNode<Datum>[],\n    {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: {\n        isInteractive: TreeMapCommonProps<Datum>['isInteractive']\n        onMouseEnter?: TreeMapCommonProps<Datum>['onMouseEnter']\n        onMouseMove?: TreeMapCommonProps<Datum>['onMouseMove']\n        onMouseLeave?: TreeMapCommonProps<Datum>['onMouseLeave']\n        onClick?: TreeMapCommonProps<Datum>['onClick']\n        tooltip: TreeMapCommonProps<Datum>['tooltip']\n    }\n): ComputedNodeWithHandlers<Datum>[] => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseEnter = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            showTooltip(node, event)\n            onMouseEnter?.(node, event)\n        },\n        [onMouseEnter, showTooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            showTooltip(node, event)\n            onMouseMove?.(node, event)\n        },\n        [onMouseMove, showTooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [onMouseLeave, hideTooltip]\n    )\n\n    const handleClick = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            onClick?.(node, event)\n        },\n        [onClick]\n    )\n\n    return useMemo(\n        () =>\n            nodes.map(node => {\n                if (!isInteractive) return node\n\n                return {\n                    ...node,\n                    onMouseEnter: (event: MouseEvent) => handleMouseEnter(node, event),\n                    onMouseMove: (event: MouseEvent) => handleMouseMove(node, event),\n                    onMouseLeave: (event: MouseEvent) => handleMouseLeave(node, event),\n                    onClick: (event: MouseEvent) => handleClick(node, event),\n                }\n            }),\n        [isInteractive, nodes, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useCustomLayerProps = <Datum extends object>({\n    nodes,\n}: CustomLayerProps<Datum>): CustomLayerProps<Datum> =>\n    useMemo(\n        () => ({\n            nodes,\n        }),\n        [nodes]\n    )\n", "import { createElement, memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useInteractiveTreeMapNodes } from './hooks'\nimport {\n    ComputedNode,\n    TreeMapCommonProps,\n    NodeAnimatedProps,\n    NodeComponent,\n    ComputedNodeWithHandlers,\n} from './types'\n\nconst getAnimatedNodeProps = <Datum extends object>(\n    node: ComputedNodeWithHandlers<Datum>\n): NodeAnimatedProps => ({\n    x: node.x,\n    y: node.y,\n    width: node.width,\n    height: node.height,\n    color: node.color,\n    labelX: node.width / 2,\n    labelY: node.height / 2,\n    labelRotation: node.labelRotation,\n    labelOpacity: 1,\n    parentLabelX: node.parentLabelX,\n    parentLabelY: node.parentLabelY,\n    parentLabelRotation: node.parentLabelRotation,\n    parentLabelOpacity: 1,\n})\n\nconst getEndingAnimatedNodeProps = <Datum extends object>(\n    node: ComputedNodeWithHandlers<Datum>\n): NodeAnimatedProps => {\n    const x = node.x + node.width / 2\n    const y = node.y + node.height / 2\n\n    return {\n        x,\n        y,\n        width: 0,\n        height: 0,\n        color: node.color,\n        labelX: 0,\n        labelY: 0,\n        labelRotation: node.labelRotation,\n        labelOpacity: 0,\n        parentLabelX: 0,\n        parentLabelY: 0,\n        parentLabelRotation: node.parentLabelRotation,\n        parentLabelOpacity: 0,\n    }\n}\n\ninterface TreeMapNodesProps<Datum extends object> {\n    nodes: ComputedNode<Datum>[]\n    nodeComponent: NodeComponent<Datum>\n    borderWidth: TreeMapCommonProps<Datum>['borderWidth']\n    enableLabel: TreeMapCommonProps<Datum>['enableLabel']\n    labelSkipSize: TreeMapCommonProps<Datum>['labelSkipSize']\n    enableParentLabel: TreeMapCommonProps<Datum>['enableParentLabel']\n    isInteractive: TreeMapCommonProps<Datum>['isInteractive']\n    onMouseEnter?: TreeMapCommonProps<Datum>['onMouseEnter']\n    onMouseMove?: TreeMapCommonProps<Datum>['onMouseMove']\n    onMouseLeave?: TreeMapCommonProps<Datum>['onMouseLeave']\n    onClick?: TreeMapCommonProps<Datum>['onClick']\n    tooltip: TreeMapCommonProps<Datum>['tooltip']\n}\n\nconst NonMemoizedTreeMapNodes = <Datum extends object>({\n    nodes,\n    nodeComponent,\n    borderWidth,\n    enableLabel,\n    labelSkipSize,\n    enableParentLabel,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: TreeMapNodesProps<Datum>) => {\n    const nodesWithHandlers = useInteractiveTreeMapNodes<Datum>(nodes, {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<ComputedNodeWithHandlers<Datum>, NodeAnimatedProps>(\n        nodesWithHandlers,\n        {\n            keys: node => node.path,\n            initial: getAnimatedNodeProps,\n            from: getEndingAnimatedNodeProps,\n            enter: getAnimatedNodeProps,\n            update: getAnimatedNodeProps,\n            leave: getEndingAnimatedNodeProps,\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <>\n            {transition((animatedProps, node) =>\n                createElement(nodeComponent, {\n                    key: node.path,\n                    node,\n                    animatedProps,\n                    borderWidth,\n                    enableLabel,\n                    labelSkipSize,\n                    enableParentLabel,\n                })\n            )}\n        </>\n    )\n}\n\nexport const TreeMapNodes = memo(NonMemoizedTreeMapNodes) as typeof NonMemoizedTreeMapNodes\n", "import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    SvgWrapper,\n    Container,\n    useDimensions,\n    // @ts-ignore\n    bindDefs,\n} from '@nivo/core'\nimport { useTreeMap, useCustomLayerProps } from './hooks'\nimport { TreeMapNodes } from './TreeMapNodes'\nimport {\n    DefaultTreeMapDatum,\n    NodeComponent,\n    TreeMapCommonProps,\n    TreeMapSvgProps,\n    LayerId,\n} from './types'\nimport { svgDefaultProps } from './defaults'\n\ntype InnerTreeMapProps<Datum extends object> = Omit<\n    TreeMapSvgProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTreeMap = <Datum extends object>({\n    data,\n    identity = svgDefaultProps.identity as TreeMapCommonProps<Datum>['identity'],\n    value = svgDefaultProps.value as TreeMapCommonProps<Datum>['value'],\n    valueFormat,\n    tile = svgDefaultProps.tile,\n    nodeComponent = svgDefaultProps.nodeComponent as NodeComponent<Datum>,\n    innerPadding = svgDefaultProps.innerPadding,\n    outerPadding = svgDefaultProps.outerPadding,\n    leavesOnly = svgDefaultProps.leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers as NonNullable<TreeMapSvgProps<Datum>['layers']>,\n    colors = svgDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = svgDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = svgDefaultProps.nodeOpacity,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    enableLabel = svgDefaultProps.enableLabel,\n    label = svgDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    labelTextColor = svgDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    orientLabel = svgDefaultProps.orientLabel,\n    labelSkipSize = svgDefaultProps.labelSkipSize,\n    enableParentLabel = svgDefaultProps.enableParentLabel,\n    parentLabel = svgDefaultProps.parentLabel as TreeMapCommonProps<Datum>['parentLabel'],\n    parentLabelSize = svgDefaultProps.parentLabelSize,\n    parentLabelPosition = svgDefaultProps.parentLabelPosition,\n    parentLabelPadding = svgDefaultProps.parentLabelPadding,\n    parentLabelTextColor = svgDefaultProps.parentLabelTextColor as TreeMapCommonProps<Datum>['parentLabelTextColor'],\n    isInteractive = svgDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip as TreeMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeMapProps<Datum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap<Datum>({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        nodes: null,\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <TreeMapNodes<Datum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                borderWidth={borderWidth}\n                enableLabel={enableLabel}\n                labelSkipSize={labelSkipSize}\n                enableParentLabel={enableParentLabel}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    const customLayerProps = useCustomLayerProps<Datum>({ nodes })\n\n    const boundDefs = bindDefs(defs, nodes, fill)\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const TreeMap = <Datum extends object = DefaultTreeMapDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeMapSvgProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTreeMap<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultTreeMapDatum, TreeMapSvgProps } from './types'\nimport { TreeMap } from './TreeMap'\n\nexport const ResponsiveTreeMap = <Datum extends object = DefaultTreeMapDatum>(\n    props: Omit<TreeMapSvgProps<Datum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMap<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n", "import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions } from '@nivo/core'\nimport { useCustomLayerProps, useTreeMap } from './hooks'\nimport { TreeMapNodes } from './TreeMapNodes'\nimport { DefaultTreeMapDatum, TreeMapCommonProps, TreeMapHtmlProps, LayerId } from './types'\nimport { htmlDefaultProps, svgDefaultProps } from './defaults'\n\ntype InnerTreeMapHtmlProps<Datum extends object> = Omit<\n    TreeMapHtmlProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTreeMapHtml = <Datum extends object>({\n    data,\n    identity = htmlDefaultProps.identity as TreeMapCommonProps<Datum>['identity'],\n    value = htmlDefaultProps.value as TreeMapCommonProps<Datum>['value'],\n    tile = htmlDefaultProps.tile,\n    nodeComponent = htmlDefaultProps.nodeComponent,\n    valueFormat,\n    innerPadding = htmlDefaultProps.innerPadding,\n    outerPadding = htmlDefaultProps.outerPadding,\n    leavesOnly = htmlDefaultProps.leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers as NonNullable<TreeMapHtmlProps<Datum>['layers']>,\n    colors = htmlDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = htmlDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = htmlDefaultProps.nodeOpacity,\n    borderWidth = htmlDefaultProps.borderWidth,\n    borderColor = htmlDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    enableLabel = htmlDefaultProps.enableLabel,\n    label = htmlDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    labelTextColor = htmlDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    orientLabel = htmlDefaultProps.orientLabel,\n    labelSkipSize = htmlDefaultProps.labelSkipSize,\n    enableParentLabel = htmlDefaultProps.enableParentLabel,\n    parentLabel = htmlDefaultProps.parentLabel as TreeMapCommonProps<Datum>['parentLabel'],\n    parentLabelSize = htmlDefaultProps.parentLabelSize,\n    parentLabelPosition = htmlDefaultProps.parentLabelPosition,\n    parentLabelPadding = htmlDefaultProps.parentLabelPadding,\n    parentLabelTextColor = htmlDefaultProps.parentLabelTextColor as TreeMapCommonProps<Datum>['parentLabelTextColor'],\n    isInteractive = htmlDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = htmlDefaultProps.tooltip as TreeMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeMapHtmlProps<Datum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap<Datum>({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel,\n        parentLabel,\n        parentLabelSize,\n        parentLabelPosition,\n        parentLabelPadding,\n        parentLabelTextColor,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        nodes: null,\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <TreeMapNodes<Datum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                borderWidth={borderWidth}\n                enableLabel={enableLabel}\n                labelSkipSize={labelSkipSize}\n                enableParentLabel={enableParentLabel}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    const customLayerProps = useCustomLayerProps<Datum>({ nodes })\n\n    return (\n        <div\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n            style={{\n                position: 'relative',\n                width: outerWidth,\n                height: outerHeight,\n            }}\n        >\n            <div style={{ position: 'absolute', top: margin.top, left: margin.left }}>\n                {layers.map((layer, i) => {\n                    if (typeof layer === 'function') {\n                        return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                    }\n\n                    return layerById?.[layer] ?? null\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport const TreeMapHtml = <Datum extends object = DefaultTreeMapDatum>({\n    isInteractive = htmlDefaultProps.isInteractive,\n    animate = htmlDefaultProps.animate,\n    motionConfig = htmlDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeMapHtmlProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTreeMapHtml<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultTreeMapDatum, TreeMapHtmlProps } from './types'\nimport { TreeMapHtml } from './TreeMapHtml'\n\nexport const ResponsiveTreeMapHtml = <Datum extends object = DefaultTreeMapDatum>(\n    props: Omit<TreeMapHtmlProps<Datum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapHtml<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n", "import { createElement, useCallback, useEffect, useRef, MouseEvent } from 'react'\nimport {\n    degreesToRadians,\n    getRelativeCursor,\n    isCursorInRect,\n    Container,\n    useDimensions,\n    useTheme,\n    Margin,\n} from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useTreeMap } from './hooks'\nimport { ComputedNode, DefaultTreeMapDatum, TreeMapCanvasProps, TreeMapCommonProps } from './types'\nimport { canvasDefaultProps } from './defaults'\n\nconst findNodeUnderCursor = <Datum extends object>(\n    nodes: ComputedNode<Datum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\ntype InnerTreeMapCanvasProps<Datum extends object> = Omit<\n    TreeMapCanvasProps<Datum>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerTreeMapCanvas = <Datum extends object>({\n    data,\n    identity = canvasDefaultProps.identity as TreeMapCommonProps<Datum>['identity'],\n    value = canvasDefaultProps.identity as TreeMapCommonProps<Datum>['value'],\n    tile = canvasDefaultProps.tile,\n    valueFormat,\n    innerPadding = canvasDefaultProps.innerPadding,\n    outerPadding = canvasDefaultProps.outerPadding,\n    leavesOnly = canvasDefaultProps.leavesOnly,\n    width,\n    height,\n    margin: partialMargin,\n    colors = canvasDefaultProps.colors as TreeMapCommonProps<Datum>['colors'],\n    colorBy = canvasDefaultProps.colorBy as TreeMapCommonProps<Datum>['colorBy'],\n    nodeOpacity = canvasDefaultProps.nodeOpacity,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor = canvasDefaultProps.borderColor as TreeMapCommonProps<Datum>['borderColor'],\n    enableLabel = canvasDefaultProps.enableLabel,\n    label = canvasDefaultProps.label as TreeMapCommonProps<Datum>['label'],\n    labelTextColor = canvasDefaultProps.labelTextColor as TreeMapCommonProps<Datum>['labelTextColor'],\n    orientLabel = canvasDefaultProps.orientLabel,\n    labelSkipSize = canvasDefaultProps.labelSkipSize,\n    isInteractive = canvasDefaultProps.isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip as TreeMapCommonProps<Datum>['tooltip'],\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeMapCanvasProps<Datum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes } = useTreeMap<Datum>({\n        data,\n        identity,\n        value,\n        valueFormat,\n        leavesOnly,\n        width: innerWidth,\n        height: innerHeight,\n        tile,\n        innerPadding,\n        outerPadding,\n        colors,\n        colorBy,\n        nodeOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        orientLabel,\n        enableParentLabel: false,\n    })\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        const ctx = canvasEl.current.getContext('2d')\n        if (ctx === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        nodes.forEach(node => {\n            ctx.fillStyle = node.color\n            ctx.fillRect(node.x, node.y, node.width, node.height)\n\n            if (borderWidth > 0) {\n                ctx.strokeStyle = node.borderColor\n                ctx.lineWidth = borderWidth\n                ctx.strokeRect(node.x, node.y, node.width, node.height)\n            }\n        })\n\n        if (enableLabel) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'middle'\n            ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n            nodes.forEach(node => {\n                const showLabel =\n                    node.isLeaf &&\n                    (labelSkipSize === 0 || Math.min(node.width, node.height) > labelSkipSize)\n\n                if (!showLabel) return\n\n                const rotate = orientLabel && node.height > node.width\n\n                ctx.save()\n                ctx.translate(node.x + node.width / 2, node.y + node.height / 2)\n                ctx.rotate(degreesToRadians(rotate ? -90 : 0))\n\n                ctx.fillStyle = node.labelTextColor\n                ctx.fillText(`${node.label}`, 0, 0)\n\n                ctx.restore()\n            })\n        }\n    }, [\n        canvasEl,\n        nodes,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        borderWidth,\n        enableLabel,\n        orientLabel,\n        labelSkipSize,\n        theme,\n        pixelRatio,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node !== undefined) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n                onMouseMove?.(node, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [canvasEl, nodes, margin, showTooltipFromEvent, hideTooltip, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    const handleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const node = findNodeUnderCursor(nodes, margin, x, y)\n\n            if (node === undefined) return\n\n            onClick?.(node, event)\n        },\n        [canvasEl, nodes, margin, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n        />\n    )\n}\n\nexport const TreeMapCanvas = <Datum extends object = DefaultTreeMapDatum>({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: TreeMapCanvasProps<Datum>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerTreeMapCanvas<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultTreeMapDatum, TreeMapCanvasProps } from './types'\nimport { TreeMapCanvas } from './TreeMapCanvas'\n\nexport const ResponsiveTreeMapCanvas = <Datum extends object = DefaultTreeMapDatum>(\n    props: Omit<TreeMapCanvasProps<Datum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeMapCanvas<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],
  "mappings": "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",
  "names": ["i", "i", "n", "i", "i", "n", "i", "k", "a", "i", "n", "i", "n", "k", "i", "i", "n", "k", "n", "i", "n", "j", "x0", "y0", "x1", "y1", "k", "custom", "i", "j", "n", "m", "svgNodeTransform", "x", "y", "to", "htmlNodeTransform", "svgLabelTransform", "rotation", "htmlLabelTransform", "htmlParentLabelTransform", "TreeMapNode", "memo", "_ref", "node", "animatedProps", "borderWidth", "enableLabel", "enableParentLabel", "labelSkipSize", "theme", "useTheme", "showLabel", "isLeaf", "Math", "min", "width", "height", "showParentLabel", "isParent", "_jsxs", "animated", "g", "transform", "children", "_jsx", "rect", "id", "v", "max", "fill", "color", "strokeWidth", "stroke", "borderColor", "fillOpacity", "opacity", "onMouseEnter", "onMouseMove", "onMouseLeave", "onClick", "text", "textAnchor", "dominantBaseline", "style", "_extends", "labels", "labelTextColor", "pointerEvents", "labelOpacity", "labelX", "labelY", "labelRotation", "label", "parentLabelTextColor", "parentLabelOpacity", "parentLabelX", "parentLabelY", "parentLabelRotation", "parentLabel", "TreeMapNodeTooltip", "BasicTooltip", "value", "formattedValue", "enableChip", "TreeMapHtmlNode", "div", "path", "replace", "boxSizing", "position", "top", "left", "borderStyle", "overflow", "background", "span", "display", "justifyContent", "alignItems", "whiteSpace", "transformOrigin", "commonDefaultProps", "layers", "identity", "tile", "leavesOnly", "innerPadding", "outerPadding", "colors", "scheme", "colorBy", "nodeOpacity", "from", "modifiers", "orientLabel", "parentLabelSize", "parentLabelPosition", "parentLabelPadding", "isInteractive", "tooltip", "role", "animate", "motionConfig", "svgDefaultProps", "nodeComponent", "defs", "htmlDefaultProps", "canvasDefaultProps", "pixelRatio", "window", "devicePixelRatio", "tileByType", "binary", "treemapBinary", "dice", "treemapDice", "slice", "treemapSlice", "sliceDice", "treemapSliceDice", "squarify", "treemapSquarify", "useHierarchy", "_ref2", "root", "getValue", "useMemo", "hierarchy", "sum", "useTreeMap", "_ref3", "data", "_ref3$identity", "_ref3$value", "valueFormat", "_ref3$leavesOnly", "_ref3$tile", "_ref3$innerPadding", "_ref3$outerPadding", "_ref3$label", "_ref3$orientLabel", "_ref3$enableParentLab", "_ref3$parentLabel", "_ref3$parentLabelSize", "_ref3$parentLabelPosi", "_ref3$parentLabelPadd", "_ref3$colors", "_ref3$colorBy", "_ref3$nodeOpacity", "_ref3$borderColor", "_ref3$labelTextColor", "_ref3$parentLabelText", "getIdentity", "usePropertyAccessor", "formatValue", "useValueFormatter", "getLabel", "getParentLabel", "layout", "treemap", "d3Treemap", "size", "round", "paddingInner", "paddingOuter", "startCase", "rawNodes", "cloneDeep", "leaves", "descendants", "nodes", "map", "rawNode", "_computeNodeIdAndPath", "ancestors", "ancestor", "reverse", "join", "pathComponents", "omit", "x0", "y0", "x1", "y1", "treeDepth", "depth", "treeHeight", "getColor", "useOrdinalColorScale", "getBorderColor", "useInheritedColor", "getLabelTextColor", "getParentLabelTextColor", "nodesWithStyles", "nodeWithStyles", "useCustomLayerProps", "_ref5", "getAnimatedNodeProps", "getEndingAnimatedNodeProps", "TreeMapNodes", "nodesWithHandlers", "_ref4", "_useTooltip", "useTooltip", "showTooltipFromEvent", "hideTooltip", "showTooltip", "useCallback", "event", "createElement", "handleMouseEnter", "handleMouseMove", "handleMouseLeave", "handleClick", "_useMotionConfig", "useMotionConfig", "springConfig", "config", "transition", "useTransition", "keys", "initial", "enter", "update", "leave", "immediate", "_Fragment", "key", "InnerTreeMap", "_ref$identity", "_ref$value", "_ref$tile", "_ref$nodeComponent", "_ref$innerPadding", "_ref$outerPadding", "_ref$leavesOnly", "partialMargin", "margin", "_ref$layers", "_ref$colors", "_ref$colorBy", "_ref$nodeOpacity", "_ref$borderWidth", "_ref$borderColor", "_ref$defs", "_ref$fill", "_ref$enableLabel", "_ref$label", "_ref$labelTextColor", "_ref$orientLabel", "_ref$labelSkipSize", "_ref$enableParentLabe", "_ref$parentLabel", "_ref$parentLabelSize", "_ref$parentLabelPosit", "_ref$parentLabelPaddi", "_ref$parentLabelTextC", "_ref$isInteractive", "_ref$tooltip", "ariaLabel", "ariaLabelledBy", "ariaDescribedBy", "_useDimensions", "useDimensions", "innerWidth", "innerHeight", "outerWidth", "outerHeight", "layerById", "includes", "customLayerProps", "boundDefs", "bindDefs", "SvgWrapper", "layer", "i", "_layerById$layer", "Fragment", "TreeMap", "_ref2$isInteractive", "_ref2$animate", "_ref2$motionConfig", "renderWrapper", "otherProps", "_objectWithoutPropertiesLoose", "_excluded", "Container", "ResponsiveTreeMap", "props", "ResponsiveWrapper", "InnerTreeMapHtml", "TreeMapHtml", "ResponsiveTreeMapHtml", "findNodeUnderCursor", "find", "isCursorInRect", "InnerTreeMapCanvas", "_ref$pixelRatio", "canvasEl", "useRef", "useEffect", "current", "ctx", "getContext", "scale", "fillStyle", "fillRect", "translate", "forEach", "strokeStyle", "lineWidth", "strokeRect", "textAlign", "textBaseline", "font", "fontSize", "fontFamily", "rotate", "save", "degreesToRadians", "fillText", "restore", "handleMouseHover", "_getRelativeCursor", "getRelativeCursor", "_getRelativeCursor2", "ref", "TreeMapCanvas", "ResponsiveTreeMapCanvas"]
}
