{
  "version": 3,
  "sources": ["../../bs-custom-file-input/src/selector.js", "../../bs-custom-file-input/src/util.js", "../../bs-custom-file-input/src/eventHandlers.js", "../../bs-custom-file-input/src/index.js"],
  "sourcesContent": ["const Selector = {\n  CUSTOMFILE: '.custom-file input[type=\"file\"]',\n  CUSTOMFILELABEL: '.custom-file-label',\n  FORM: 'form',\n  INPUT: 'input',\n}\n\nexport default Selector\n", "import Selector from './selector'\n\nconst textNodeType = 3\nconst getDefaultText = (input) => {\n  let defaultText = ''\n\n  const label = input.parentNode.querySelector(Selector.CUSTOMFILELABEL)\n\n  if (label) {\n    defaultText = label.textContent\n  }\n\n  return defaultText\n}\n\nconst findFirstChildNode = (element) => {\n  if (element.childNodes.length > 0) {\n    const childNodes = [].slice.call(element.childNodes)\n\n    for (let i = 0; i < childNodes.length; i++) {\n      const node = childNodes[i]\n      if (node.nodeType !== textNodeType) {\n        return node\n      }\n    }\n  }\n\n  return element\n}\n\nconst restoreDefaultText = (input) => {\n  const defaultText = input.bsCustomFileInput.defaultText\n  const label = input.parentNode.querySelector(Selector.CUSTOMFILELABEL)\n\n  if (label) {\n    const element = findFirstChildNode(label)\n\n    element.textContent = defaultText\n  }\n}\n\nexport {\n  getDefaultText,\n  findFirstChildNode,\n  restoreDefaultText,\n}\n", "import { findFirstChildNode, restoreDefaultText } from './util'\nimport Selector from './selector'\n\nconst fileApi = !!window.File\nconst FAKE_PATH = 'fakepath'\nconst FAKE_PATH_SEPARATOR = '\\\\'\n\nconst getSelectedFiles = (input) => {\n  if (input.hasAttribute('multiple') && fileApi) {\n    return [].slice.call(input.files)\n      .map((file) => file.name)\n      .join(', ')\n  }\n\n  if (input.value.indexOf(FAKE_PATH) !== -1) {\n    const splittedValue = input.value.split(FAKE_PATH_SEPARATOR)\n\n    return splittedValue[splittedValue.length - 1]\n  }\n\n  return input.value\n}\n\nfunction handleInputChange() {\n  const label = this.parentNode.querySelector(Selector.CUSTOMFILELABEL)\n\n  if (label) {\n    const element = findFirstChildNode(label)\n    const inputValue = getSelectedFiles(this)\n\n    if (inputValue.length) {\n      element.textContent = inputValue\n    } else {\n      restoreDefaultText(this)\n    }\n  }\n}\n\nfunction handleFormReset() {\n  const customFileList = [].slice.call(this.querySelectorAll(Selector.INPUT))\n    .filter((input) => !!input.bsCustomFileInput)\n\n  for (let i = 0, len = customFileList.length; i < len; i++) {\n    restoreDefaultText(customFileList[i])\n  }\n}\n\nexport {\n  handleInputChange,\n  handleFormReset,\n}\n", "import { getDefaultText, restoreDefaultText } from './util'\nimport { handleFormReset, handleInputChange } from './eventHandlers'\nimport Selector from './selector'\n\nconst customProperty = 'bsCustomFileInput'\nconst Event = {\n  FORMRESET   : 'reset',\n  INPUTCHANGE : 'change',\n}\n\nconst bsCustomFileInput = {\n  init(inputSelector = Selector.CUSTOMFILE, formSelector = Selector.FORM) {\n    const customFileInputList = [].slice.call(document.querySelectorAll(inputSelector))\n    const formList = [].slice.call(document.querySelectorAll(formSelector))\n\n    for (let i = 0, len = customFileInputList.length; i < len; i++) {\n      const input = customFileInputList[i]\n\n      Object.defineProperty(input, customProperty, {\n        value: {\n          defaultText: getDefaultText(input),\n        },\n        writable: true,\n      })\n\n      handleInputChange.call(input)\n      input.addEventListener(Event.INPUTCHANGE, handleInputChange)\n    }\n\n    for (let i = 0, len = formList.length; i < len; i++) {\n      formList[i].addEventListener(Event.FORMRESET, handleFormReset)\n      Object.defineProperty(formList[i], customProperty, {\n        value: true,\n        writable: true,\n      })\n    }\n  },\n\n  destroy() {\n    const formList = [].slice.call(document.querySelectorAll(Selector.FORM))\n      .filter((form) => !!form.bsCustomFileInput)\n    const customFileInputList = [].slice.call(document.querySelectorAll(Selector.INPUT))\n      .filter((input) => !!input.bsCustomFileInput)\n\n    for (let i = 0, len = customFileInputList.length; i < len; i++) {\n      const input = customFileInputList[i]\n\n      restoreDefaultText(input)\n      input[customProperty] = undefined\n\n      input.removeEventListener(Event.INPUTCHANGE, handleInputChange)\n    }\n\n    for (let i = 0, len = formList.length; i < len; i++) {\n      formList[i].removeEventListener(Event.FORMRESET, handleFormReset)\n      formList[i][customProperty] = undefined\n    }\n  },\n}\n\nexport default bsCustomFileInput\n"],
  "mappings": "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",
  "names": ["Selector", "CUSTOMFILE", "CUSTOMFILELABEL", "FORM", "INPUT", "textNodeType", "getDefaultText", "input", "defaultText", "label", "parentNode", "querySelector", "textContent", "findFirstChildNode", "element", "childNodes", "length", "slice", "call", "i", "node", "nodeType", "restoreDefaultText", "bsCustomFileInput", "fileApi", "window", "File", "FAKE_PATH", "FAKE_PATH_SEPARATOR", "getSelectedFiles", "hasAttribute", "files", "map", "file", "name", "join", "value", "indexOf", "splittedValue", "split", "handleInputChange", "inputValue", "handleFormReset", "customFileList", "querySelectorAll", "filter", "len", "customProperty", "Event", "FORMRESET", "INPUTCHANGE", "init", "inputSelector", "formSelector", "customFileInputList", "document", "formList", "Object", "defineProperty", "writable", "addEventListener", "destroy", "form", "undefined", "removeEventListener"]
}
