{
  "version": 3,
  "sources": ["../../react-photo-album/dist/index.mjs"],
  "sourcesContent": ["\"use client\";\nimport * as React from \"react\";\nfunction ratio({ width, height }) {\n  return width / height;\n}\nfunction round(value, decimals = 0) {\n  const factor = 10 ** decimals;\n  return Math.round((value + Number.EPSILON) * factor) / factor;\n}\nfunction rankingFunctionComparator(rank) {\n  return (a, b) => rank(b) - rank(a);\n}\nclass MinHeap {\n  constructor(comparator) {\n    this.comparator = comparator;\n    this.heap = [];\n    this.n = 0;\n  }\n  greater(i, j) {\n    return this.comparator(this.heap[i], this.heap[j]) < 0;\n  }\n  swap(i, j) {\n    const temp = this.heap[i];\n    this.heap[i] = this.heap[j];\n    this.heap[j] = temp;\n  }\n  swim(i) {\n    let k = i;\n    let k2 = Math.floor(k / 2);\n    while (k > 1 && this.greater(k2, k)) {\n      this.swap(k2, k);\n      k = k2;\n      k2 = Math.floor(k / 2);\n    }\n  }\n  sink(i) {\n    let k = i;\n    let k2 = k * 2;\n    while (k2 <= this.n) {\n      if (k2 < this.n && this.greater(k2, k2 + 1)) k2 += 1;\n      if (!this.greater(k, k2)) break;\n      this.swap(k, k2);\n      k = k2;\n      k2 = k * 2;\n    }\n  }\n  push(element) {\n    this.n += 1;\n    this.heap[this.n] = element;\n    this.swim(this.n);\n  }\n  pop() {\n    if (this.n === 0) return void 0;\n    this.swap(1, this.n);\n    this.n -= 1;\n    const max = this.heap.pop();\n    this.sink(1);\n    return max;\n  }\n  size() {\n    return this.n;\n  }\n}\nfunction buildPrecedentsMap(graph, startNode, endNode) {\n  const precedentsMap = /* @__PURE__ */ new Map();\n  const visited = /* @__PURE__ */ new Set();\n  const storedShortestPaths = /* @__PURE__ */ new Map();\n  storedShortestPaths.set(startNode, 0);\n  const queue = new MinHeap(rankingFunctionComparator((el) => el.weight));\n  queue.push({ id: startNode, weight: 0 });\n  while (queue.size() > 0) {\n    const { id, weight } = queue.pop();\n    if (!visited.has(id)) {\n      const neighboringNodes = graph(id);\n      visited.add(id);\n      neighboringNodes.forEach((neighborWeight, neighbor) => {\n        const newWeight = weight + neighborWeight;\n        const currentId = precedentsMap.get(neighbor);\n        const currentWeight = storedShortestPaths.get(neighbor);\n        if (currentWeight === void 0 || currentWeight > newWeight && (currentWeight / newWeight > 1.005 || currentId !== void 0 && currentId < id)) {\n          storedShortestPaths.set(neighbor, newWeight);\n          queue.push({ id: neighbor, weight: newWeight });\n          precedentsMap.set(neighbor, id);\n        }\n      });\n    }\n  }\n  return storedShortestPaths.has(endNode) ? precedentsMap : void 0;\n}\nfunction getPathFromPrecedentsMap(precedentsMap, endNode) {\n  const nodes = [];\n  for (let node = endNode; node !== void 0; node = precedentsMap.get(node)) {\n    nodes.push(node);\n  }\n  return nodes.reverse();\n}\nfunction findShortestPath(graph, startNode, endNode) {\n  const precedentsMap = buildPrecedentsMap(graph, startNode, endNode);\n  return precedentsMap ? getPathFromPrecedentsMap(precedentsMap, endNode) : void 0;\n}\nfunction findIdealNodeSearch({\n  photos,\n  targetRowHeight,\n  containerWidth\n}) {\n  const minRatio = photos.reduce((acc, photo) => Math.min(ratio(photo), acc), Number.MAX_VALUE);\n  return round(containerWidth / targetRowHeight / minRatio) + 2;\n}\nfunction getCommonHeight(row, containerWidth, spacing, padding) {\n  const rowWidth = containerWidth - (row.length - 1) * spacing - 2 * padding * row.length;\n  const totalAspectRatio = row.reduce((acc, photo) => acc + ratio(photo), 0);\n  return rowWidth / totalAspectRatio;\n}\nfunction cost(photos, i, j, width, targetRowHeight, spacing, padding) {\n  const row = photos.slice(i, j);\n  const commonHeight = getCommonHeight(row, width, spacing, padding);\n  return commonHeight > 0 ? (commonHeight - targetRowHeight) ** 2 * row.length : void 0;\n}\nfunction makeGetRowNeighbors({\n  photos,\n  layoutOptions,\n  targetRowHeight,\n  limitNodeSearch,\n  rowConstraints\n}) {\n  return (node) => {\n    var _a, _b;\n    const { containerWidth, spacing, padding } = layoutOptions;\n    const results = /* @__PURE__ */ new Map();\n    results.set(node, 0);\n    const startOffset = (_a = rowConstraints == null ? void 0 : rowConstraints.minPhotos) != null ? _a : 1;\n    const endOffset = Math.min(limitNodeSearch, (_b = rowConstraints == null ? void 0 : rowConstraints.maxPhotos) != null ? _b : Infinity);\n    for (let i = node + startOffset; i < photos.length + 1; i += 1) {\n      if (i - node > endOffset) break;\n      const currentCost = cost(photos, node, i, containerWidth, targetRowHeight, spacing, padding);\n      if (currentCost === void 0) break;\n      results.set(i, currentCost);\n    }\n    return results;\n  };\n}\nfunction computeRowsLayout({\n  photos,\n  layoutOptions\n}) {\n  const { spacing, padding, containerWidth, targetRowHeight, rowConstraints } = layoutOptions;\n  const limitNodeSearch = findIdealNodeSearch({ photos, containerWidth, targetRowHeight });\n  const getNeighbors = makeGetRowNeighbors({\n    photos,\n    layoutOptions,\n    targetRowHeight,\n    limitNodeSearch,\n    rowConstraints\n  });\n  const path = findShortestPath(getNeighbors, 0, photos.length);\n  if (path === void 0) return void 0;\n  const layout = [];\n  for (let i = 1; i < path.length; i += 1) {\n    const row = photos.map((photo, index) => ({ photo, index })).slice(path[i - 1], path[i]);\n    const height = getCommonHeight(\n      row.map(({ photo }) => photo),\n      containerWidth,\n      spacing,\n      padding\n    );\n    layout.push(\n      row.map(({ photo, index }, photoIndex) => ({\n        photo,\n        layout: {\n          height,\n          width: height * ratio(photo),\n          index,\n          photoIndex,\n          photosCount: row.length\n        }\n      }))\n    );\n  }\n  return layout;\n}\nfunction clsx(...classes) {\n  return [...classes].filter((cls) => Boolean(cls)).join(\" \");\n}\nfunction calcWidth(base, photoLayout, layoutOptions) {\n  const { width, photosCount } = photoLayout;\n  const { layout, spacing, padding, containerWidth } = layoutOptions;\n  const count = layout === \"rows\" ? photosCount : layoutOptions.columns;\n  const gaps = spacing * (count - 1) + 2 * padding * count;\n  return `calc((${base} - ${gaps}px) / ${round((containerWidth - gaps) / width, 5)})`;\n}\nfunction cssPhotoWidth(layout, layoutOptions) {\n  return layoutOptions.layout !== \"rows\" ? `calc(100% - ${2 * layoutOptions.padding}px)` : calcWidth(\"100%\", layout, layoutOptions);\n}\nfunction calculateSizesValue(size, layout, layoutOptions) {\n  var _a, _b;\n  return calcWidth((_b = (_a = size.match(/^\\s*calc\\((.*)\\)\\s*$/)) == null ? void 0 : _a[1]) != null ? _b : size, layout, layoutOptions);\n}\nfunction srcSetAndSizes(photo, layout, layoutOptions) {\n  var _a;\n  let srcSet;\n  let sizes;\n  const images = photo.srcSet || photo.images;\n  if (images && images.length > 0) {\n    srcSet = images.concat(\n      !images.find(({ width }) => width === photo.width) ? [{ src: photo.src, width: photo.width, height: photo.height }] : []\n    ).sort((first, second) => first.width - second.width).map((image) => `${image.src} ${image.width}w`).join(\", \");\n  }\n  if ((_a = layoutOptions.sizes) == null ? void 0 : _a.size) {\n    sizes = (layoutOptions.sizes.sizes || []).map(({ viewport, size }) => `${viewport} ${calculateSizesValue(size, layout, layoutOptions)}`).concat(calculateSizesValue(layoutOptions.sizes.size, layout, layoutOptions)).join(\", \");\n  } else {\n    sizes = `${Math.ceil(layout.width / layoutOptions.containerWidth * 100)}vw`;\n  }\n  return { srcSet, sizes };\n}\nfunction PhotoRenderer(props) {\n  var _a, _b;\n  const { photo, layout, layoutOptions, imageProps: { style, className, ...restImageProps } = {}, renderPhoto } = props;\n  const { onClick } = layoutOptions;\n  const imageStyle = {\n    display: \"block\",\n    boxSizing: \"content-box\",\n    width: cssPhotoWidth(layout, layoutOptions),\n    height: \"auto\",\n    aspectRatio: `${photo.width} / ${photo.height}`,\n    ...layoutOptions.padding ? { padding: `${layoutOptions.padding}px` } : null,\n    ...(layoutOptions.layout === \"columns\" || layoutOptions.layout === \"masonry\") && layout.photoIndex < layout.photosCount - 1 ? { marginBottom: `${layoutOptions.spacing}px` } : null,\n    ...onClick ? { cursor: \"pointer\" } : null,\n    ...style\n  };\n  const handleClick = onClick ? (event) => {\n    onClick({ event, photo, index: layout.index });\n  } : void 0;\n  const imageProps = {\n    src: photo.src,\n    alt: (_a = photo.alt) != null ? _a : \"\",\n    title: photo.title,\n    onClick: handleClick,\n    style: imageStyle,\n    className: clsx(\"react-photo-album--photo\", className),\n    loading: \"lazy\",\n    decoding: \"async\",\n    ...srcSetAndSizes(photo, layout, layoutOptions),\n    ...restImageProps\n  };\n  const renderDefaultPhoto = (options) => {\n    const { src, alt, srcSet, sizes, style: unwrappedStyle, ...rest } = imageProps;\n    return React.createElement(\n      \"img\",\n      {\n        alt,\n        ...srcSet ? { srcSet, sizes } : null,\n        src,\n        style: (options == null ? void 0 : options.wrapped) ? { display: \"block\", width: \"100%\", height: \"100%\" } : unwrappedStyle,\n        ...rest\n      }\n    );\n  };\n  const wrapperStyle = (({ display, boxSizing, width, aspectRatio, padding, marginBottom, cursor }) => ({\n    display,\n    boxSizing,\n    width,\n    aspectRatio,\n    padding,\n    marginBottom,\n    cursor\n  }))(imageStyle);\n  return React.createElement(React.Fragment, null, (_b = renderPhoto == null ? void 0 : renderPhoto({\n    photo,\n    layout,\n    layoutOptions,\n    imageProps,\n    renderDefaultPhoto,\n    wrapperStyle\n  })) != null ? _b : renderDefaultPhoto());\n}\nfunction defaultRenderRowContainer({\n  rowContainerProps,\n  children\n}) {\n  return React.createElement(\"div\", { ...rowContainerProps }, children);\n}\nfunction RowContainerRenderer(props) {\n  const {\n    layoutOptions,\n    rowIndex,\n    rowsCount,\n    renderRowContainer,\n    rowContainerProps: { style, className, ...restRowContainerProps } = {},\n    children\n  } = props;\n  const rowContainerProps = {\n    className: clsx(\"react-photo-album--row\", className),\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"nowrap\",\n      alignItems: \"flex-start\",\n      justifyContent: \"space-between\",\n      ...rowIndex < rowsCount - 1 ? { marginBottom: `${layoutOptions.spacing}px` } : null,\n      ...style\n    },\n    ...restRowContainerProps\n  };\n  return React.createElement(React.Fragment, null, (renderRowContainer != null ? renderRowContainer : defaultRenderRowContainer)({\n    layoutOptions,\n    rowIndex,\n    rowsCount,\n    rowContainerProps,\n    children\n  }));\n}\nfunction RowsLayout(props) {\n  const {\n    photos,\n    layoutOptions,\n    renderPhoto,\n    renderRowContainer,\n    componentsProps: { imageProps, rowContainerProps }\n  } = props;\n  const rowsLayout = computeRowsLayout({ photos, layoutOptions });\n  if (!rowsLayout) return null;\n  return React.createElement(React.Fragment, null, rowsLayout.map((row, rowIndex) => React.createElement(\n    RowContainerRenderer,\n    {\n      key: `row-${rowIndex}`,\n      layoutOptions,\n      rowIndex,\n      rowsCount: rowsLayout.length,\n      renderRowContainer,\n      rowContainerProps\n    },\n    row.map(({ photo, layout }) => React.createElement(\n      PhotoRenderer,\n      {\n        key: photo.key || photo.src,\n        photo,\n        layout,\n        layoutOptions,\n        renderPhoto,\n        imageProps\n      }\n    ))\n  )));\n}\nfunction computeShortestPath(graph, pathLength, startNode, endNode) {\n  const matrix = /* @__PURE__ */ new Map();\n  const queue = /* @__PURE__ */ new Set();\n  queue.add(startNode);\n  for (let length = 0; length < pathLength; length += 1) {\n    const currentQueue = [...queue.keys()];\n    queue.clear();\n    currentQueue.forEach((node) => {\n      const accumulatedWeight = length > 0 ? matrix.get(node)[length].weight : 0;\n      graph(node).forEach(({ neighbor, weight }) => {\n        let paths = matrix.get(neighbor);\n        if (!paths) {\n          paths = [];\n          matrix.set(neighbor, paths);\n        }\n        const newWeight = accumulatedWeight + weight;\n        const nextPath = paths[length + 1];\n        if (!nextPath || nextPath.weight > newWeight && (nextPath.weight / newWeight > 1.0001 || node < nextPath.node)) {\n          paths[length + 1] = { node, weight: newWeight };\n        }\n        if (length < pathLength - 1 && neighbor !== endNode) {\n          queue.add(neighbor);\n        }\n      });\n    });\n  }\n  return matrix;\n}\nfunction reconstructShortestPath(matrix, pathLength, endNode) {\n  const path = [endNode];\n  for (let node = endNode, length = pathLength; length > 0; length -= 1) {\n    node = matrix.get(node)[length].node;\n    path.push(node);\n  }\n  return path.reverse();\n}\nfunction findShortestPathLengthN(graph, pathLength, startNode, endNode) {\n  return reconstructShortestPath(computeShortestPath(graph, pathLength, startNode, endNode), pathLength, endNode);\n}\nfunction makeGetColumnNeighbors({\n  photos,\n  spacing,\n  padding,\n  targetColumnWidth,\n  targetColumnHeight\n}) {\n  return (node) => {\n    const results = [];\n    const cutOffHeight = targetColumnHeight * 1.5;\n    let height = targetColumnWidth / ratio(photos[node]) + 2 * padding;\n    for (let i = node + 1; i < photos.length + 1; i += 1) {\n      results.push({ neighbor: i, weight: (targetColumnHeight - height) ** 2 });\n      if (height > cutOffHeight || i === photos.length) {\n        break;\n      }\n      height += targetColumnWidth / ratio(photos[i]) + spacing + 2 * padding;\n    }\n    return results;\n  };\n}\nfunction buildColumnsModel({\n  path,\n  photos,\n  containerWidth,\n  columnsGaps,\n  columnsRatios,\n  spacing,\n  padding\n}) {\n  const columnsModel = [];\n  const totalRatio = columnsRatios.reduce((total, columnRatio) => total + columnRatio, 0);\n  for (let i = 0; i < path.length - 1; i += 1) {\n    const column = photos.map((photo, index) => ({ photo, index })).slice(path[i], path[i + 1]);\n    const totalAdjustedGaps = columnsRatios.reduce(\n      (total, columnRatio, index) => total + (columnsGaps[i] - columnsGaps[index]) * columnRatio,\n      0\n    );\n    const columnWidth = (containerWidth - (path.length - 2) * spacing - 2 * (path.length - 1) * padding - totalAdjustedGaps) * columnsRatios[i] / totalRatio;\n    columnsModel.push(\n      column.map(({ photo, index }, photoIndex) => ({\n        photo,\n        layout: {\n          width: columnWidth,\n          height: columnWidth / ratio(photo),\n          index,\n          photoIndex,\n          photosCount: column.length\n        }\n      }))\n    );\n  }\n  return columnsModel;\n}\nfunction computeColumnsModel({\n  photos,\n  layoutOptions,\n  targetColumnWidth\n}) {\n  const { columns, spacing, padding, containerWidth } = layoutOptions;\n  const columnsGaps = [];\n  const columnsRatios = [];\n  if (photos.length <= columns) {\n    const averageRatio = photos.length > 0 ? photos.reduce((acc, photo) => acc + ratio(photo), 0) / photos.length : 1;\n    for (let i = 0; i < columns; i += 1) {\n      columnsGaps[i] = 2 * padding;\n      columnsRatios[i] = i < photos.length ? ratio(photos[i]) : averageRatio;\n    }\n    const columnsModel2 = buildColumnsModel({\n      path: Array.from({ length: columns + 1 }).map((_, index) => Math.min(index, photos.length)),\n      photos,\n      columnsRatios,\n      columnsGaps,\n      containerWidth,\n      spacing,\n      padding\n    });\n    return { columnsGaps, columnsRatios, columnsModel: columnsModel2 };\n  }\n  const targetColumnHeight = (photos.reduce((acc, photo) => acc + targetColumnWidth / ratio(photo), 0) + spacing * (photos.length - columns) + 2 * padding * photos.length) / columns;\n  const getNeighbors = makeGetColumnNeighbors({\n    photos,\n    targetColumnWidth,\n    targetColumnHeight,\n    spacing,\n    padding\n  });\n  const path = findShortestPathLengthN(getNeighbors, columns, 0, photos.length);\n  for (let i = 0; i < path.length - 1; i += 1) {\n    const column = photos.slice(path[i], path[i + 1]);\n    columnsGaps[i] = spacing * (column.length - 1) + 2 * padding * column.length;\n    columnsRatios[i] = 1 / column.reduce((acc, photo) => acc + 1 / ratio(photo), 0);\n  }\n  const columnsModel = buildColumnsModel({\n    path,\n    photos,\n    columnsRatios,\n    columnsGaps,\n    containerWidth,\n    spacing,\n    padding\n  });\n  return { columnsGaps, columnsRatios, columnsModel };\n}\nfunction computeLayout(props) {\n  const { photos, layoutOptions } = props;\n  const { columns, spacing, padding, containerWidth } = layoutOptions;\n  const targetColumnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n  const { columnsGaps, columnsRatios, columnsModel } = computeColumnsModel({\n    photos,\n    layoutOptions,\n    targetColumnWidth\n  });\n  if (columnsModel.findIndex(\n    (columnModel) => columnModel.findIndex(({ layout: { width, height } }) => width < 0 || height < 0) >= 0\n  ) >= 0) {\n    if (columns > 1) {\n      return computeLayout({ photos, layoutOptions: { ...layoutOptions, columns: columns - 1 } });\n    }\n    return void 0;\n  }\n  return { columnsModel, columnsGaps, columnsRatios };\n}\nfunction computeColumnsLayout({\n  photos,\n  layoutOptions\n}) {\n  return computeLayout({ photos, layoutOptions });\n}\nfunction defaultRenderColumnContainer({\n  columnContainerProps,\n  children\n}) {\n  return React.createElement(\"div\", { ...columnContainerProps }, children);\n}\nfunction cssColumnWidth(props) {\n  const { layoutOptions, columnIndex, columnsCount, columnsGaps, columnsRatios } = props;\n  const { layout, spacing, padding } = layoutOptions;\n  if (layout === \"masonry\" || !columnsGaps || !columnsRatios) {\n    return `calc((100% - ${spacing * (columnsCount - 1)}px) / ${columnsCount})`;\n  }\n  const totalRatio = columnsRatios.reduce((acc, ratio2) => acc + ratio2, 0);\n  const totalAdjustedGaps = columnsRatios.reduce(\n    (acc, ratio2, index) => acc + (columnsGaps[columnIndex] - columnsGaps[index]) * ratio2,\n    0\n  );\n  return `calc((100% - ${round(\n    (columnsCount - 1) * spacing + 2 * columnsCount * padding + totalAdjustedGaps,\n    3\n  )}px) * ${round(columnsRatios[columnIndex] / totalRatio, 5)} + ${2 * padding}px)`;\n}\nfunction ColumnContainerRenderer(props) {\n  const {\n    layoutOptions,\n    renderColumnContainer,\n    children,\n    columnContainerProps: { style, className, ...restColumnContainerProps } = {},\n    ...rest\n  } = props;\n  const columnContainerProps = {\n    className: clsx(\"react-photo-album--column\", className),\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      flexWrap: \"nowrap\",\n      alignItems: \"flex-start\",\n      width: cssColumnWidth(props),\n      justifyContent: layoutOptions.layout === \"columns\" ? \"space-between\" : \"flex-start\",\n      ...style\n    },\n    ...restColumnContainerProps\n  };\n  return React.createElement(React.Fragment, null, (renderColumnContainer != null ? renderColumnContainer : defaultRenderColumnContainer)({\n    layoutOptions,\n    columnContainerProps,\n    children,\n    ...rest\n  }));\n}\nfunction ColumnsLayout(props) {\n  const {\n    photos,\n    layoutOptions,\n    renderPhoto,\n    renderColumnContainer,\n    componentsProps: { imageProps, columnContainerProps }\n  } = props;\n  const columnsLayout = computeColumnsLayout({ photos, layoutOptions });\n  if (!columnsLayout) return null;\n  const { columnsModel, columnsRatios, columnsGaps } = columnsLayout;\n  return React.createElement(React.Fragment, null, columnsModel.map((column, columnIndex) => React.createElement(\n    ColumnContainerRenderer,\n    {\n      key: `column-${columnIndex}`,\n      layoutOptions,\n      columnIndex,\n      columnsCount: columnsModel.length,\n      columnsGaps,\n      columnsRatios,\n      renderColumnContainer,\n      columnContainerProps\n    },\n    column.map(({ photo, layout }) => React.createElement(\n      PhotoRenderer,\n      {\n        key: photo.key || photo.src,\n        photo,\n        layout,\n        layoutOptions,\n        renderPhoto,\n        imageProps\n      }\n    ))\n  )));\n}\nfunction computeMasonryLayout(props) {\n  const { photos, layoutOptions } = props;\n  const { columns, spacing, padding, containerWidth } = layoutOptions;\n  const columnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n  if (columnWidth <= 0) {\n    return columns > 1 ? computeMasonryLayout({\n      ...props,\n      layoutOptions: { ...layoutOptions, columns: columns - 1 }\n    }) : void 0;\n  }\n  const columnsCurrentTopPositions = [];\n  for (let i = 0; i < columns; i += 1) {\n    columnsCurrentTopPositions[i] = 0;\n  }\n  const columnsModel = photos.reduce(\n    (model, photo, index) => {\n      const shortestColumn = columnsCurrentTopPositions.reduce(\n        (currentShortestColumn, item, i) => item < columnsCurrentTopPositions[currentShortestColumn] - 1 ? i : currentShortestColumn,\n        0\n      );\n      columnsCurrentTopPositions[shortestColumn] = columnsCurrentTopPositions[shortestColumn] + columnWidth / ratio(photo) + spacing + 2 * padding;\n      model[shortestColumn].push({ photo, index });\n      return model;\n    },\n    Array.from({ length: columns }).map(() => [])\n  );\n  return columnsModel.map(\n    (column) => column.map(({ photo, index }, photoIndex) => ({\n      photo,\n      layout: {\n        width: columnWidth,\n        height: columnWidth / ratio(photo),\n        index,\n        photoIndex,\n        photosCount: column.length\n      }\n    }))\n  );\n}\nfunction MasonryLayout(props) {\n  const {\n    photos,\n    layoutOptions,\n    renderPhoto,\n    renderColumnContainer,\n    componentsProps: { imageProps, columnContainerProps }\n  } = props;\n  const masonryLayout = computeMasonryLayout({ photos, layoutOptions });\n  if (!masonryLayout) return null;\n  return React.createElement(React.Fragment, null, masonryLayout.map((column, columnIndex) => React.createElement(\n    ColumnContainerRenderer,\n    {\n      key: `masonry-column-${columnIndex}`,\n      layoutOptions,\n      columnsCount: masonryLayout.length,\n      columnIndex,\n      renderColumnContainer,\n      columnContainerProps\n    },\n    column.map(({ photo, layout }) => React.createElement(\n      PhotoRenderer,\n      {\n        key: photo.key || photo.src,\n        photo,\n        layout,\n        layoutOptions,\n        renderPhoto,\n        imageProps\n      }\n    ))\n  )));\n}\nfunction defaultRenderContainer({ containerProps, children, containerRef }) {\n  return React.createElement(\"div\", { ref: containerRef, ...containerProps }, children);\n}\nfunction ContainerRenderer(props) {\n  const {\n    layout,\n    renderContainer,\n    children,\n    containerRef,\n    containerProps: { style, className, ...restContainerProps } = {}\n  } = props;\n  const containerProps = {\n    className: clsx(\"react-photo-album\", `react-photo-album--${layout}`, className),\n    style: {\n      display: \"flex\",\n      flexWrap: \"nowrap\",\n      justifyContent: \"space-between\",\n      flexDirection: layout === \"rows\" ? \"column\" : \"row\",\n      ...style\n    },\n    ...restContainerProps\n  };\n  return React.createElement(React.Fragment, null, (renderContainer != null ? renderContainer : defaultRenderContainer)({\n    containerProps,\n    containerRef,\n    layout,\n    children\n  }));\n}\nfunction useArray(array) {\n  const ref = React.useRef(array);\n  if (!array || !ref.current || array.join() !== ref.current.join()) {\n    ref.current = array;\n  }\n  return ref.current;\n}\nfunction containerWidthReducer(state, { newContainerWidth, newScrollbarWidth }) {\n  const { containerWidth, scrollbarWidth } = state;\n  if (containerWidth !== void 0 && scrollbarWidth !== void 0 && newContainerWidth !== void 0 && newScrollbarWidth !== void 0 && newContainerWidth > containerWidth && newContainerWidth - containerWidth <= 20 && newScrollbarWidth < scrollbarWidth) {\n    return { containerWidth, scrollbarWidth: newScrollbarWidth };\n  }\n  return containerWidth !== newContainerWidth || scrollbarWidth !== newScrollbarWidth ? { containerWidth: newContainerWidth, scrollbarWidth: newScrollbarWidth } : state;\n}\nfunction resolveContainerWidth(el, breakpoints2) {\n  let width = el == null ? void 0 : el.clientWidth;\n  if (width !== void 0 && breakpoints2 && breakpoints2.length > 0) {\n    const sorted = [...breakpoints2.filter((x) => x > 0)].sort((a, b) => b - a);\n    sorted.push(Math.floor(sorted[sorted.length - 1] / 2));\n    const threshold = width;\n    width = sorted.find((breakpoint, index) => breakpoint <= threshold || index === sorted.length - 1);\n  }\n  return width;\n}\nfunction useContainerWidth(breakpoints2, defaultContainerWidth) {\n  const [{ containerWidth }, dispatch] = React.useReducer(containerWidthReducer, {\n    containerWidth: defaultContainerWidth\n  });\n  const ref = React.useRef(null);\n  const observerRef = React.useRef();\n  const containerRef = React.useCallback(\n    (node) => {\n      var _a;\n      (_a = observerRef.current) == null ? void 0 : _a.disconnect();\n      observerRef.current = void 0;\n      ref.current = node;\n      const updateWidth = () => dispatch({\n        newContainerWidth: resolveContainerWidth(ref.current, breakpoints2),\n        newScrollbarWidth: window.innerWidth - document.documentElement.clientWidth\n      });\n      updateWidth();\n      if (node && typeof ResizeObserver !== \"undefined\") {\n        observerRef.current = new ResizeObserver(updateWidth);\n        observerRef.current.observe(node);\n      }\n    },\n    [breakpoints2]\n  );\n  return { containerRef, containerWidth };\n}\nconst breakpoints = Object.freeze([1200, 600, 300, 0]);\nfunction unwrap(value, arg) {\n  return typeof value === \"function\" ? value(arg) : value;\n}\nfunction unwrapParameter(value, containerWidth) {\n  return typeof value !== \"undefined\" ? unwrap(value, containerWidth) : void 0;\n}\nfunction selectResponsiveValue(values, containerWidth) {\n  const index = breakpoints.findIndex((breakpoint) => breakpoint <= containerWidth);\n  return unwrap(values[index >= 0 ? index : 0], containerWidth);\n}\nfunction resolveResponsiveParameter(parameter, containerWidth, values, minValue = 0) {\n  const value = unwrapParameter(parameter, containerWidth);\n  return Math.round(Math.max(value === void 0 ? selectResponsiveValue(values, containerWidth) : value, minValue));\n}\nfunction resolveLayoutOptions({\n  layout,\n  onClick,\n  containerWidth,\n  targetRowHeight,\n  rowConstraints,\n  columns,\n  spacing,\n  padding,\n  sizes\n}) {\n  return {\n    layout,\n    onClick,\n    containerWidth,\n    columns: resolveResponsiveParameter(columns, containerWidth, [5, 4, 3, 2], 1),\n    spacing: resolveResponsiveParameter(spacing, containerWidth, [20, 15, 10, 5]),\n    padding: resolveResponsiveParameter(padding, containerWidth, [0, 0, 0, 0, 0]),\n    targetRowHeight: resolveResponsiveParameter(targetRowHeight, containerWidth, [\n      (w) => w / 5,\n      (w) => w / 4,\n      (w) => w / 3,\n      (w) => w / 2\n    ]),\n    rowConstraints: unwrapParameter(rowConstraints, containerWidth),\n    sizes\n  };\n}\nfunction resolveComponentsProps(props, containerWidth, layoutOptions) {\n  const { photos, componentsProps: componentsPropsProp } = props;\n  const componentsProps = unwrap(componentsPropsProp, containerWidth) || {};\n  if (layoutOptions) {\n    const { layout, spacing, padding, rowConstraints } = layoutOptions;\n    if (layout === \"rows\") {\n      const { singleRowMaxHeight } = rowConstraints || {};\n      if (singleRowMaxHeight) {\n        const maxWidth = Math.floor(\n          photos.reduce(\n            (acc, { width, height }) => acc + width / height * singleRowMaxHeight - 2 * padding,\n            padding * photos.length * 2 + spacing * (photos.length - 1)\n          )\n        );\n        if (maxWidth > 0) {\n          componentsProps.containerProps = componentsProps.containerProps || {};\n          componentsProps.containerProps.style = { maxWidth, ...componentsProps.containerProps.style };\n        }\n      }\n    }\n  }\n  return componentsProps;\n}\nfunction renderLayout(props, componentsProps, layoutOptions) {\n  const { photos, layout, renderPhoto, renderRowContainer, renderColumnContainer } = props;\n  const commonLayoutProps = { photos, renderPhoto, componentsProps };\n  if (layout === \"rows\") {\n    return React.createElement(\n      RowsLayout,\n      {\n        layoutOptions,\n        renderRowContainer,\n        ...commonLayoutProps\n      }\n    );\n  }\n  if (layout === \"columns\") {\n    return React.createElement(\n      ColumnsLayout,\n      {\n        layoutOptions,\n        renderColumnContainer,\n        ...commonLayoutProps\n      }\n    );\n  }\n  return React.createElement(\n    MasonryLayout,\n    {\n      layoutOptions,\n      renderColumnContainer,\n      ...commonLayoutProps\n    }\n  );\n}\nfunction PhotoAlbum(props) {\n  const { photos, layout, renderContainer, defaultContainerWidth, breakpoints: breakpoints2 } = props;\n  const { containerRef, containerWidth } = useContainerWidth(useArray(breakpoints2), defaultContainerWidth);\n  if (!layout || ![\"rows\", \"columns\", \"masonry\"].includes(layout) || !Array.isArray(photos)) return null;\n  const layoutOptions = containerWidth ? resolveLayoutOptions({ containerWidth, ...props }) : void 0;\n  const componentsProps = resolveComponentsProps(props, containerWidth, layoutOptions);\n  return React.createElement(\n    ContainerRenderer,\n    {\n      layout,\n      containerRef,\n      renderContainer,\n      containerProps: componentsProps.containerProps\n    },\n    layoutOptions && renderLayout(props, componentsProps, layoutOptions)\n  );\n}\nexport {\n  PhotoAlbum,\n  PhotoAlbum as default,\n  computeColumnsLayout as unstable_computeColumnsLayout,\n  computeMasonryLayout as unstable_computeMasonryLayout,\n  computeRowsLayout as unstable_computeRowsLayout\n};\n"],
  "mappings": "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",
  "names": []
}
