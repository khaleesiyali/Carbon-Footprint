{
  "version": 3,
  "sources": ["../../@nivo/text/src/canvas.ts", "../../@nivo/text/src/Text.tsx", "../../@nivo/voronoi/src/props.ts", "../../@nivo/voronoi/src/defaults.ts", "../../@nivo/voronoi/src/computeMesh.ts", "../../@nivo/voronoi/src/hooks.ts", "../../@nivo/voronoi/src/Voronoi.tsx", "../../@nivo/voronoi/src/ResponsiveVoronoi.tsx", "../../@nivo/voronoi/src/Mesh.tsx", "../../@nivo/voronoi/src/meshCanvas.ts", "../../@nivo/tree/src/hooks.ts", "../../@nivo/tree/src/defaults.ts", "../../@nivo/tree/src/Node.tsx", "../../@nivo/tree/src/Link.tsx", "../../@nivo/tree/src/Label.tsx", "../../@nivo/tree/src/canvas.ts", "../../@nivo/tree/src/Links.tsx", "../../@nivo/tree/src/Nodes.tsx", "../../@nivo/tree/src/labelsHooks.ts", "../../@nivo/tree/src/Labels.tsx", "../../@nivo/tree/src/Mesh.tsx", "../../@nivo/tree/src/Tree.tsx", "../../@nivo/tree/src/ResponsiveTree.tsx", "../../@nivo/tree/src/TreeCanvas.tsx", "../../@nivo/tree/src/ResponsiveTreeCanvas.tsx"],
  "sourcesContent": ["import { TextStyle } from '@nivo/core'\n\nexport const setCanvasFont = (ctx: CanvasRenderingContext2D, style: TextStyle) => {\n    ctx.font = `${style.fontWeight ? `${style.fontWeight} ` : ''}${style.fontSize}px ${\n        style.fontFamily\n    }`\n}\n\nexport const drawCanvasText = (\n    ctx: CanvasRenderingContext2D,\n    style: TextStyle,\n    text: string,\n    x = 0,\n    y = 0\n) => {\n    if (style.outlineWidth > 0) {\n        ctx.strokeStyle = style.outlineColor\n        ctx.lineWidth = style.outlineWidth * 2\n        ctx.lineJoin = 'round'\n        ctx.strokeText(text, x, y)\n    }\n\n    ctx.fillStyle = style.fill\n    ctx.fillText(text, x, y)\n}\n", "import { PropsWithChildren, ComponentType } from 'react'\nimport { animated } from '@react-spring/web'\nimport { TextStyle as ThemeStyle } from '@nivo/core'\n\ntype GetComponentProps<T> = T extends ComponentType<infer P> ? P : never\ntype AnimatedComponentProps = GetComponentProps<(typeof animated)['text']>\n\ntype TextProps = PropsWithChildren<\n    Omit<AnimatedComponentProps, 'style'> & {\n        style: AnimatedComponentProps['style'] &\n            Pick<ThemeStyle, 'outlineWidth' | 'outlineColor' | 'outlineOpacity'>\n    }\n>\n\nexport const Text = ({ style: fullStyle, children, ...attributes }: TextProps) => {\n    const { outlineWidth, outlineColor, outlineOpacity, ...style } = fullStyle\n\n    return (\n        <>\n            {outlineWidth > 0 && (\n                <animated.text\n                    {...attributes}\n                    style={{\n                        ...style,\n                        strokeWidth: outlineWidth * 2,\n                        stroke: outlineColor,\n                        strokeOpacity: outlineOpacity,\n                        strokeLinejoin: 'round',\n                    }}\n                >\n                    {children}\n                </animated.text>\n            )}\n            <animated.text {...attributes} style={style}>\n                {children}\n            </animated.text>\n        </>\n    )\n}\n", "import { VoronoiDomain, VoronoiLayer } from './types'\n\nexport const defaultVoronoiProps = {\n    xDomain: [0, 1] as VoronoiDomain,\n    yDomain: [0, 1] as VoronoiDomain,\n    layers: ['links', 'cells', 'points', 'bounds'] as VoronoiLayer[],\n    enableLinks: false,\n    linkLineWidth: 1,\n    linkLineColor: '#bbbbbb',\n    enableCells: true,\n    cellLineWidth: 2,\n    cellLineColor: '#000000',\n    enablePoints: true,\n    pointSize: 4,\n    pointColor: '#666666',\n    role: 'img',\n}\n", "import { Margin, defaultMargin as coreDefaultMargin } from '@nivo/core'\nimport { TooltipAnchor, TooltipPosition } from '@nivo/tooltip'\n\nexport const defaultNodePositionAccessor = (node: {\n    x: number\n    y: number\n}): [x: number, y: number] => [node.x, node.y]\n\nexport const defaultMargin: Margin = coreDefaultMargin\n\nexport const defaultTooltipPosition: TooltipPosition = 'cursor'\nexport const defaultTooltipAnchor: TooltipAnchor = 'top'\n", "import { Delaunay } from 'd3-delaunay'\nimport { Margin } from '@nivo/core'\nimport { NodePositionAccessor } from './types'\nimport { defaultNodePositionAccessor, defaultMargin } from './defaults'\n\n/**\n * The delaunay generator requires an array\n * where each point is defined as an array\n * of 2 elements: [x: number, y: number].\n *\n * Points represent the raw input data\n * and x/y represent accessors to x & y.\n */\nexport const computeMeshPoints = <Node>({\n    points,\n    getNodePosition = defaultNodePositionAccessor as NodePositionAccessor<Node>,\n    margin = defaultMargin,\n}: {\n    points: readonly Node[]\n    getNodePosition?: NodePositionAccessor<Node>\n    margin?: Margin\n}): [number, number][] => {\n    return points.map(node => {\n        const [x, y] = getNodePosition(node)\n\n        return [x + margin.left, y + margin.top]\n    })\n}\n\nexport const computeMesh = ({\n    points,\n    width,\n    height,\n    margin = defaultMargin,\n    debug,\n}: {\n    points: readonly [number, number][]\n    width: number\n    height: number\n    margin?: Margin\n    debug?: boolean\n}) => {\n    const delaunay = Delaunay.from(points)\n    const voronoi = debug\n        ? delaunay.voronoi([\n              0,\n              0,\n              margin.left + width + margin.right,\n              margin.top + height + margin.bottom,\n          ])\n        : undefined\n\n    return { points, delaunay, voronoi }\n}\n", "import {\n    MouseEvent,\n    MutableRefObject,\n    TouchEvent,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport { Delaunay } from 'd3-delaunay'\nimport { getDistance, getRelativeCursor, Margin } from '@nivo/core'\nimport { TooltipAnchor, TooltipPosition, useTooltip } from '@nivo/tooltip'\nimport { computeMeshPoints, computeMesh } from './computeMesh'\nimport {\n    VoronoiCommonProps,\n    VoronoiDatum,\n    VoronoiCustomLayerProps,\n    NodeMouseHandler,\n    // DatumTouchHandler,\n    NodePositionAccessor,\n    NodeTouchHandler,\n} from './types'\nimport {\n    defaultMargin,\n    defaultNodePositionAccessor,\n    defaultTooltipPosition,\n    defaultTooltipAnchor,\n} from './defaults'\n\nexport const useVoronoiMesh = <Node>({\n    points,\n    getNodePosition = defaultNodePositionAccessor as NodePositionAccessor<Node>,\n    width,\n    height,\n    margin = defaultMargin,\n    debug,\n}: {\n    points: readonly Node[]\n    getNodePosition?: NodePositionAccessor<Node>\n    // Margins are added to the chart's dimensions, so that mouse detection\n    // also works inside the margins, omit if that's not what you want.\n    // When including the margins, we recommend to set a `detectionRadius` as well.\n    margin?: Margin\n    width: number\n    height: number\n    debug?: boolean\n}) =>\n    useMemo(\n        () =>\n            computeMesh({\n                points: computeMeshPoints<Node>({ points, margin, getNodePosition }),\n                width,\n                height,\n                margin,\n                debug,\n            }),\n        [points, width, height, margin, debug]\n    )\n\nexport const useVoronoi = ({\n    data,\n    width,\n    height,\n    xDomain,\n    yDomain,\n}: {\n    data: VoronoiDatum[]\n    width: number\n    height: number\n    xDomain: VoronoiCommonProps['xDomain']\n    yDomain: VoronoiCommonProps['yDomain']\n}) => {\n    const xScale = useMemo(() => scaleLinear().domain(xDomain).range([0, width]), [xDomain, width])\n    const yScale = useMemo(\n        () => scaleLinear().domain(yDomain).range([0, height]),\n        [yDomain, height]\n    )\n\n    const points = useMemo(\n        () =>\n            data.map(d => ({\n                x: xScale(d.x),\n                y: yScale(d.y),\n                data: d,\n            })),\n        [data, xScale, yScale]\n    )\n\n    return useMemo(() => {\n        const delaunay = Delaunay.from(points.map(p => [p.x, p.y]))\n        const voronoi = delaunay.voronoi([0, 0, width, height])\n\n        return {\n            points,\n            delaunay,\n            voronoi,\n        }\n    }, [points, width, height])\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const useVoronoiLayerContext = ({\n    points,\n    delaunay,\n    voronoi,\n}: VoronoiCustomLayerProps): VoronoiCustomLayerProps =>\n    useMemo(\n        () => ({\n            points,\n            delaunay,\n            voronoi,\n        }),\n        [points, delaunay, voronoi]\n    )\n\nexport const useMeshEvents = <Node, ElementType extends Element>({\n    elementRef,\n    nodes,\n    getNodePosition = defaultNodePositionAccessor as NodePositionAccessor<Node>,\n    delaunay,\n    setCurrent: setCurrentNode,\n    margin = defaultMargin,\n    detectionRadius = Infinity,\n    isInteractive = true,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n    enableTouchCrosshair = false,\n    tooltip,\n    tooltipPosition = defaultTooltipPosition,\n    tooltipAnchor = defaultTooltipAnchor,\n}: {\n    elementRef: MutableRefObject<ElementType | null>\n    nodes: readonly Node[]\n    getNodePosition?: NodePositionAccessor<Node>\n    delaunay: Delaunay<Node>\n    setCurrent?: (node: Node | null) => void\n    margin?: Margin\n    detectionRadius?: number\n    isInteractive?: boolean\n    onMouseEnter?: NodeMouseHandler<Node>\n    onMouseMove?: NodeMouseHandler<Node>\n    onMouseLeave?: NodeMouseHandler<Node>\n    onClick?: NodeMouseHandler<Node>\n    onTouchStart?: NodeTouchHandler<Node>\n    onTouchMove?: NodeTouchHandler<Node>\n    onTouchEnd?: NodeTouchHandler<Node>\n    enableTouchCrosshair?: boolean\n    tooltip?: (node: Node) => JSX.Element\n    tooltipPosition?: TooltipPosition\n    tooltipAnchor?: TooltipAnchor\n}) => {\n    // Store the index of the current point and the current node.\n    const [current, setCurrent] = useState<[number, Node] | null>(null)\n\n    // Keep track of the previous index and node, this is needed as we don't have enter/leave events\n    // for each node because we use a single rect element to capture events.\n    const previous = useRef<[number, Node] | null>(null)\n\n    useEffect(() => {\n        previous.current = current\n    }, [previous, current])\n\n    const findNode = useCallback(\n        (event: MouseEvent<ElementType> | TouchEvent<ElementType>): null | [number, Node] => {\n            if (!elementRef.current) return null\n\n            const [x, y] = getRelativeCursor(elementRef.current, event)\n\n            let index: number | null = delaunay.find(x, y)\n            let node = index !== undefined ? nodes[index] : null\n\n            if (node && detectionRadius !== Infinity) {\n                const [nodeX, nodeY] = getNodePosition(node)\n                if (getDistance(x, y, nodeX + margin.left, nodeY + margin.top) > detectionRadius) {\n                    index = null\n                    node = null\n                }\n            }\n\n            if (index === null || node === null) return null\n\n            return [index, node]\n        },\n        [elementRef, delaunay, nodes, getNodePosition, margin, detectionRadius]\n    )\n\n    const { showTooltipAt, showTooltipFromEvent, hideTooltip } = useTooltip()\n    const showTooltip = useMemo(() => {\n        if (!tooltip) return undefined\n\n        if (tooltipPosition === 'cursor') {\n            // Following the cursor.\n            return (node: Node, event: MouseEvent<ElementType>) => {\n                showTooltipFromEvent(tooltip(node), event, tooltipAnchor)\n            }\n        }\n\n        // Fixed at the node's position.\n        return (node: Node) => {\n            const [x, y] = getNodePosition(node)\n            showTooltipAt(tooltip(node), [x + margin.left, y + margin.top], tooltipAnchor)\n        }\n    }, [\n        showTooltipAt,\n        showTooltipFromEvent,\n        tooltip,\n        tooltipPosition,\n        tooltipAnchor,\n        getNodePosition,\n        margin,\n    ])\n\n    // Mouse enter only occurs when entering the main element,\n    // not for each node.\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<ElementType>) => {\n            const match = findNode(event)\n\n            setCurrent(match)\n            setCurrentNode?.(match ? match[1] : null)\n\n            if (match) {\n                const node = match[1]\n\n                showTooltip?.(node, event)\n                onMouseEnter?.(match[1], event)\n            }\n        },\n        [findNode, setCurrent, setCurrentNode, showTooltip, onMouseEnter]\n    )\n\n    // Handle mouse enter/move/leave, relying on `previous` to simulate events.\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<ElementType>) => {\n            const match = findNode(event)\n\n            setCurrent(match)\n\n            if (match) {\n                const [index, node] = match\n\n                setCurrentNode?.(node)\n                showTooltip?.(node, event)\n\n                if (previous.current) {\n                    const [previousIndex, previousNode] = previous.current\n                    if (index !== previousIndex) {\n                        // Simulate an enter event if the previous index is different.\n                        onMouseLeave?.(previousNode, event)\n                    } else {\n                        // If it's the same, trigger a regular move event.\n                        onMouseMove?.(node, event)\n                    }\n                } else {\n                    onMouseEnter?.(node, event)\n                }\n            } else {\n                setCurrentNode?.(null)\n                hideTooltip?.()\n\n                if (previous.current) {\n                    // Simulate a leave event if there's a previous node.\n                    onMouseLeave?.(previous.current[1], event)\n                }\n            }\n        },\n        [\n            findNode,\n            setCurrent,\n            previous,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n            showTooltip,\n            hideTooltip,\n        ]\n    )\n\n    // Mouse leave only occurs when leaving the main element,\n    // not for each node.\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<ElementType>) => {\n            setCurrent(null)\n            setCurrentNode?.(null)\n\n            hideTooltip()\n\n            if (onMouseLeave && previous.current) {\n                onMouseLeave(previous.current[1], event)\n            }\n        },\n        [setCurrent, setCurrentNode, previous, hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<ElementType>) => {\n            const match = findNode(event)\n\n            setCurrent(match)\n\n            match && onClick?.(match[1], event)\n        },\n        [findNode, setCurrent, onClick]\n    )\n\n    const handleTouchStart = useCallback(\n        (event: TouchEvent<ElementType>) => {\n            const match = findNode(event)\n\n            if (enableTouchCrosshair) {\n                setCurrent(match)\n                setCurrentNode?.(match ? match[1] : null)\n            }\n\n            match && onTouchStart?.(match[1], event)\n        },\n        [findNode, setCurrent, setCurrentNode, enableTouchCrosshair, onTouchStart]\n    )\n\n    const handleTouchMove = useCallback(\n        (event: TouchEvent<ElementType>) => {\n            const match = findNode(event)\n\n            if (enableTouchCrosshair) {\n                setCurrent(match)\n                setCurrentNode?.(match ? match[1] : null)\n            }\n\n            match && onTouchMove?.(match[1], event)\n        },\n        [findNode, setCurrent, setCurrentNode, enableTouchCrosshair, onTouchMove]\n    )\n\n    const handleTouchEnd = useCallback(\n        (event: TouchEvent<SVGRectElement>) => {\n            if (enableTouchCrosshair) {\n                setCurrent(null)\n                setCurrentNode?.(null)\n            }\n\n            if (onTouchEnd && previous.current) {\n                onTouchEnd(previous.current[1], event)\n            }\n        },\n        [enableTouchCrosshair, setCurrent, setCurrentNode, onTouchEnd, previous]\n    )\n\n    return {\n        current,\n        handleMouseEnter: isInteractive ? handleMouseEnter : undefined,\n        handleMouseMove: isInteractive ? handleMouseMove : undefined,\n        handleMouseLeave: isInteractive ? handleMouseLeave : undefined,\n        handleClick: isInteractive ? handleClick : undefined,\n        handleTouchStart: isInteractive ? handleTouchStart : undefined,\n        handleTouchMove: isInteractive ? handleTouchMove : undefined,\n        handleTouchEnd: isInteractive ? handleTouchEnd : undefined,\n    }\n}\n\n/**\n * Compute a voronoi mesh and corresponding events.\n */\nexport const useMesh = <Node, ElementType extends Element>({\n    elementRef,\n    nodes,\n    getNodePosition,\n    width,\n    height,\n    margin = defaultMargin,\n    isInteractive = true,\n    detectionRadius = Infinity,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    tooltipPosition = defaultTooltipPosition,\n    tooltipAnchor = defaultTooltipAnchor,\n    debug = false,\n}: {\n    elementRef: MutableRefObject<ElementType | null>\n    nodes: readonly Node[]\n    getNodePosition?: NodePositionAccessor<Node>\n    width: number\n    height: number\n    margin?: Margin\n    isInteractive?: boolean\n    detectionRadius?: number\n    setCurrent?: (node: Node | null) => void\n    onMouseEnter?: NodeMouseHandler<Node>\n    onMouseMove?: NodeMouseHandler<Node>\n    onMouseLeave?: NodeMouseHandler<Node>\n    onClick?: NodeMouseHandler<Node>\n    tooltip?: (node: Node) => JSX.Element\n    tooltipPosition?: TooltipPosition\n    tooltipAnchor?: TooltipAnchor\n    debug?: boolean\n}) => {\n    const { delaunay, voronoi } = useVoronoiMesh<Node>({\n        points: nodes,\n        getNodePosition,\n        width,\n        height,\n        margin,\n        debug,\n    })\n\n    const { handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick, current } =\n        useMeshEvents<Node, ElementType>({\n            elementRef,\n            nodes,\n            margin,\n            setCurrent,\n            delaunay,\n            detectionRadius,\n            isInteractive,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n            onClick,\n            tooltip,\n            tooltipPosition,\n            tooltipAnchor,\n        })\n\n    return {\n        delaunay,\n        voronoi,\n        current,\n        handleMouseEnter,\n        handleMouseMove,\n        handleMouseLeave,\n        handleClick,\n    }\n}\n", "import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { VoronoiSvgProps, VoronoiLayerId } from './types'\nimport { defaultVoronoiProps } from './props'\nimport { useVoronoi, useVoronoiLayerContext } from './hooks'\n\ntype InnerVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>\n\nconst InnerVoronoi = ({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    layers = defaultVoronoiProps.layers,\n    xDomain = defaultVoronoiProps.xDomain,\n    yDomain = defaultVoronoiProps.yDomain,\n    enableLinks = defaultVoronoiProps.enableLinks,\n    linkLineWidth = defaultVoronoiProps.linkLineWidth,\n    linkLineColor = defaultVoronoiProps.linkLineColor,\n    enableCells = defaultVoronoiProps.enableCells,\n    cellLineWidth = defaultVoronoiProps.cellLineWidth,\n    cellLineColor = defaultVoronoiProps.cellLineColor,\n    enablePoints = defaultVoronoiProps.enableCells,\n    pointSize = defaultVoronoiProps.pointSize,\n    pointColor = defaultVoronoiProps.pointColor,\n    role = defaultVoronoiProps.role,\n}: InnerVoronoiProps) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { points, delaunay, voronoi } = useVoronoi({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        xDomain,\n        yDomain,\n    })\n\n    const layerById: Record<VoronoiLayerId, ReactNode> = {\n        links: null,\n        cells: null,\n        points: null,\n        bounds: null,\n    }\n\n    if (enableLinks && layers.includes('links')) {\n        layerById.links = (\n            <path\n                key=\"links\"\n                stroke={linkLineColor}\n                strokeWidth={linkLineWidth}\n                fill=\"none\"\n                d={delaunay.render()}\n            />\n        )\n    }\n\n    if (enableCells && layers.includes('cells')) {\n        layerById.cells = (\n            <path\n                key=\"cells\"\n                d={voronoi.render()}\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n            />\n        )\n    }\n\n    if (enablePoints && layers.includes('points')) {\n        layerById.points = (\n            <path\n                key=\"points\"\n                stroke=\"none\"\n                fill={pointColor}\n                d={delaunay.renderPoints(undefined, pointSize / 2)}\n            />\n        )\n    }\n\n    if (layers.includes('bounds')) {\n        layerById.bounds = (\n            <path\n                key=\"bounds\"\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n                d={voronoi.renderBounds()}\n            />\n        )\n    }\n\n    const layerContext = useVoronoiLayerContext({\n        points,\n        delaunay,\n        voronoi,\n    })\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (layerById[layer as VoronoiLayerId] !== undefined) {\n                    return layerById[layer as VoronoiLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Voronoi = ({\n    theme,\n    ...otherProps\n}: Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>) => (\n    <Container isInteractive={false} animate={false} theme={theme}>\n        <InnerVoronoi {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { VoronoiSvgProps } from './types'\nimport { Voronoi } from './Voronoi'\n\ntype ResponsiveVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data'>\n\nexport const ResponsiveVoronoi = (props: ResponsiveVoronoiProps) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Voronoi width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n", "import { useMemo, useRef } from 'react'\nimport { Margin } from '@nivo/core'\nimport { TooltipAnchor, TooltipPosition } from '@nivo/tooltip'\nimport { useVoronoiMesh, useMeshEvents } from './hooks'\nimport { NodeMouseHandler, NodePositionAccessor, NodeTouchHandler } from './types'\nimport { defaultMargin, defaultTooltipAnchor, defaultTooltipPosition } from './defaults'\n\ninterface MeshProps<Node> {\n    nodes: Node[]\n    width: number\n    height: number\n    margin?: Margin\n    getNodePosition?: NodePositionAccessor<Node>\n    // Can be used in case you want to keep track of the current node externally,\n    // the current node being the last hovered node.\n    setCurrent?: (node: Node | null) => void\n    onMouseEnter?: NodeMouseHandler<Node>\n    onMouseMove?: NodeMouseHandler<Node>\n    onMouseLeave?: NodeMouseHandler<Node>\n    onClick?: NodeMouseHandler<Node>\n    onTouchStart?: NodeTouchHandler<Node>\n    onTouchMove?: NodeTouchHandler<Node>\n    onTouchEnd?: NodeTouchHandler<Node>\n    enableTouchCrosshair?: boolean\n    // Restrict the node detection to a given radius, default to `Infinity`.\n    detectionRadius?: number\n    // If specified, tooltips are going to be handled automatically.\n    tooltip?: (node: Node) => JSX.Element\n    tooltipPosition?: TooltipPosition\n    tooltipAnchor?: TooltipAnchor\n    // Display the voronoi mesh for debugging purpose.\n    debug?: boolean\n}\n\nexport const Mesh = <Node,>({\n    nodes,\n    width,\n    height,\n    margin = defaultMargin,\n    getNodePosition,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n    enableTouchCrosshair = false,\n    detectionRadius = Infinity,\n    tooltip,\n    tooltipPosition = defaultTooltipPosition,\n    tooltipAnchor = defaultTooltipAnchor,\n    debug,\n}: MeshProps<Node>) => {\n    const elementRef = useRef<SVGRectElement | null>(null)\n\n    const { delaunay, voronoi } = useVoronoiMesh<Node>({\n        points: nodes,\n        getNodePosition,\n        width,\n        height,\n        margin,\n        debug,\n    })\n\n    const {\n        current,\n        handleMouseEnter,\n        handleMouseMove,\n        handleMouseLeave,\n        handleClick,\n        handleTouchStart,\n        handleTouchMove,\n        handleTouchEnd,\n    } = useMeshEvents<Node, SVGRectElement>({\n        elementRef,\n        nodes,\n        delaunay,\n        margin,\n        detectionRadius,\n        setCurrent,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        onTouchStart,\n        onTouchMove,\n        onTouchEnd,\n        enableTouchCrosshair,\n        tooltip,\n        tooltipPosition,\n        tooltipAnchor,\n    })\n\n    const voronoiPath = useMemo(() => {\n        if (debug && voronoi) return voronoi.render()\n        return undefined\n    }, [debug, voronoi])\n\n    return (\n        <g ref={elementRef} transform={`translate(${-margin.left},${-margin.top})`}>\n            {debug && voronoi && (\n                <>\n                    <path d={voronoiPath} stroke=\"red\" strokeWidth={1} opacity={0.75} />\n                    {detectionRadius < Infinity && (\n                        <path\n                            stroke=\"red\"\n                            strokeWidth={0.35}\n                            fill=\"none\"\n                            d={delaunay.renderPoints(undefined, detectionRadius)}\n                        />\n                    )}\n                    {/* highlight the current cell */}\n                    {current && (\n                        <path fill=\"pink\" opacity={0.35} d={voronoi.renderCell(current[0])} />\n                    )}\n                </>\n            )}\n            {/* transparent rect to intercept mouse events */}\n            <rect\n                data-ref=\"mesh-interceptor\"\n                width={margin.left + width + margin.right}\n                height={margin.top + height + margin.bottom}\n                fill=\"red\"\n                opacity={0}\n                style={{ cursor: 'auto' }}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onTouchStart={handleTouchStart}\n                onTouchMove={handleTouchMove}\n                onTouchEnd={handleTouchEnd}\n                onClick={handleClick}\n            />\n        </g>\n    )\n}\n", "import { Delaunay, Voronoi } from 'd3-delaunay'\n\nexport const renderVoronoiToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.75\n    ctx.beginPath()\n    voronoi.render(ctx)\n    ctx.strokeStyle = 'red'\n    ctx.lineWidth = 1\n    ctx.stroke()\n\n    ctx.restore()\n}\n\nexport const renderDelaunayPointsToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    delaunay: Delaunay<Delaunay.Point>,\n    radius: number\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.15\n    ctx.beginPath()\n    delaunay.renderPoints(ctx, radius)\n    ctx.strokeStyle = 'red'\n    ctx.lineWidth = 1\n    ctx.stroke()\n\n    ctx.restore()\n}\n\nexport const renderVoronoiCellToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>,\n    index: number\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.35\n    ctx.beginPath()\n    voronoi.renderCell(index, ctx)\n    ctx.fillStyle = 'pink'\n    ctx.fill()\n\n    ctx.restore()\n}\n\nexport const renderDebugToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        delaunay,\n        voronoi,\n        detectionRadius,\n        index,\n    }: {\n        delaunay: Delaunay<Delaunay.Point>\n        voronoi: Voronoi<Delaunay.Point>\n        detectionRadius: number\n        index: number | null\n    }\n) => {\n    renderVoronoiToCanvas(ctx, voronoi)\n\n    if (detectionRadius < Infinity) {\n        renderDelaunayPointsToCanvas(ctx, delaunay, detectionRadius)\n    }\n\n    if (index !== null) {\n        renderVoronoiCellToCanvas(ctx, voronoi, index)\n    }\n}\n", "import { createElement, MouseEvent, useCallback, useMemo, useState } from 'react'\nimport { hierarchy as d3Hierarchy, cluster as d3Cluster, tree as d3Tree } from 'd3-hierarchy'\nimport { scaleLinear, ScaleLinear } from 'd3-scale'\nimport {\n    link as d3Link,\n    CurveFactory,\n    curveLinear,\n    curveBumpX,\n    curveBumpY,\n    curveStep,\n    curveStepBefore,\n    curveStepAfter,\n} from 'd3-shape'\nimport { Margin, usePropertyAccessor, useTheme } from '@nivo/core'\nimport { TooltipAnchor, TooltipPosition, useTooltip } from '@nivo/tooltip'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport {\n    DefaultDatum,\n    HierarchyTreeNode,\n    HierarchyTreeLink,\n    TreeDataProps,\n    CommonProps,\n    Layout,\n    ComputedNode,\n    ComputedLink,\n    NodeMouseEventHandler,\n    NodeTooltip,\n    IntermediateComputedLink,\n    LinkThicknessFunction,\n    LinkMouseEventHandler,\n    LinkTooltip,\n    IntermediateComputedNode,\n    CurrentNodeSetter,\n    NodeSizeModifierFunction,\n    LinkThicknessModifierFunction,\n    TreeMode,\n    LinkCurve,\n} from './types'\nimport { commonDefaultProps } from './defaults'\n\nexport const useRoot = <Datum>({\n    data,\n    mode,\n    getIdentity,\n}: {\n    data: TreeDataProps<Datum>['data']\n    mode: TreeMode\n    getIdentity: (node: Datum) => string\n}) =>\n    useMemo(() => {\n        const root = d3Hierarchy<Datum>(data) as HierarchyTreeNode<Datum>\n        const cluster = mode === 'tree' ? d3Tree<Datum>() : d3Cluster<Datum>()\n\n        root.eachBefore(node => {\n            const ancestors = node\n                .ancestors()\n                .filter(ancestor => ancestor !== node)\n                .reverse()\n            const ancestorIds = ancestors.map(ancestor => getIdentity(ancestor.data))\n\n            node.ancestorIds = ancestorIds\n            node.uid = [...ancestorIds, getIdentity(node.data)].join('.')\n            node.ancestorUids = ancestors.map(ancestor => ancestor.uid!)\n        })\n\n        root.each(node => {\n            node.descendantUids = node\n                .descendants()\n                .filter(descendant => descendant !== node)\n                .map(descendant => descendant.uid!)\n        })\n\n        cluster(root)\n\n        return root\n    }, [data, mode, getIdentity])\n\n/**\n * By default, the x/y positions are computed for a 0~1 range,\n * so that we can easily change the layout without having to\n * recompute the nodes.\n */\nconst useCartesianScales = ({\n    width,\n    height,\n    layout,\n}: {\n    width: number\n    height: number\n    layout: Layout\n}) =>\n    useMemo(() => {\n        const xScale = scaleLinear().domain([0, 1])\n        const yScale = scaleLinear().domain([0, 1])\n\n        if (layout === 'top-to-bottom') {\n            xScale.range([0, width])\n            yScale.range([0, height])\n        } else if (layout === 'right-to-left') {\n            xScale.range([width, 0])\n            yScale.range([0, height])\n        } else if (layout === 'bottom-to-top') {\n            xScale.range([width, 0])\n            yScale.range([height, 0])\n        } else if (layout === 'left-to-right') {\n            xScale.range([0, width])\n            yScale.range([height, 0])\n        }\n\n        return {\n            xScale,\n            yScale,\n        }\n    }, [width, height, layout])\n\nconst useNodeSize = <Datum>(size: Exclude<CommonProps<Datum>['nodeSize'], undefined>) =>\n    useMemo(() => {\n        if (typeof size === 'function') return size\n        return () => size\n    }, [size])\n\nconst useNodeSizeModifier = <Datum>(size?: NodeSizeModifierFunction<Datum> | number) =>\n    useMemo(() => {\n        if (size === undefined) return (node: ComputedNode<Datum>) => node.size\n        if (typeof size === 'function') return size\n        return () => size\n    }, [size])\n\nconst useNodes = <Datum>({\n    root,\n    xScale,\n    yScale,\n    layout,\n    getIdentity,\n    nodeSize,\n    activeNodeSize,\n    inactiveNodeSize,\n    nodeColor,\n    fixNodeColorAtDepth,\n}: {\n    root: HierarchyTreeNode<Datum>\n    xScale: ScaleLinear<number, number>\n    yScale: ScaleLinear<number, number>\n    layout: Layout\n    getIdentity: (node: Datum) => string\n    nodeSize: Exclude<CommonProps<Datum>['nodeSize'], undefined>\n    activeNodeSize?: CommonProps<Datum>['activeNodeSize']\n    inactiveNodeSize?: CommonProps<Datum>['inactiveNodeSize']\n    nodeColor: Exclude<CommonProps<Datum>['nodeColor'], undefined>\n    fixNodeColorAtDepth: number\n}) => {\n    const intermediateNodes = useMemo<IntermediateComputedNode<Datum>[]>(() => {\n        return root.descendants().map(node => {\n            let x: number\n            let y: number\n            if (layout === 'top-to-bottom' || layout === 'bottom-to-top') {\n                x = xScale(node.x!)\n                y = yScale(node.y!)\n            } else {\n                x = xScale(node.y!)\n                y = yScale(node.x!)\n            }\n\n            const id = getIdentity(node.data)\n\n            return {\n                path: [...node.ancestorIds!, id],\n                uid: node.uid!,\n                isRoot: node.depth === 0,\n                isLeaf: node.height === 0,\n                ancestorIds: node.ancestorIds!,\n                ancestorUids: node.ancestorUids!,\n                descendantUids: node.descendantUids!,\n                id,\n                data: node.data,\n                depth: node.depth,\n                height: node.height,\n                x,\n                y,\n            }\n        })\n    }, [root, getIdentity, layout, xScale, yScale])\n\n    const getNodeSize = useNodeSize<Datum>(nodeSize)\n    const getActiveNodeSize = useNodeSizeModifier<Datum>(activeNodeSize)\n    const getInactiveNodeSize = useNodeSizeModifier<Datum>(inactiveNodeSize)\n\n    const getNodeColorBase = useOrdinalColorScale(nodeColor, 'uid')\n    // Wrap the default color function to support `getNodeColorAtDepth`.\n    const getNodeColor = useMemo(() => {\n        if (fixNodeColorAtDepth === Infinity) return getNodeColorBase\n\n        return (\n            node: IntermediateComputedNode<Datum>,\n            nodeByUid: Record<string, ComputedNode<Datum>>\n        ) => {\n            if (\n                node.depth <= 0 ||\n                node.depth <= fixNodeColorAtDepth ||\n                node.ancestorUids.length === 0\n            )\n                return getNodeColorBase(node)\n\n            const parentUid = node.ancestorUids[node.ancestorUids.length - 1]\n            const parent = nodeByUid[parentUid]\n            if (parent === undefined) return getNodeColorBase(node)\n\n            return parent.color\n        }\n    }, [getNodeColorBase, fixNodeColorAtDepth])\n\n    const [activeNodeUids, setActiveNodeUids] = useState<string[]>([])\n\n    const computed = useMemo(() => {\n        const nodeByUid: Record<string, ComputedNode<Datum>> = {}\n\n        const nodes: ComputedNode<Datum>[] = intermediateNodes.map(intermediateNode => {\n            const computedNode: ComputedNode<Datum> = {\n                ...intermediateNode,\n                size: getNodeSize(intermediateNode),\n                color: getNodeColor(intermediateNode, nodeByUid),\n                isActive: null,\n            }\n\n            if (activeNodeUids.length > 0) {\n                computedNode.isActive = activeNodeUids.includes(computedNode.uid)\n                if (computedNode.isActive) {\n                    computedNode.size = getActiveNodeSize(computedNode)\n                } else {\n                    computedNode.size = getInactiveNodeSize(computedNode)\n                }\n            }\n\n            nodeByUid[computedNode.uid] = computedNode\n\n            return computedNode\n        })\n\n        return { nodes, nodeByUid }\n    }, [\n        intermediateNodes,\n        getNodeSize,\n        getActiveNodeSize,\n        getInactiveNodeSize,\n        getNodeColor,\n        activeNodeUids,\n    ])\n\n    return { ...computed, activeNodeUids, setActiveNodeUids }\n}\n\nconst useLinkThicknessModifier = <Datum>(\n    thickness?: LinkThicknessModifierFunction<Datum> | number\n) =>\n    useMemo(() => {\n        if (thickness === undefined) return (link: ComputedLink<Datum>) => link.thickness\n        if (typeof thickness === 'function') return thickness\n        return () => thickness\n    }, [thickness])\n\nconst useLinks = <Datum>({\n    root,\n    nodeByUid,\n    activeNodeUids,\n    linkThickness,\n    activeLinkThickness,\n    inactiveLinkThickness,\n    linkColor,\n}: {\n    root: HierarchyTreeNode<Datum>\n    nodeByUid: Record<string, ComputedNode<Datum>>\n    activeNodeUids: readonly string[]\n    linkThickness: Exclude<CommonProps<Datum>['linkThickness'], undefined>\n    activeLinkThickness?: CommonProps<Datum>['activeLinkThickness']\n    inactiveLinkThickness?: CommonProps<Datum>['inactiveLinkThickness']\n    linkColor: Exclude<CommonProps<Datum>['linkColor'], undefined>\n}) => {\n    const intermediateLinks = useMemo<IntermediateComputedLink<Datum>[]>(() => {\n        return (root.links() as HierarchyTreeLink<Datum>[]).map(link => {\n            return {\n                id: `${link.source.uid}:${link.target.uid}`,\n                // Replace with computed nodes.\n                source: nodeByUid[link.source.uid!],\n                target: nodeByUid[link.target.uid!],\n            }\n        })\n    }, [root, nodeByUid])\n\n    const getLinkThickness: LinkThicknessFunction<Datum> = useMemo(() => {\n        if (typeof linkThickness === 'function') return linkThickness\n        return () => linkThickness\n    }, [linkThickness])\n    const getActiveLinkThickness = useLinkThicknessModifier(activeLinkThickness)\n    const getInactiveLinkThickness = useLinkThicknessModifier(inactiveLinkThickness)\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor(linkColor, theme)\n\n    const [activeLinkIds, setActiveLinkIds] = useState<string[]>([])\n\n    const links = useMemo(() => {\n        return intermediateLinks.map(intermediateLink => {\n            const computedLink: ComputedLink<Datum> = {\n                ...intermediateLink,\n                thickness: getLinkThickness(intermediateLink),\n                color: getLinkColor(intermediateLink),\n                isActive: null,\n            }\n\n            if (activeNodeUids.length > 0) {\n                computedLink.isActive = activeLinkIds.includes(computedLink.id)\n                if (computedLink.isActive) {\n                    computedLink.thickness = getActiveLinkThickness(computedLink)\n                } else {\n                    computedLink.thickness = getInactiveLinkThickness(computedLink)\n                }\n            }\n\n            return computedLink\n        })\n    }, [\n        intermediateLinks,\n        getLinkThickness,\n        getActiveLinkThickness,\n        getInactiveLinkThickness,\n        getLinkColor,\n        activeNodeUids.length,\n        activeLinkIds,\n    ])\n\n    return {\n        links,\n        setActiveLinkIds,\n    }\n}\n\nconst useLinkGenerator = ({ layout, curve }: { layout: Layout; curve: LinkCurve }) =>\n    useMemo(() => {\n        let curveFactory: CurveFactory = curveLinear\n\n        if (curve === 'bump') {\n            if (layout === 'top-to-bottom' || layout === 'bottom-to-top') {\n                curveFactory = curveBumpY\n            } else {\n                curveFactory = curveBumpX\n            }\n        } else if (curve === 'step') {\n            curveFactory = curveStep\n        } else if (curve === 'step-before') {\n            curveFactory = curveStepBefore\n        } else if (curve === 'step-after') {\n            curveFactory = curveStepAfter\n        }\n\n        return d3Link(curveFactory)\n    }, [layout, curve])\n\nconst useSetCurrentNode = <Datum>({\n    setActiveNodeUids,\n    highlightAncestorNodes,\n    highlightDescendantNodes,\n    links,\n    setActiveLinkIds,\n    highlightAncestorLinks,\n    highlightDescendantLinks,\n}: {\n    setActiveNodeUids: (uids: string[]) => void\n    highlightAncestorNodes: boolean\n    highlightDescendantNodes: boolean\n    links: readonly ComputedLink<Datum>[]\n    setActiveLinkIds: (ids: string[]) => void\n    highlightAncestorLinks: boolean\n    highlightDescendantLinks: boolean\n}) =>\n    useCallback(\n        (node: ComputedNode<Datum> | null) => {\n            if (node === null) {\n                setActiveNodeUids([])\n                setActiveLinkIds([])\n            } else {\n                let nodeUids: string[] = [node.uid]\n                if (highlightAncestorNodes) {\n                    nodeUids = [...nodeUids, ...node.ancestorUids]\n                }\n                if (highlightDescendantNodes) {\n                    nodeUids = [...nodeUids, ...node.descendantUids]\n                }\n                setActiveNodeUids(nodeUids)\n\n                const linkIds: string[] = []\n                if (highlightAncestorLinks) {\n                    links\n                        .filter(link => {\n                            return (\n                                link.target.uid === node.uid ||\n                                node.ancestorUids.includes(link.target.uid)\n                            )\n                        })\n                        .forEach(link => {\n                            linkIds.push(link.id)\n                        })\n                }\n                if (highlightDescendantLinks) {\n                    links\n                        .filter(link => {\n                            return (\n                                link.source.uid === node.uid ||\n                                node.descendantUids.includes(link.source.uid)\n                            )\n                        })\n                        .forEach(link => {\n                            linkIds.push(link.id)\n                        })\n                }\n                setActiveLinkIds(linkIds)\n            }\n        },\n        [\n            setActiveNodeUids,\n            highlightAncestorNodes,\n            highlightDescendantNodes,\n            links,\n            setActiveLinkIds,\n            highlightAncestorLinks,\n            highlightDescendantLinks,\n        ]\n    )\n\nexport const useTree = <Datum = DefaultDatum>({\n    data,\n    width,\n    height,\n    identity = commonDefaultProps.identity,\n    mode = commonDefaultProps.mode,\n    layout = commonDefaultProps.layout,\n    nodeSize = commonDefaultProps.nodeSize,\n    activeNodeSize,\n    inactiveNodeSize,\n    nodeColor = commonDefaultProps.nodeColor,\n    fixNodeColorAtDepth = commonDefaultProps.fixNodeColorAtDepth,\n    highlightAncestorNodes = commonDefaultProps.highlightAncestorNodes,\n    highlightDescendantNodes = commonDefaultProps.highlightDescendantNodes,\n    linkCurve = commonDefaultProps.linkCurve,\n    linkThickness = commonDefaultProps.linkThickness,\n    linkColor = commonDefaultProps.linkColor,\n    activeLinkThickness,\n    inactiveLinkThickness,\n    highlightAncestorLinks = commonDefaultProps.highlightAncestorLinks,\n    highlightDescendantLinks = commonDefaultProps.highlightDescendantLinks,\n}: {\n    data: TreeDataProps<Datum>['data']\n    width: number\n    height: number\n    identity?: CommonProps<Datum>['identity']\n    mode?: TreeMode\n    layout?: Layout\n    nodeSize?: CommonProps<Datum>['nodeSize']\n    activeNodeSize?: CommonProps<Datum>['activeNodeSize']\n    inactiveNodeSize?: CommonProps<Datum>['inactiveNodeSize']\n    nodeColor?: CommonProps<Datum>['nodeColor']\n    fixNodeColorAtDepth?: number\n    highlightAncestorNodes?: boolean\n    highlightDescendantNodes?: boolean\n    linkCurve?: LinkCurve\n    linkThickness?: CommonProps<Datum>['linkThickness']\n    activeLinkThickness?: CommonProps<Datum>['activeLinkThickness']\n    inactiveLinkThickness?: CommonProps<Datum>['inactiveLinkThickness']\n    linkColor?: CommonProps<Datum>['linkColor']\n    highlightAncestorLinks?: boolean\n    highlightDescendantLinks?: boolean\n}) => {\n    const getIdentity = usePropertyAccessor(identity)\n    const root = useRoot<Datum>({ data, mode, getIdentity })\n\n    const { xScale, yScale } = useCartesianScales({ width, height, layout })\n    const { nodes, nodeByUid, activeNodeUids, setActiveNodeUids } = useNodes<Datum>({\n        root,\n        xScale,\n        yScale,\n        layout,\n        getIdentity,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        fixNodeColorAtDepth,\n    })\n\n    const linkGenerator = useLinkGenerator({ layout, curve: linkCurve })\n    const { links, setActiveLinkIds } = useLinks<Datum>({\n        root,\n        nodeByUid,\n        activeNodeUids,\n        linkThickness,\n        activeLinkThickness,\n        inactiveLinkThickness,\n        linkColor,\n    })\n\n    const setCurrentNode = useSetCurrentNode<Datum>({\n        setActiveNodeUids,\n        highlightAncestorNodes,\n        highlightDescendantNodes,\n        links,\n        setActiveLinkIds,\n        highlightAncestorLinks,\n        highlightDescendantLinks,\n    })\n\n    return {\n        nodes,\n        nodeByUid,\n        links,\n        linkGenerator,\n        setCurrentNode,\n    }\n}\n\n/**\n * This hook may generates mouse event handlers for a node according to the main chart props.\n * It's used for the default `Node` component and may be used for custom nodes\n * to simplify their implementation.\n */\nexport const useNodeMouseEventHandlers = <Datum>(\n    node: ComputedNode<Datum>,\n    {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setCurrentNode,\n        tooltip,\n        tooltipPosition,\n        tooltipAnchor,\n        margin,\n    }: {\n        isInteractive: boolean\n        onMouseEnter?: NodeMouseEventHandler<Datum>\n        onMouseMove?: NodeMouseEventHandler<Datum>\n        onMouseLeave?: NodeMouseEventHandler<Datum>\n        onClick?: NodeMouseEventHandler<Datum>\n        setCurrentNode: CurrentNodeSetter<Datum>\n        tooltip?: NodeTooltip<Datum>\n        tooltipPosition: TooltipPosition\n        tooltipAnchor: TooltipAnchor\n        margin: Margin\n    }\n) => {\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const showTooltip = useMemo(() => {\n        if (!tooltip) return undefined\n\n        if (tooltipPosition === 'fixed') {\n            return () => {\n                const { x, y } = node\n                showTooltipAt(\n                    createElement(tooltip, {\n                        node,\n                    }),\n                    [x + margin.left, y + margin.top],\n                    tooltipAnchor\n                )\n            }\n        }\n\n        return (event: MouseEvent) => {\n            showTooltipFromEvent(\n                createElement(tooltip, {\n                    node,\n                }),\n                event,\n                tooltipAnchor\n            )\n        }\n    }, [node, tooltip, showTooltipFromEvent, showTooltipAt, tooltipPosition, tooltipAnchor, margin])\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent) => {\n            setCurrentNode(node)\n            showTooltip?.(event)\n            onMouseEnter?.(node, event)\n        },\n        [node, showTooltip, setCurrentNode, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent) => {\n            showTooltip?.(event)\n            onMouseMove?.(node, event)\n        },\n        [node, showTooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent) => {\n            setCurrentNode(null)\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [node, hideTooltip, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent) => {\n            onClick?.(node, event)\n        },\n        [node, onClick]\n    )\n\n    return {\n        onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n        onMouseMove: isInteractive ? handleMouseMove : undefined,\n        onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n        onClick: isInteractive ? handleClick : undefined,\n    }\n}\n\n/**\n * This hook may generates mouse event handlers for a node according to the main chart props.\n * It's used for the default `Node` component and may be used for custom nodes\n * to simplify their implementation.\n */\nexport const useLinkMouseEventHandlers = <Datum>(\n    link: ComputedLink<Datum>,\n    {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n        tooltipAnchor,\n    }: {\n        isInteractive: boolean\n        onMouseEnter?: LinkMouseEventHandler<Datum>\n        onMouseMove?: LinkMouseEventHandler<Datum>\n        onMouseLeave?: LinkMouseEventHandler<Datum>\n        onClick?: LinkMouseEventHandler<Datum>\n        tooltip?: LinkTooltip<Datum>\n        tooltipAnchor: TooltipAnchor\n    }\n) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useMemo(() => {\n        if (!tooltip) return undefined\n\n        return (event: MouseEvent) => {\n            showTooltipFromEvent(\n                createElement(tooltip, {\n                    link,\n                }),\n                event,\n                tooltipAnchor\n            )\n        }\n    }, [link, tooltip, showTooltipFromEvent, tooltipAnchor])\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent) => {\n            showTooltip?.(event)\n            onMouseEnter?.(link, event)\n        },\n        [link, showTooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent) => {\n            showTooltip?.(event)\n            onMouseMove?.(link, event)\n        },\n        [link, showTooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(link, event)\n        },\n        [link, hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent) => {\n            onClick?.(link, event)\n        },\n        [link, onClick]\n    )\n\n    return {\n        onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n        onMouseMove: isInteractive ? handleMouseMove : undefined,\n        onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n        onClick: isInteractive ? handleClick : undefined,\n    }\n}\n", "import { CommonProps, TreeCanvasProps, TreeSvgProps } from './types'\nimport { Node } from './Node'\nimport { Link } from './Link'\nimport { Label } from './Label'\nimport { renderNode, renderLink, renderLabel } from './canvas'\n\nexport const commonDefaultProps: Pick<\n    CommonProps<any>,\n    | 'identity'\n    | 'mode'\n    | 'layout'\n    | 'nodeSize'\n    | 'nodeColor'\n    | 'fixNodeColorAtDepth'\n    | 'linkCurve'\n    | 'linkThickness'\n    | 'linkColor'\n    | 'enableLabel'\n    | 'label'\n    | 'labelsPosition'\n    | 'orientLabel'\n    | 'labelOffset'\n    | 'isInteractive'\n    | 'useMesh'\n    | 'meshDetectionRadius'\n    | 'debugMesh'\n    | 'highlightAncestorNodes'\n    | 'highlightDescendantNodes'\n    | 'highlightAncestorLinks'\n    | 'highlightDescendantLinks'\n    | 'nodeTooltipPosition'\n    | 'nodeTooltipAnchor'\n    | 'role'\n    | 'animate'\n    | 'motionConfig'\n> = {\n    identity: 'id',\n    mode: 'dendogram',\n    layout: 'top-to-bottom',\n    nodeSize: 12,\n    nodeColor: { scheme: 'nivo' },\n    fixNodeColorAtDepth: Infinity,\n    linkCurve: 'bump',\n    linkThickness: 1,\n    linkColor: { from: 'source.color', modifiers: [['opacity', 0.4]] },\n    enableLabel: true,\n    label: 'id',\n    labelsPosition: 'outward',\n    orientLabel: true,\n    labelOffset: 6,\n    isInteractive: true,\n    useMesh: true,\n    meshDetectionRadius: Infinity,\n    debugMesh: false,\n    highlightAncestorNodes: true,\n    highlightDescendantNodes: false,\n    highlightAncestorLinks: true,\n    highlightDescendantLinks: false,\n    nodeTooltipPosition: 'fixed',\n    nodeTooltipAnchor: 'top',\n    role: 'img',\n    animate: true,\n    motionConfig: 'gentle',\n}\n\nexport const svgDefaultProps: typeof commonDefaultProps &\n    Required<\n        Pick<\n            TreeSvgProps<any>,\n            'layers' | 'nodeComponent' | 'linkComponent' | 'labelComponent' | 'linkTooltipAnchor'\n        >\n    > = {\n    ...commonDefaultProps,\n    layers: ['links', 'nodes', 'labels', 'mesh'],\n    nodeComponent: Node,\n    linkComponent: Link,\n    labelComponent: Label,\n    linkTooltipAnchor: 'top',\n}\n\nexport const canvasDefaultProps: typeof commonDefaultProps &\n    Required<\n        Pick<\n            TreeCanvasProps<any>,\n            'layers' | 'renderNode' | 'renderLink' | 'renderLabel' | 'pixelRatio'\n        >\n    > = {\n    ...commonDefaultProps,\n    layers: ['links', 'nodes', 'labels', 'mesh'],\n    renderNode,\n    renderLink,\n    renderLabel,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n", "import { animated } from '@react-spring/web'\nimport { NodeComponentProps } from './types'\nimport { useNodeMouseEventHandlers } from './hooks'\n\nexport const Node = <Datum,>({\n    node,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setCurrentNode,\n    tooltip,\n    tooltipPosition,\n    tooltipAnchor,\n    margin,\n    animatedProps,\n}: NodeComponentProps<Datum>) => {\n    const eventHandlers = useNodeMouseEventHandlers<Datum>(node, {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setCurrentNode,\n        tooltip,\n        tooltipPosition,\n        tooltipAnchor,\n        margin,\n    })\n\n    return (\n        <animated.circle\n            data-testid={`node.${node.uid}`}\n            r={animatedProps.size.to(size => size / 2)}\n            fill={animatedProps.color}\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            {...eventHandlers}\n        />\n    )\n}\n", "import { animated, to } from '@react-spring/web'\nimport { LinkComponentProps } from './types'\nimport { useLinkMouseEventHandlers } from './hooks'\n\nexport const Link = <Datum,>({\n    link,\n    linkGenerator,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    tooltipAnchor,\n    animatedProps,\n}: LinkComponentProps<Datum>) => {\n    const eventHandlers = useLinkMouseEventHandlers<Datum>(link, {\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n        tooltipAnchor,\n    })\n\n    return (\n        <animated.path\n            data-testid={`link.${link.id}`}\n            d={to(\n                [\n                    animatedProps.sourceX,\n                    animatedProps.sourceY,\n                    animatedProps.targetX,\n                    animatedProps.targetY,\n                ],\n                (sourceX, sourceY, targetX, targetY) => {\n                    return linkGenerator({\n                        source: [sourceX, sourceY],\n                        target: [targetX, targetY],\n                    })\n                }\n            )}\n            fill=\"none\"\n            strokeWidth={animatedProps.thickness}\n            stroke={animatedProps.color}\n            {...eventHandlers}\n        />\n    )\n}\n", "import { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { LabelComponentProps } from './types'\n\nexport const Label = <Datum,>({ label, animatedProps }: LabelComponentProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g\n            data-testid={`label.${label.id}`}\n            transform={to([animatedProps.x, animatedProps.y], (x, y) => `translate(${x},${y})`)}\n        >\n            <animated.g transform={animatedProps.rotation.to(rotation => `rotate(${rotation})`)}>\n                {theme.labels.text.outlineWidth > 0 && (\n                    <text\n                        style={{\n                            ...theme.labels.text,\n                            fill: theme.labels.text.outlineColor,\n                        }}\n                        stroke={theme.labels.text.outlineColor}\n                        strokeWidth={theme.labels.text.outlineWidth * 2}\n                        strokeLinejoin=\"round\"\n                        textAnchor={label.textAnchor}\n                        dominantBaseline={label.baseline}\n                    >\n                        {label.label}\n                    </text>\n                )}\n                <text\n                    data-testid={`label.${label.id}.label`}\n                    style={theme.labels.text}\n                    textAnchor={label.textAnchor}\n                    dominantBaseline={label.baseline}\n                >\n                    {label.label}\n                </text>\n            </animated.g>\n        </animated.g>\n    )\n}\n", "import { degreesToRadians } from '@nivo/core'\nimport { drawCanvasText } from '@nivo/text'\nimport { LinkCanvasRendererProps, NodeCanvasRendererProps, LabelCanvasRendererProps } from './types'\n\nexport const renderNode = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    { node }: NodeCanvasRendererProps<Datum>\n) => {\n    ctx.beginPath()\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n    ctx.fillStyle = node.color\n    ctx.fill()\n}\n\nexport const renderLink = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    { link, linkGenerator }: LinkCanvasRendererProps<Datum>\n) => {\n    ctx.strokeStyle = link.color\n    ctx.lineWidth = link.thickness\n    ctx.beginPath()\n    linkGenerator({\n        source: [link.source.x, link.source.y],\n        target: [link.target.x, link.target.y],\n    })\n    ctx.stroke()\n}\n\nexport const renderLabel = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    { label, theme }: LabelCanvasRendererProps<Datum>\n) => {\n    ctx.save()\n\n    ctx.translate(label.x, label.y)\n    ctx.rotate(degreesToRadians(label.rotation))\n\n    ctx.textBaseline = 'middle'\n    ctx.textAlign = label.textAnchor === 'middle' ? 'center' : label.textAnchor\n    ctx.fillStyle = '#000'\n\n    drawCanvasText(ctx, theme.labels.text, label.label)\n\n    ctx.restore()\n}\n", "import { createElement } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { TooltipAnchor } from '@nivo/tooltip'\nimport {\n    ComputedLink,\n    LinkComponent,\n    LinkMouseEventHandler,\n    LinkTooltip,\n    LinkAnimatedProps,\n    LinkGenerator,\n} from './types'\n\ninterface LinksProps<Datum> {\n    links: ComputedLink<Datum>[]\n    linkComponent: LinkComponent<Datum>\n    linkGenerator: LinkGenerator\n    isInteractive: boolean\n    onMouseEnter?: LinkMouseEventHandler<Datum>\n    onMouseMove?: LinkMouseEventHandler<Datum>\n    onMouseLeave?: LinkMouseEventHandler<Datum>\n    onClick?: LinkMouseEventHandler<Datum>\n    tooltip?: LinkTooltip<Datum>\n    tooltipAnchor: TooltipAnchor\n}\n\nconst regularTransition = <Datum,>(link: ComputedLink<Datum>): LinkAnimatedProps => ({\n    sourceX: link.source.x,\n    sourceY: link.source.y,\n    targetX: link.target.x,\n    targetY: link.target.y,\n    thickness: link.thickness,\n    color: link.color,\n})\nconst leaveTransition = <Datum,>(link: ComputedLink<Datum>): LinkAnimatedProps => ({\n    sourceX: link.source.x,\n    sourceY: link.source.y,\n    targetX: link.target.x,\n    targetY: link.target.y,\n    thickness: link.thickness,\n    color: link.color,\n})\n\nexport const Links = <Datum,>({\n    links,\n    linkComponent,\n    linkGenerator,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    tooltipAnchor,\n}: LinksProps<Datum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<ComputedLink<Datum>, LinkAnimatedProps>(links, {\n        keys: link => link.id,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((animatedProps, link) =>\n                createElement(linkComponent, {\n                    link,\n                    linkGenerator,\n                    animatedProps,\n                    isInteractive,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                    onClick,\n                    tooltip,\n                    tooltipAnchor,\n                })\n            )}\n        </>\n    )\n}\n", "import { createElement } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { Margin, useMotionConfig } from '@nivo/core'\nimport { TooltipAnchor, TooltipPosition } from '@nivo/tooltip'\nimport {\n    ComputedNode,\n    CurrentNodeSetter,\n    NodeComponent,\n    NodeMouseEventHandler,\n    NodeTooltip,\n    NodeAnimatedProps,\n} from './types'\n\ninterface NodesProps<Datum> {\n    nodes: ComputedNode<Datum>[]\n    nodeComponent: NodeComponent<Datum>\n    isInteractive: boolean\n    onMouseEnter?: NodeMouseEventHandler<Datum>\n    onMouseMove?: NodeMouseEventHandler<Datum>\n    onMouseLeave?: NodeMouseEventHandler<Datum>\n    onClick?: NodeMouseEventHandler<Datum>\n    setCurrentNode: CurrentNodeSetter<Datum>\n    tooltip?: NodeTooltip<Datum>\n    tooltipPosition: TooltipPosition\n    tooltipAnchor: TooltipAnchor\n    margin: Margin\n}\n\nconst regularTransition = <Datum,>(node: ComputedNode<Datum>): NodeAnimatedProps => ({\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color,\n})\nconst leaveTransition = <Datum,>(node: ComputedNode<Datum>): NodeAnimatedProps => ({\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color,\n})\n\nexport const Nodes = <Datum,>({\n    nodes,\n    nodeComponent,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setCurrentNode,\n    tooltip,\n    tooltipPosition,\n    tooltipAnchor,\n    margin,\n}: NodesProps<Datum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<ComputedNode<Datum>, NodeAnimatedProps>(nodes, {\n        keys: node => node.uid,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((animatedProps, node) =>\n                createElement(nodeComponent, {\n                    node,\n                    isInteractive,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                    onClick,\n                    setCurrentNode,\n                    tooltip,\n                    tooltipPosition,\n                    tooltipAnchor,\n                    margin,\n                    animatedProps,\n                })\n            )}\n        </>\n    )\n}\n", "import { useMemo } from 'react'\nimport { usePropertyAccessor } from '@nivo/core'\nimport {\n    CommonProps,\n    Layout,\n    ComputedNode,\n    ComputedLabel,\n    LabelsPosition,\n    LabelTextAnchor,\n    LabelBaseline,\n} from './types'\n\ninterface LabelPositionResult {\n    x: number\n    y: number\n    rotation: number\n    textAnchor: LabelTextAnchor\n    baseline: LabelBaseline\n}\n\ntype GetLabelPosition<Datum> = (node: ComputedNode<Datum>) => LabelPositionResult\n\ninterface LabelPositionFactoryProps {\n    orient: boolean\n    offset: number\n}\n\nconst horizontalLabelBefore = (x: number, y: number, offset: number): LabelPositionResult => ({\n    x: x - offset,\n    y: y,\n    rotation: 0,\n    textAnchor: 'end',\n    baseline: 'middle',\n})\n\nconst horizontalLabelAfter = (x: number, y: number, offset: number): LabelPositionResult => ({\n    x: x + offset,\n    y: y,\n    rotation: 0,\n    textAnchor: 'start',\n    baseline: 'middle',\n})\n\nconst verticalLabelBefore = (x: number, y: number, offset: number): LabelPositionResult => ({\n    x: x,\n    y: y - offset,\n    rotation: 0,\n    textAnchor: 'middle',\n    baseline: 'auto',\n})\n\nconst verticalLabelBeforeOriented = (\n    x: number,\n    y: number,\n    offset: number\n): LabelPositionResult => ({\n    x: x,\n    y: y - offset,\n    rotation: -90,\n    textAnchor: 'start',\n    baseline: 'middle',\n})\n\nconst verticalLabelAfter = (x: number, y: number, offset: number): LabelPositionResult => ({\n    x: x,\n    y: y + offset,\n    rotation: 0,\n    textAnchor: 'middle',\n    baseline: 'hanging',\n})\n\nconst verticalLabelAfterOriented = (x: number, y: number, offset: number): LabelPositionResult => ({\n    x: x,\n    y: y + offset,\n    rotation: -90,\n    textAnchor: 'end',\n    baseline: 'middle',\n})\n\nconst verticalLeavesBeforeOthersAfter =\n    <Datum>({ orient, offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (node.isLeaf) {\n            if (orient) return verticalLabelBeforeOriented(node.x, node.y, spacing)\n            else return verticalLabelBefore(node.x, node.y, spacing)\n        } else {\n            if (orient) return verticalLabelAfterOriented(node.x, node.y, spacing)\n            else return verticalLabelAfter(node.x, node.y, spacing)\n        }\n    }\n\nconst verticalLeavesAfterOthersBefore =\n    <Datum>({ orient, offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (node.isLeaf) {\n            if (orient) return verticalLabelAfterOriented(node.x, node.y, spacing)\n            else return verticalLabelAfter(node.x, node.y, spacing)\n        } else {\n            if (orient) return verticalLabelBeforeOriented(node.x, node.y, spacing)\n            else return verticalLabelBefore(node.x, node.y, spacing)\n        }\n    }\n\nconst verticalAllBefore =\n    <Datum>({ orient, offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (orient) return verticalLabelBeforeOriented(node.x, node.y, spacing)\n        else return verticalLabelBefore(node.x, node.y, spacing)\n    }\n\nconst verticalAllAfter =\n    <Datum>({ orient, offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (orient) return verticalLabelAfterOriented(node.x, node.y, spacing)\n        else return verticalLabelAfter(node.x, node.y, spacing)\n    }\n\nconst horizontalLeavesBeforeOthersAfter =\n    <Datum>({ offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (node.isLeaf) return horizontalLabelBefore(node.x, node.y, spacing)\n        else return horizontalLabelAfter(node.x, node.y, spacing)\n    }\n\nconst horizontalLeavesAfterOthersBefore =\n    <Datum>({ offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        const spacing = node.size / 2 + offset\n        if (node.isLeaf) return horizontalLabelAfter(node.x, node.y, spacing)\n        return horizontalLabelBefore(node.x, node.y, spacing)\n    }\n\nconst horizontalAllBefore =\n    <Datum>({ offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        return horizontalLabelBefore(node.x, node.y, node.size / 2 + offset)\n    }\n\nconst horizontalAllAfter =\n    <Datum>({ offset }: LabelPositionFactoryProps): GetLabelPosition<Datum> =>\n    (node: ComputedNode<Datum>) => {\n        return horizontalLabelAfter(node.x, node.y, node.size / 2 + offset)\n    }\n\nconst useGetLabelPosition = <Datum>({\n    layout,\n    labelsPosition,\n    orientLabel,\n    labelOffset,\n}: {\n    layout: Layout\n    labelsPosition: LabelsPosition\n    orientLabel: boolean\n    labelOffset: number\n}) =>\n    useMemo(() => {\n        const options: LabelPositionFactoryProps = {\n            orient: orientLabel,\n            offset: labelOffset,\n        }\n\n        if (layout === 'top-to-bottom') {\n            if (labelsPosition === 'outward') {\n                return verticalLeavesAfterOthersBefore<Datum>(options)\n            } else if (labelsPosition === 'inward') {\n                return verticalLeavesBeforeOthersAfter<Datum>(options)\n            } else if (labelsPosition === 'layout') {\n                return verticalAllAfter<Datum>(options)\n            } else if (labelsPosition === 'layout-opposite') {\n                return verticalAllBefore<Datum>(options)\n            }\n        }\n\n        if (layout === 'bottom-to-top') {\n            if (labelsPosition === 'outward') {\n                return verticalLeavesBeforeOthersAfter<Datum>(options)\n            } else if (labelsPosition === 'inward') {\n                return verticalLeavesAfterOthersBefore<Datum>(options)\n            } else if (labelsPosition === 'layout') {\n                return verticalAllBefore<Datum>(options)\n            } else if (labelsPosition === 'layout-opposite') {\n                return verticalAllAfter<Datum>(options)\n            }\n        }\n\n        if (layout === 'right-to-left') {\n            if (labelsPosition === 'outward') {\n                return horizontalLeavesBeforeOthersAfter<Datum>(options)\n            } else if (labelsPosition === 'inward') {\n                return horizontalLeavesAfterOthersBefore<Datum>(options)\n            } else if (labelsPosition === 'layout') {\n                return horizontalAllBefore<Datum>(options)\n            } else if (labelsPosition === 'layout-opposite') {\n                return horizontalAllAfter<Datum>(options)\n            }\n        }\n\n        if (layout === 'left-to-right') {\n            if (labelsPosition === 'outward') {\n                return horizontalLeavesAfterOthersBefore<Datum>(options)\n            } else if (labelsPosition === 'inward') {\n                return horizontalLeavesBeforeOthersAfter<Datum>(options)\n            } else if (labelsPosition === 'layout') {\n                return horizontalAllAfter<Datum>(options)\n            } else if (labelsPosition === 'layout-opposite') {\n                return horizontalAllBefore<Datum>(options)\n            }\n        }\n    }, [layout, labelsPosition, orientLabel, labelOffset])\n\nexport const useLabels = <Datum>({\n    nodes,\n    label,\n    layout,\n    labelsPosition,\n    orientLabel,\n    labelOffset,\n}: {\n    nodes: readonly ComputedNode<Datum>[]\n    label: Exclude<CommonProps<Datum>['label'], undefined>\n    layout: Layout\n    labelsPosition: LabelsPosition\n    orientLabel: boolean\n    labelOffset: number\n}) => {\n    const getLabel = usePropertyAccessor(label)\n    const getPosition = useGetLabelPosition<Datum>({\n        layout,\n        labelsPosition,\n        orientLabel,\n        labelOffset,\n    })\n\n    if (getPosition === undefined) {\n        throw new Error('Unable to determine the logic to compute labels position')\n    }\n\n    return useMemo(\n        () =>\n            nodes.map(\n                node =>\n                    ({\n                        id: node.uid,\n                        node: node,\n                        label: getLabel(node),\n                        ...getPosition(node),\n                    } as ComputedLabel<Datum>)\n            ),\n        [nodes, getLabel, getPosition]\n    )\n}\n", "import { createElement } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport {\n    CommonProps,\n    ComputedLabel,\n    ComputedNode,\n    LabelAnimatedProps,\n    LabelComponent,\n    LabelsPosition,\n    Layout,\n} from './types'\nimport { useLabels } from './labelsHooks'\n\ninterface LabelsProps<Datum> {\n    nodes: readonly ComputedNode<Datum>[]\n    label: Exclude<CommonProps<Datum>['label'], undefined>\n    layout: Layout\n    labelsPosition: LabelsPosition\n    orientLabel: boolean\n    labelOffset: number\n    labelComponent: LabelComponent<Datum>\n}\n\nconst regularTransition = <Datum,>(label: ComputedLabel<Datum>): LabelAnimatedProps => ({\n    x: label.x,\n    y: label.y,\n    rotation: label.rotation,\n})\nconst leaveTransition = <Datum,>(label: ComputedLabel<Datum>): LabelAnimatedProps => ({\n    x: label.x,\n    y: label.y,\n    rotation: label.rotation,\n})\n\nexport const Labels = <Datum,>({\n    nodes,\n    label,\n    layout,\n    labelsPosition,\n    orientLabel,\n    labelOffset,\n    labelComponent,\n}: LabelsProps<Datum>) => {\n    const labels = useLabels({ nodes, label, layout, labelsPosition, orientLabel, labelOffset })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<ComputedLabel<Datum>, LabelAnimatedProps>(labels, {\n        keys: label => label.id,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <g\n            style={{\n                pointerEvents: 'none',\n            }}\n        >\n            {transition((animatedProps, label) =>\n                createElement(labelComponent, {\n                    label,\n                    animatedProps,\n                })\n            )}\n        </g>\n    )\n}\n", "import { useMemo } from 'react'\nimport { createElement, memo } from 'react'\nimport { Margin } from '@nivo/core'\nimport { TooltipAnchor, TooltipPosition } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { ComputedNode, CurrentNodeSetter, NodeMouseEventHandler, NodeTooltip } from './types'\n\ninterface MeshProps<Datum> {\n    nodes: ComputedNode<Datum>[]\n    width: number\n    height: number\n    margin: Margin\n    onMouseEnter?: NodeMouseEventHandler<Datum>\n    onMouseMove?: NodeMouseEventHandler<Datum>\n    onMouseLeave?: NodeMouseEventHandler<Datum>\n    onClick?: NodeMouseEventHandler<Datum>\n    setCurrentNode: CurrentNodeSetter<Datum>\n    tooltip?: NodeTooltip<Datum>\n    tooltipPosition?: TooltipPosition\n    tooltipAnchor?: TooltipAnchor\n    detectionRadius: number\n    debug: boolean\n}\n\nconst NonMemoizedMesh = <Datum,>({\n    nodes,\n    width,\n    height,\n    margin,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setCurrentNode,\n    tooltip,\n    tooltipPosition,\n    tooltipAnchor,\n    detectionRadius,\n    debug,\n}: MeshProps<Datum>) => {\n    const renderTooltip = useMemo(() => {\n        if (!tooltip) return undefined\n        return (node: ComputedNode<Datum>) => createElement(tooltip, { node })\n    }, [tooltip])\n\n    /*\n    const handleMouseEnter = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            setCurrentNode(node)\n            if (tooltip !== undefined) {\n                showTooltipAt(\n                    createElement(tooltip, { node }),\n                    [node.x + margin.left, node.y ?? 0 + margin.top],\n                    'top'\n                )\n            }\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [showTooltipAt, tooltip, margin.left, margin.top, setCurrentNode, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            setCurrentNode(node)\n            if (tooltip !== undefined) {\n                showTooltipAt(\n                    createElement(tooltip, { node }),\n                    [node.x + margin.left, node.y ?? 0 + margin.top],\n                    'top'\n                )\n            }\n            onMouseMove && onMouseMove(node, event)\n        },\n        [showTooltipAt, tooltip, margin.left, margin.top, setCurrentNode, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            setCurrentNode(null)\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [hideTooltip, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (node: ComputedNode<Datum>, event: MouseEvent) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n    */\n\n    return (\n        <BaseMesh<ComputedNode<Datum>>\n            nodes={nodes}\n            width={width}\n            height={height}\n            margin={margin}\n            detectionRadius={detectionRadius}\n            setCurrent={setCurrentNode}\n            onMouseEnter={onMouseEnter}\n            onMouseMove={onMouseMove}\n            onMouseLeave={onMouseLeave}\n            onClick={onClick}\n            tooltip={renderTooltip}\n            tooltipPosition={tooltipPosition}\n            tooltipAnchor={tooltipAnchor}\n            debug={debug}\n        />\n    )\n}\n\nexport const Mesh = memo(NonMemoizedMesh) as typeof NonMemoizedMesh\n", "import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { DefaultDatum, LayerId, TreeSvgProps, CustomSvgLayerProps } from './types'\nimport { svgDefaultProps } from './defaults'\nimport { useTree } from './hooks'\nimport { Links } from './Links'\nimport { Nodes } from './Nodes'\nimport { Labels } from './Labels'\nimport { Mesh } from './Mesh'\n\ntype InnerTreeProps<Datum> = Omit<\n    TreeSvgProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTree = <Datum,>({\n    width,\n    height,\n    margin: partialMargin,\n    data,\n    identity,\n    mode = svgDefaultProps.mode,\n    layout = svgDefaultProps.layout,\n    nodeSize = svgDefaultProps.nodeSize,\n    activeNodeSize,\n    inactiveNodeSize,\n    nodeColor = svgDefaultProps.nodeColor,\n    fixNodeColorAtDepth = svgDefaultProps.fixNodeColorAtDepth,\n    nodeComponent = svgDefaultProps.nodeComponent,\n    linkCurve = svgDefaultProps.linkCurve,\n    linkThickness = svgDefaultProps.linkThickness,\n    activeLinkThickness,\n    inactiveLinkThickness,\n    linkColor = svgDefaultProps.linkColor,\n    linkComponent = svgDefaultProps.linkComponent,\n    enableLabel = svgDefaultProps.enableLabel,\n    label = svgDefaultProps.label,\n    labelsPosition = svgDefaultProps.labelsPosition,\n    orientLabel = svgDefaultProps.orientLabel,\n    labelOffset = svgDefaultProps.labelOffset,\n    labelComponent = svgDefaultProps.labelComponent,\n    layers = svgDefaultProps.layers,\n    isInteractive = svgDefaultProps.isInteractive,\n    useMesh = svgDefaultProps.useMesh,\n    meshDetectionRadius = svgDefaultProps.meshDetectionRadius,\n    debugMesh = svgDefaultProps.debugMesh,\n    highlightAncestorNodes = svgDefaultProps.highlightAncestorNodes,\n    highlightDescendantNodes = svgDefaultProps.highlightDescendantNodes,\n    highlightAncestorLinks = svgDefaultProps.highlightAncestorLinks,\n    highlightDescendantLinks = svgDefaultProps.highlightDescendantLinks,\n    onNodeMouseEnter,\n    onNodeMouseMove,\n    onNodeMouseLeave,\n    onNodeClick,\n    nodeTooltip,\n    nodeTooltipPosition = svgDefaultProps.nodeTooltipPosition,\n    nodeTooltipAnchor = svgDefaultProps.nodeTooltipAnchor,\n    onLinkMouseEnter,\n    onLinkMouseMove,\n    onLinkMouseLeave,\n    onLinkClick,\n    linkTooltip,\n    linkTooltipAnchor = svgDefaultProps.linkTooltipAnchor,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeProps<Datum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, nodeByUid, links, linkGenerator, setCurrentNode } = useTree<Datum>({\n        data,\n        identity,\n        layout,\n        mode,\n        width: innerWidth,\n        height: innerHeight,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        fixNodeColorAtDepth,\n        highlightAncestorNodes,\n        highlightDescendantNodes,\n        linkCurve,\n        linkThickness,\n        activeLinkThickness,\n        inactiveLinkThickness,\n        linkColor,\n        highlightAncestorLinks,\n        highlightDescendantLinks,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        links: null,\n        nodes: null,\n        labels: null,\n        mesh: null,\n    }\n\n    if (layers.includes('links')) {\n        layerById.links = (\n            <Links<Datum>\n                key=\"links\"\n                links={links}\n                linkComponent={linkComponent}\n                linkGenerator={linkGenerator}\n                isInteractive={isInteractive}\n                onMouseEnter={onLinkMouseEnter}\n                onMouseMove={onLinkMouseMove}\n                onMouseLeave={onLinkMouseLeave}\n                onClick={onLinkClick}\n                tooltip={linkTooltip}\n                tooltipAnchor={linkTooltipAnchor}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <Nodes<Datum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                isInteractive={isInteractive}\n                onMouseEnter={onNodeMouseEnter}\n                onMouseMove={onNodeMouseMove}\n                onMouseLeave={onNodeMouseLeave}\n                onClick={onNodeClick}\n                setCurrentNode={setCurrentNode}\n                tooltip={nodeTooltip}\n                tooltipPosition={nodeTooltipPosition}\n                tooltipAnchor={nodeTooltipAnchor}\n                margin={margin}\n            />\n        )\n    }\n\n    if (layers.includes('labels') && enableLabel) {\n        layerById.labels = (\n            <Labels<Datum>\n                key=\"labels\"\n                label={label}\n                nodes={nodes}\n                layout={layout}\n                labelsPosition={labelsPosition}\n                orientLabel={orientLabel}\n                labelOffset={labelOffset}\n                labelComponent={labelComponent}\n            />\n        )\n    }\n\n    if (layers.includes('mesh') && isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh<Datum>\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                detectionRadius={meshDetectionRadius}\n                debug={debugMesh}\n                onMouseEnter={onNodeMouseEnter}\n                onMouseMove={onNodeMouseMove}\n                onMouseLeave={onNodeMouseLeave}\n                onClick={onNodeClick}\n                tooltip={nodeTooltip}\n                tooltipPosition={nodeTooltipPosition}\n                tooltipAnchor={nodeTooltipAnchor}\n                setCurrentNode={setCurrentNode}\n            />\n        )\n    }\n\n    const customLayerProps: CustomSvgLayerProps<Datum> = useMemo(\n        () => ({\n            nodes,\n            nodeByUid,\n            links,\n            innerWidth,\n            innerHeight,\n            linkGenerator,\n            setCurrentNode,\n        }),\n        [nodes, nodeByUid, links, innerWidth, innerHeight, linkGenerator, setCurrentNode]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Tree = <Datum = DefaultDatum,>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeSvgProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTree<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { ResponsiveTreeSvgProps, DefaultDatum } from './types'\nimport { Tree } from './Tree'\n\nexport const ResponsiveTree = <Datum = DefaultDatum,>(props: ResponsiveTreeSvgProps<Datum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Tree<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n", "import { useEffect, useMemo, useRef, createElement } from 'react'\nimport { Container, useDimensions, useTheme } from '@nivo/core'\nimport { setCanvasFont } from '@nivo/text'\nimport { useMesh, renderDebugToCanvas } from '@nivo/voronoi'\nimport { DefaultDatum, TreeCanvasProps, CustomCanvasLayerProps, ComputedNode } from './types'\nimport { canvasDefaultProps } from './defaults'\nimport { useTree } from './hooks'\nimport { useLabels } from './labelsHooks'\n\ntype InnerTreeCanvasProps<Datum> = Omit<\n    TreeCanvasProps<Datum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerTreeCanvas = <Datum,>({\n    width,\n    height,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    margin: partialMargin,\n    data,\n    identity,\n    mode = canvasDefaultProps.mode,\n    layout = canvasDefaultProps.layout,\n    nodeSize = canvasDefaultProps.nodeSize,\n    activeNodeSize,\n    inactiveNodeSize,\n    nodeColor = canvasDefaultProps.nodeColor,\n    fixNodeColorAtDepth = canvasDefaultProps.fixNodeColorAtDepth,\n    renderNode = canvasDefaultProps.renderNode,\n    linkCurve = canvasDefaultProps.linkCurve,\n    linkThickness = canvasDefaultProps.linkThickness,\n    activeLinkThickness,\n    inactiveLinkThickness,\n    linkColor = canvasDefaultProps.linkColor,\n    renderLink = canvasDefaultProps.renderLink,\n    enableLabel = canvasDefaultProps.enableLabel,\n    label = canvasDefaultProps.label,\n    labelsPosition = canvasDefaultProps.labelsPosition,\n    orientLabel = canvasDefaultProps.orientLabel,\n    labelOffset = canvasDefaultProps.labelOffset,\n    renderLabel = canvasDefaultProps.renderLabel,\n    layers = canvasDefaultProps.layers,\n    isInteractive = canvasDefaultProps.isInteractive,\n    meshDetectionRadius = canvasDefaultProps.meshDetectionRadius,\n    debugMesh = canvasDefaultProps.debugMesh,\n    highlightAncestorNodes = canvasDefaultProps.highlightAncestorNodes,\n    highlightDescendantNodes = canvasDefaultProps.highlightDescendantNodes,\n    highlightAncestorLinks = canvasDefaultProps.highlightAncestorLinks,\n    highlightDescendantLinks = canvasDefaultProps.highlightDescendantLinks,\n    onNodeMouseEnter,\n    onNodeMouseMove,\n    onNodeMouseLeave,\n    onNodeClick,\n    nodeTooltip,\n    nodeTooltipPosition = canvasDefaultProps.nodeTooltipPosition,\n    nodeTooltipAnchor = canvasDefaultProps.nodeTooltipAnchor,\n    role = canvasDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerTreeCanvasProps<Datum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const theme = useTheme()\n\n    const { nodes, nodeByUid, links, linkGenerator, setCurrentNode } = useTree<Datum>({\n        data,\n        identity,\n        layout,\n        mode,\n        width: innerWidth,\n        height: innerHeight,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        fixNodeColorAtDepth,\n        highlightAncestorNodes,\n        highlightDescendantNodes,\n        linkCurve,\n        linkThickness,\n        activeLinkThickness,\n        inactiveLinkThickness,\n        linkColor,\n        highlightAncestorLinks,\n        highlightDescendantLinks,\n    })\n\n    const labels = useLabels<Datum>({\n        nodes,\n        label,\n        layout,\n        labelsPosition,\n        orientLabel,\n        labelOffset,\n    })\n\n    const renderTooltip = useMemo(() => {\n        if (!nodeTooltip) return undefined\n        return (node: ComputedNode<Datum>) => createElement(nodeTooltip, { node })\n    }, [nodeTooltip])\n\n    const {\n        delaunay,\n        voronoi,\n        handleMouseEnter,\n        handleMouseMove,\n        handleMouseLeave,\n        handleClick,\n        current,\n    } = useMesh<ComputedNode<Datum>, HTMLCanvasElement>({\n        elementRef: canvasEl,\n        nodes,\n        width: innerWidth,\n        height: innerHeight,\n        margin,\n        detectionRadius: meshDetectionRadius,\n        isInteractive,\n        setCurrent: setCurrentNode,\n        onMouseEnter: onNodeMouseEnter,\n        onMouseMove: onNodeMouseMove,\n        onMouseLeave: onNodeMouseLeave,\n        onClick: onNodeClick,\n        tooltip: renderTooltip,\n        tooltipPosition: nodeTooltipPosition,\n        tooltipAnchor: nodeTooltipAnchor,\n        debug: debugMesh,\n    })\n\n    const customLayerProps: CustomCanvasLayerProps<Datum> = useMemo(\n        () => ({\n            nodes,\n            nodeByUid,\n            links,\n            innerWidth,\n            innerHeight,\n            linkGenerator,\n        }),\n        [nodes, nodeByUid, links, innerWidth, innerHeight, linkGenerator]\n    )\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'links') {\n                linkGenerator.context(ctx)\n\n                links.forEach(link => {\n                    renderLink(ctx, { link, linkGenerator })\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, { node })\n                })\n            } else if (layer === 'labels' && enableLabel) {\n                setCanvasFont(ctx, theme.labels.text)\n\n                labels.forEach(label => {\n                    renderLabel(ctx, { label, theme })\n                })\n            } else if (layer === 'mesh' && debugMesh && voronoi) {\n                ctx.save()\n                // The mesh should cover the whole chart, including margins.\n                ctx.translate(-margin.left, -margin.top)\n\n                renderDebugToCanvas(ctx, {\n                    delaunay,\n                    voronoi,\n                    detectionRadius: meshDetectionRadius,\n                    index: current !== null ? current[0] : null,\n                })\n\n                ctx.restore()\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        pixelRatio,\n        margin.left,\n        margin.top,\n        theme,\n        layers,\n        nodes,\n        nodeByUid,\n        renderNode,\n        links,\n        renderLink,\n        linkGenerator,\n        labels,\n        enableLabel,\n        renderLabel,\n        delaunay,\n        voronoi,\n        meshDetectionRadius,\n        debugMesh,\n        current,\n        customLayerProps,\n    ])\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n        />\n    )\n}\n\nexport const TreeCanvas = <Datum = DefaultDatum,>({\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: TreeCanvasProps<Datum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerTreeCanvas<Datum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { ResponsiveTreeCanvasProps, DefaultDatum } from './types'\nimport { TreeCanvas } from './TreeCanvas'\n\nexport const ResponsiveTreeCanvas = <Datum = DefaultDatum,>(\n    props: ResponsiveTreeCanvasProps<Datum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TreeCanvas<Datum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],
  "mappings": "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",
  "names": ["setCanvasFont", "ctx", "style", "font", "fontWeight", "fontSize", "fontFamily", "drawCanvasText", "text", "x", "y", "outlineWidth", "strokeStyle", "outlineColor", "lineWidth", "lineJoin", "strokeText", "fillStyle", "fill", "fillText", "defaultNodePositionAccessor", "node", "x", "y", "defaultMargin", "coreDefaultMargin", "defaultTooltipPosition", "defaultTooltipAnchor", "computeMeshPoints", "_ref", "points", "_ref$getNodePosition", "getNodePosition", "_ref$margin", "margin", "map", "_getNodePosition", "left", "top", "computeMesh", "_ref2", "width", "height", "_ref2$margin", "debug", "delaunay", "Delaunay", "from", "voronoi", "right", "bottom", "useVoronoiMesh", "useMemo", "useMeshEvents", "_ref4", "elementRef", "nodes", "_ref4$getNodePosition", "getNodePosition", "defaultNodePositionAccessor", "delaunay", "setCurrentNode", "setCurrent", "_ref4$margin", "margin", "defaultMargin", "_ref4$detectionRadius", "detectionRadius", "Infinity", "_ref4$isInteractive", "isInteractive", "onMouseEnter", "onMouseMove", "onMouseLeave", "onClick", "onTouchStart", "onTouchMove", "onTouchEnd", "_ref4$enableTouchCros", "enableTouchCrosshair", "tooltip", "_ref4$tooltipPosition", "tooltipPosition", "defaultTooltipPosition", "_ref4$tooltipAnchor", "tooltipAnchor", "defaultTooltipAnchor", "_useState", "useState", "current", "previous", "useRef", "useEffect", "findNode", "useCallback", "event", "_getRelativeCursor", "getRelativeCursor", "x", "y", "index", "find", "node", "_getNodePosition", "nodeX", "nodeY", "getDistance", "left", "top", "_useTooltip", "useTooltip", "showTooltipAt", "showTooltipFromEvent", "hideTooltip", "showTooltip", "useMemo", "_getNodePosition2", "handleMouseEnter", "match", "handleMouseMove", "_previous$current", "previousIndex", "previousNode", "handleMouseLeave", "handleClick", "handleTouchStart", "handleTouchMove", "handleTouchEnd", "undefined", "useMesh", "_ref5", "width", "height", "_ref5$margin", "_ref5$isInteractive", "_ref5$detectionRadius", "_ref5$tooltipPosition", "_ref5$tooltipAnchor", "_ref5$debug", "debug", "_useVoronoiMesh", "useVoronoiMesh", "points", "voronoi", "_useMeshEvents", "Mesh", "_ref", "nodes", "width", "height", "_ref$margin", "margin", "defaultMargin", "getNodePosition", "setCurrent", "onMouseEnter", "onMouseMove", "onMouseLeave", "onClick", "onTouchStart", "onTouchMove", "onTouchEnd", "_ref$enableTouchCross", "enableTouchCrosshair", "_ref$detectionRadius", "detectionRadius", "Infinity", "tooltip", "_ref$tooltipPosition", "tooltipPosition", "defaultTooltipPosition", "_ref$tooltipAnchor", "tooltipAnchor", "defaultTooltipAnchor", "debug", "elementRef", "useRef", "_useVoronoiMesh", "useVoronoiMesh", "points", "delaunay", "voronoi", "_useMeshEvents", "useMeshEvents", "current", "handleMouseEnter", "handleMouseMove", "handleMouseLeave", "handleClick", "handleTouchStart", "handleTouchMove", "handleTouchEnd", "voronoiPath", "useMemo", "render", "_jsxs", "ref", "transform", "left", "top", "children", "_Fragment", "_jsx", "d", "stroke", "strokeWidth", "opacity", "fill", "renderPoints", "renderCell", "right", "bottom", "style", "cursor", "renderVoronoiToCanvas", "ctx", "save", "globalAlpha", "beginPath", "strokeStyle", "lineWidth", "restore", "renderDelaunayPointsToCanvas", "radius", "renderVoronoiCellToCanvas", "index", "fillStyle", "renderDebugToCanvas", "useRoot", "_ref", "data", "mode", "getIdentity", "useMemo", "root", "d3Hierarchy", "cluster", "d3Tree", "d3Cluster", "eachBefore", "node", "ancestors", "filter", "ancestor", "reverse", "ancestorIds", "map", "uid", "concat", "join", "ancestorUids", "each", "descendantUids", "descendants", "descendant", "useNodeSizeModifier", "size", "useNodes", "_ref3", "xScale", "yScale", "layout", "nodeSize", "activeNodeSize", "inactiveNodeSize", "nodeColor", "fixNodeColorAtDepth", "intermediateNodes", "x", "y", "id", "path", "isRoot", "depth", "isLeaf", "height", "getNodeSize", "getActiveNodeSize", "getInactiveNodeSize", "getNodeColorBase", "useOrdinalColorScale", "getNodeColor", "Infinity", "nodeByUid", "length", "parent", "color", "_useState", "useState", "activeNodeUids", "setActiveNodeUids", "computed", "nodes", "intermediateNode", "computedNode", "_extends", "isActive", "includes", "useLinkThicknessModifier", "thickness", "link", "useTree", "_ref7", "width", "_ref7$identity", "identity", "commonDefaultProps", "_ref7$mode", "_ref7$layout", "_ref7$nodeSize", "_ref7$nodeColor", "_ref7$fixNodeColorAtD", "_ref7$highlightAncest", "highlightAncestorNodes", "_ref7$highlightDescen", "highlightDescendantNodes", "_ref7$linkCurve", "linkCurve", "_ref7$linkThickness", "linkThickness", "_ref7$linkColor", "linkColor", "activeLinkThickness", "inactiveLinkThickness", "_ref7$highlightAncest2", "highlightAncestorLinks", "_ref7$highlightDescen2", "highlightDescendantLinks", "usePropertyAccessor", "_useCartesianScales", "_ref2", "scaleLinear", "domain", "range", "_useNodes", "linkGenerator", "_ref5", "curve", "curveFactory", "curveLinear", "curveBumpY", "curveBumpX", "curveStep", "curveStepBefore", "curveStepAfter", "d3Link", "_useLinks", "_ref4", "intermediateLinks", "links", "source", "target", "getLinkThickness", "getActiveLinkThickness", "getInactiveLinkThickness", "theme", "useTheme", "getLinkColor", "useInheritedColor", "_useState2", "activeLinkIds", "setActiveLinkIds", "intermediateLink", "computedLink", "setCurrentNode", "_ref6", "useCallback", "nodeUids", "linkIds", "forEach", "push", "useNodeMouseEventHandlers", "_ref8", "isInteractive", "onMouseEnter", "onMouseMove", "onMouseLeave", "onClick", "tooltip", "tooltipPosition", "tooltipAnchor", "margin", "_useTooltip", "useTooltip", "showTooltipFromEvent", "showTooltipAt", "hideTooltip", "showTooltip", "createElement", "left", "top", "event", "handleMouseEnter", "handleMouseMove", "handleMouseLeave", "handleClick", "undefined", "useLinkMouseEventHandlers", "_ref9", "_useTooltip2", "scheme", "from", "modifiers", "enableLabel", "label", "labelsPosition", "orientLabel", "labelOffset", "useMesh", "meshDetectionRadius", "debugMesh", "nodeTooltipPosition", "nodeTooltipAnchor", "role", "animate", "motionConfig", "svgDefaultProps", "layers", "nodeComponent", "animatedProps", "eventHandlers", "_jsx", "animated", "circle", "r", "to", "fill", "cx", "cy", "linkComponent", "d", "sourceX", "sourceY", "targetX", "targetY", "strokeWidth", "stroke", "labelComponent", "g", "transform", "children", "_jsxs", "rotation", "labels", "text", "outlineWidth", "style", "outlineColor", "strokeLinejoin", "textAnchor", "dominantBaseline", "baseline", "linkTooltipAnchor", "canvasDefaultProps", "renderNode", "ctx", "beginPath", "arc", "Math", "PI", "fillStyle", "renderLink", "strokeStyle", "lineWidth", "renderLabel", "save", "translate", "rotate", "degreesToRadians", "textBaseline", "textAlign", "drawCanvasText", "restore", "pixelRatio", "window", "devicePixelRatio", "regularTransition", "leaveTransition", "Links", "_useMotionConfig", "useMotionConfig", "springConfig", "config", "transition", "useTransition", "keys", "enter", "update", "leave", "immediate", "_Fragment", "Nodes", "horizontalLabelBefore", "offset", "horizontalLabelAfter", "verticalLabelBefore", "verticalLabelBeforeOriented", "verticalLabelAfter", "verticalLabelAfterOriented", "verticalLeavesBeforeOthersAfter", "orient", "spacing", "verticalLeavesAfterOthersBefore", "verticalAllBefore", "verticalAllAfter", "horizontalLeavesBeforeOthersAfter", "horizontalLeavesAfterOthersBefore", "horizontalAllBefore", "horizontalAllAfter", "useLabels", "_ref10", "getLabel", "getPosition", "options", "Error", "Labels", "pointerEvents", "Mesh", "memo", "detectionRadius", "debug", "renderTooltip", "BaseMesh", "setCurrent", "InnerTree", "partialMargin", "_ref$mode", "_ref$layout", "_ref$nodeSize", "_ref$nodeColor", "_ref$fixNodeColorAtDe", "_ref$nodeComponent", "_ref$linkCurve", "_ref$linkThickness", "_ref$linkColor", "_ref$linkComponent", "_ref$enableLabel", "_ref$label", "_ref$labelsPosition", "_ref$orientLabel", "_ref$labelOffset", "_ref$labelComponent", "_ref$layers", "_ref$isInteractive", "_ref$useMesh", "_ref$meshDetectionRad", "_ref$debugMesh", "_ref$highlightAncesto", "_ref$highlightDescend", "_ref$highlightAncesto2", "_ref$highlightDescend2", "onNodeMouseEnter", "onNodeMouseMove", "onNodeMouseLeave", "onNodeClick", "nodeTooltip", "_ref$nodeTooltipPosit", "_ref$nodeTooltipAncho", "onLinkMouseEnter", "onLinkMouseMove", "onLinkMouseLeave", "onLinkClick", "linkTooltip", "_ref$linkTooltipAncho", "_ref$role", "ariaLabel", "ariaLabelledBy", "ariaDescribedBy", "_useDimensions", "useDimensions", "outerWidth", "outerHeight", "innerWidth", "innerHeight", "_useTree", "layerById", "mesh", "customLayerProps", "SvgWrapper", "layer", "i", "_layerById$layer", "Fragment", "Tree", "_ref2$isInteractive", "_ref2$animate", "_ref2$motionConfig", "renderWrapper", "otherProps", "_objectWithoutPropertiesLoose", "_excluded", "Container", "ResponsiveTree", "props", "ResponsiveWrapper", "InnerTreeCanvas", "_ref$pixelRatio", "_ref$renderNode", "_ref$renderLink", "_ref$renderLabel", "canvasEl", "useRef", "_useMesh", "elementRef", "delaunay", "voronoi", "current", "useEffect", "getContext", "scale", "background", "fillRect", "context", "setCanvasFont", "renderDebugToCanvas", "index", "ref", "cursor", "TreeCanvas", "ResponsiveTreeCanvas"]
}
